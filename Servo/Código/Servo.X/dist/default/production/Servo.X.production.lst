

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Thu Mar 19 19:58:10 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    10                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    11                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    12                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    14  0000                     
    15                           ; Version 2.10
    16                           ; Generated 31/07/2019 GMT
    17                           ; 
    18                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    19                           ; All rights reserved.
    20                           ; 
    21                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    22                           ; 
    23                           ; Redistribution and use in source and binary forms, with or without modification, are
    24                           ; permitted provided that the following conditions are met:
    25                           ; 
    26                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    27                           ;        conditions and the following disclaimer.
    28                           ; 
    29                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    30                           ;        of conditions and the following disclaimer in the documentation and/or other
    31                           ;        materials provided with the distribution.
    32                           ; 
    33                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    34                           ;        software without specific prior written permission.
    35                           ; 
    36                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    37                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    38                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    39                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    40                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    41                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    42                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    43                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    44                           ; 
    45                           ; 
    46                           ; Code-generator required, PIC18F4550 Definitions
    47                           ; 
    48                           ; SFR Addresses
    49  0000                     _TMR0	set	4054
    50  0000                     _LATBbits	set	3978
    51  0000                     _PORTBbits	set	3969
    52  0000                     _T0CON	set	4053
    53  0000                     _TRISDbits	set	3989
    54  0000                     _TRISBbits	set	3987
    55  0000                     _TMR0IF	set	32658
    56  0000                     _T0IF	set	32658
    57  0000                     _TMR0IE	set	32661
    58  0000                     _GIE	set	32663
    59  0000                     _LATD0	set	31840
    60                           
    61                           ; #config settings
    62  0000                     
    63                           	psect	cinit
    64  0010E4                     __pcinit:
    65                           	opt callstack 0
    66  0010E4                     start_initialization:
    67                           	opt callstack 0
    68  0010E4                     __initialization:
    69                           	opt callstack 0
    70                           
    71                           ; Clear objects allocated to COMRAM (4 bytes)
    72  0010E4  6A04               	clrf	(__pbssCOMRAM+3)& (0+255),c
    73  0010E6  6A03               	clrf	(__pbssCOMRAM+2)& (0+255),c
    74  0010E8  6A02               	clrf	(__pbssCOMRAM+1)& (0+255),c
    75  0010EA  6A01               	clrf	__pbssCOMRAM& (0+255),c
    76  0010EC                     end_of_initialization:
    77                           	opt callstack 0
    78  0010EC                     __end_of__initialization:
    79                           	opt callstack 0
    80  0010EC  9005               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
    81  0010EE  9205               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
    82  0010F0  0100               	movlb	0
    83  0010F2  EF09  F008         	goto	_main	;jump to C main() function
    84                           
    85                           	psect	bssCOMRAM
    86  000001                     __pbssCOMRAM:
    87                           	opt callstack 0
    88  000001                     _value:
    89                           	opt callstack 0
    90  000001                     	ds	2
    91  000003                     _count:
    92                           	opt callstack 0
    93  000003                     	ds	2
    94                           
    95                           	psect	cstackCOMRAM
    96  000000                     __pcstackCOMRAM:
    97                           	opt callstack 0
    98  000000                     
    99                           ; 1 bytes @ 0x0
   100 ;;
   101 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   102 ;;
   103 ;; *************** function _main *****************
   104 ;; Defined at:
   105 ;;		line 11 in file "main.c"
   106 ;; Parameters:    Size  Location     Type
   107 ;;		None
   108 ;; Auto vars:     Size  Location     Type
   109 ;;		None
   110 ;; Return value:  Size  Location     Type
   111 ;;                  1    wreg      void 
   112 ;; Registers used:
   113 ;;		wreg, status,2, status,0
   114 ;; Tracked objects:
   115 ;;		On entry : 0/0
   116 ;;		On exit  : 0/0
   117 ;;		Unchanged: 0/0
   118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   119 ;;      Params:         0       0       0       0       0       0       0       0       0
   120 ;;      Locals:         0       0       0       0       0       0       0       0       0
   121 ;;      Temps:          0       0       0       0       0       0       0       0       0
   122 ;;      Totals:         0       0       0       0       0       0       0       0       0
   123 ;;Total ram usage:        0 bytes
   124 ;; Hardware stack levels required when called:    1
   125 ;; This function calls:
   126 ;;		Nothing
   127 ;; This function is called by:
   128 ;;		Startup code after reset
   129 ;; This function uses a non-reentrant model
   130 ;;
   131                           
   132                           	psect	text0
   133  001012                     __ptext0:
   134                           	opt callstack 0
   135  001012                     _main:
   136                           	opt callstack 30
   137  001012                     
   138                           ;main.c: 13:     TRISBbits.RB4 = 1;
   139  001012  8893               	bsf	147,4,c	;volatile
   140                           
   141                           ;main.c: 14:     TRISBbits.RB2 = 0;
   142  001014  9493               	bcf	147,2,c	;volatile
   143                           
   144                           ;main.c: 15:     TRISDbits.RD0= 0;
   145  001016  9095               	bcf	149,0,c	;volatile
   146                           
   147                           ;main.c: 16:     LATD0 |= 1;
   148  001018  808C               	bsf	3980,0,c	;volatile
   149                           
   150                           ;main.c: 18:     GIE = 1;
   151  00101A  8EF2               	bsf	4082,7,c	;volatile
   152                           
   153                           ;main.c: 19:     TMR0IE = 1;
   154  00101C  8AF2               	bsf	4082,5,c	;volatile
   155  00101E                     
   156                           ;main.c: 20:     T0CON = 0XC3;
   157  00101E  0EC3               	movlw	195
   158  001020  6ED5               	movwf	213,c	;volatile
   159                           
   160                           ;main.c: 21:     TMR0 = 0X64;
   161  001022  0E00               	movlw	0
   162  001024  6ED7               	movwf	215,c	;volatile
   163  001026  0E64               	movlw	100
   164  001028  6ED6               	movwf	214,c	;volatile
   165  00102A                     l739:
   166                           
   167                           ;main.c: 24:     {;main.c: 25:         if(PORTBbits.RB4 && value == 5){
   168  00102A  A881               	btfss	129,4,c	;volatile
   169  00102C  EF1A  F008         	goto	u21
   170  001030  EF1C  F008         	goto	u20
   171  001034                     u21:
   172  001034  EF2C  F008         	goto	l40
   173  001038                     u20:
   174  001038  0E05               	movlw	5
   175  00103A  1801               	xorwf	_value^0,w,c
   176  00103C  1002               	iorwf	(_value+1)^0,w,c
   177  00103E  A4D8               	btfss	status,2,c
   178  001040  EF24  F008         	goto	u31
   179  001044  EF26  F008         	goto	u30
   180  001048                     u31:
   181  001048  EF2C  F008         	goto	l40
   182  00104C                     u30:
   183  00104C                     
   184                           ;main.c: 26:             value = 0;
   185  00104C  0E00               	movlw	0
   186  00104E  6E02               	movwf	(_value+1)^0,c
   187  001050  0E00               	movlw	0
   188  001052  6E01               	movwf	_value^0,c
   189                           
   190                           ;main.c: 27:         }
   191  001054  EF15  F008         	goto	l739
   192  001058                     l40:
   193  001058  A881               	btfss	129,4,c	;volatile
   194  00105A  EF31  F008         	goto	u41
   195  00105E  EF33  F008         	goto	u40
   196  001062                     u41:
   197  001062  EF15  F008         	goto	l739
   198  001066                     u40:
   199  001066  5001               	movf	_value^0,w,c
   200  001068  1002               	iorwf	(_value+1)^0,w,c
   201  00106A  A4D8               	btfss	status,2,c
   202  00106C  EF3A  F008         	goto	u51
   203  001070  EF3C  F008         	goto	u50
   204  001074                     u51:
   205  001074  EF15  F008         	goto	l739
   206  001078                     u50:
   207  001078                     
   208                           ;main.c: 29:             value = 5;
   209  001078  0E00               	movlw	0
   210  00107A  6E02               	movwf	(_value+1)^0,c
   211  00107C  0E05               	movlw	5
   212  00107E  6E01               	movwf	_value^0,c
   213  001080  EF15  F008         	goto	l739
   214  001084  EF07  F008         	goto	start
   215  001088                     __end_of_main:
   216                           	opt callstack 0
   217                           
   218 ;; *************** function _ISR *****************
   219 ;; Defined at:
   220 ;;		line 34 in file "main.c"
   221 ;; Parameters:    Size  Location     Type
   222 ;;		None
   223 ;; Auto vars:     Size  Location     Type
   224 ;;		None
   225 ;; Return value:  Size  Location     Type
   226 ;;                  1    wreg      void 
   227 ;; Registers used:
   228 ;;		wreg, status,2, status,0
   229 ;; Tracked objects:
   230 ;;		On entry : 0/0
   231 ;;		On exit  : 0/0
   232 ;;		Unchanged: 0/0
   233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   234 ;;      Params:         0       0       0       0       0       0       0       0       0
   235 ;;      Locals:         0       0       0       0       0       0       0       0       0
   236 ;;      Temps:          0       0       0       0       0       0       0       0       0
   237 ;;      Totals:         0       0       0       0       0       0       0       0       0
   238 ;;Total ram usage:        0 bytes
   239 ;; Hardware stack levels used:    1
   240 ;; This function calls:
   241 ;;		Nothing
   242 ;; This function is called by:
   243 ;;		Interrupt level 2
   244 ;; This function uses a non-reentrant model
   245 ;;
   246                           
   247                           	psect	intcode
   248  001008                     __pintcode:
   249                           	opt callstack 0
   250  001008                     _ISR:
   251                           	opt callstack 30
   252                           
   253                           ;incstack = 0
   254  001008  8205               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
   255  00100A  ED44  F008         	call	int_func,f	;refresh shadow registers
   256                           
   257                           	psect	intcode_body
   258  001088                     __pintcode_body:
   259                           	opt callstack 30
   260  001088                     int_func:
   261                           	opt callstack 30
   262  001088  0006               	pop		; remove dummy address from shadow register refresh
   263  00108A                     
   264                           ;main.c: 36:     if(T0IF)
   265  00108A  A4F2               	btfss	4082,2,c	;volatile
   266  00108C  EF4A  F008         	goto	i2u6_41
   267  001090  EF4C  F008         	goto	i2u6_40
   268  001094                     i2u6_41:
   269  001094  EF70  F008         	goto	i2l53
   270  001098                     i2u6_40:
   271  001098                     
   272                           ;main.c: 37:     {;main.c: 38:         TMR0IF = 0;
   273  001098  94F2               	bcf	4082,2,c	;volatile
   274  00109A                     
   275                           ;main.c: 39:         count++;
   276  00109A  4A03               	infsnz	_count^0,f,c
   277  00109C  2A04               	incf	(_count+1)^0,f,c
   278  00109E                     
   279                           ;main.c: 41:         if(count==40)
   280  00109E  0E28               	movlw	40
   281  0010A0  1803               	xorwf	_count^0,w,c
   282  0010A2  1004               	iorwf	(_count+1)^0,w,c
   283  0010A4  A4D8               	btfss	status,2,c
   284  0010A6  EF57  F008         	goto	i2u7_41
   285  0010AA  EF59  F008         	goto	i2u7_40
   286  0010AE                     i2u7_41:
   287  0010AE  EF5E  F008         	goto	i2l761
   288  0010B2                     i2u7_40:
   289  0010B2                     
   290                           ;main.c: 42:         {;main.c: 43:             count = 0;
   291  0010B2  0E00               	movlw	0
   292  0010B4  6E04               	movwf	(_count+1)^0,c
   293  0010B6  0E00               	movlw	0
   294  0010B8  6E03               	movwf	_count^0,c
   295  0010BA                     
   296                           ;main.c: 44:             LATBbits.LB2 = 1;
   297  0010BA  848A               	bsf	138,2,c	;volatile
   298  0010BC                     i2l761:
   299                           
   300                           ;main.c: 46:         if(count==value)
   301  0010BC  5001               	movf	_value^0,w,c
   302  0010BE  1803               	xorwf	_count^0,w,c
   303  0010C0  E107               	bnz	i2u8_41
   304  0010C2  5002               	movf	(_value+1)^0,w,c
   305  0010C4  1804               	xorwf	(_count+1)^0,w,c
   306  0010C6  A4D8               	btfss	status,2,c
   307  0010C8  EF68  F008         	goto	i2u8_41
   308  0010CC  EF6A  F008         	goto	i2u8_40
   309  0010D0                     i2u8_41:
   310  0010D0  EF6B  F008         	goto	i2l765
   311  0010D4                     i2u8_40:
   312  0010D4                     
   313                           ;main.c: 47:         {;main.c: 48:             LATBbits.LB2 = 0;
   314  0010D4  948A               	bcf	138,2,c	;volatile
   315  0010D6                     i2l765:
   316                           
   317                           ;main.c: 50:     TMR0=0x64;
   318  0010D6  0E00               	movlw	0
   319  0010D8  6ED7               	movwf	215,c	;volatile
   320  0010DA  0E64               	movlw	100
   321  0010DC  6ED6               	movwf	214,c	;volatile
   322  0010DE                     
   323                           ;main.c: 51:     T0IF = 0;
   324  0010DE  94F2               	bcf	4082,2,c	;volatile
   325  0010E0                     i2l53:
   326  0010E0  9205               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   327  0010E2  0011               	retfie		f
   328  0010E4                     __end_of_ISR:
   329                           	opt callstack 0
   330  0000                     
   331                           	psect	rparam
   332  0000                     
   333                           	psect	temp
   334  000005                     btemp:
   335                           	opt callstack 0
   336  000005                     	ds	1
   337  0000                     int$flags	set	btemp
   338  0000                     wtemp8	set	btemp+1
   339  0000                     ttemp5	set	btemp+1
   340  0000                     ttemp6	set	btemp+4
   341  0000                     ttemp7	set	btemp+8
   342                           tosu	equ	0xFFF
   343                           tosh	equ	0xFFE
   344                           tosl	equ	0xFFD
   345                           stkptr	equ	0xFFC
   346                           pclatu	equ	0xFFB
   347                           pclath	equ	0xFFA
   348                           pcl	equ	0xFF9
   349                           tblptru	equ	0xFF8
   350                           tblptrh	equ	0xFF7
   351                           tblptrl	equ	0xFF6
   352                           tablat	equ	0xFF5
   353                           prodh	equ	0xFF4
   354                           prodl	equ	0xFF3
   355                           indf0	equ	0xFEF
   356                           postinc0	equ	0xFEE
   357                           postdec0	equ	0xFED
   358                           preinc0	equ	0xFEC
   359                           plusw0	equ	0xFEB
   360                           fsr0h	equ	0xFEA
   361                           fsr0l	equ	0xFE9
   362                           wreg	equ	0xFE8
   363                           indf1	equ	0xFE7
   364                           postinc1	equ	0xFE6
   365                           postdec1	equ	0xFE5
   366                           preinc1	equ	0xFE4
   367                           plusw1	equ	0xFE3
   368                           fsr1h	equ	0xFE2
   369                           fsr1l	equ	0xFE1
   370                           bsr	equ	0xFE0
   371                           indf2	equ	0xFDF
   372                           postinc2	equ	0xFDE
   373                           postdec2	equ	0xFDD
   374                           preinc2	equ	0xFDC
   375                           plusw2	equ	0xFDB
   376                           fsr2h	equ	0xFDA
   377                           fsr2l	equ	0xFD9
   378                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         4
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94      0       4
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 0
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (1) _ISR                                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E      0       4       1        4.3%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0       4      20        0.0%
DATA                 0      0       4       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Thu Mar 19 19:58:10 2020

                     l40 1058                       u20 1038                       u21 1034  
                     u30 104C                       u31 1048                       u40 1066  
                     u41 1062                       u50 1078                       u51 1074  
            __CFG_BOR$ON 000000              __CFG_BORV$3 000000             __CFG_CP0$OFF 000000  
           __CFG_CP1$OFF 000000                      l741 1038                      l743 104C  
                    l735 1012                      l745 1066                      l737 101E  
                    l747 1078                      l739 102A                      _GIE 007F97  
           __CFG_CPB$OFF 000000                      _ISR 1008             __CFG_LVP$OFF 000000  
                   ?_ISR 0000             __CFG_WDT$OFF 000000                     _T0IF 007F92  
                   i2l53 10E0                     _TMR0 000FD6                     _main 1012  
                   btemp 0005                     start 100E            __CFG_IESO$OFF 000000  
          __CFG_MCLRE$ON 000000             ___param_bank 000000                    ??_ISR 0000  
          __CFG_PLLDIV$5 000000                    ?_main 0000                    _T0CON 000FD5  
                  _LATD0 007C60                    i2l751 1098                    i2l761 10BC  
                  i2l753 109A                    i2l763 10D4                    i2l755 109E  
                  i2l765 10D6                    i2l757 10B2                    i2l749 108A  
                  i2l767 10DE                    i2l759 10BA            __CFG_USBDIV$2 000000  
          __CFG_PWRT$OFF 000000            __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000  
         __CFG_EBTR0$OFF 000000           __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000  
          __CFG_WRTB$OFF 000000            __CFG_WRTC$OFF 000000           __CFG_EBTRB$OFF 000000  
                  _count 0003                    _value 0001                    ttemp5 0006  
                  ttemp6 0009                    ttemp7 000D                    status 000FD8  
                  wtemp8 0006          __initialization 10E4             __end_of_main 1088  
                 ??_main 0000            __activetblptr 000000                   _TMR0IE 007F95  
                 _TMR0IF 007F92                   i2u6_40 1098                   i2u6_41 1094  
                 i2u7_40 10B2                   i2u7_41 10AE                   i2u8_40 10D4  
                 i2u8_41 10D0           __CFG_VREGEN$ON 000000           __CFG_XINST$OFF 000000  
         __CFG_STVREN$ON 000000               __accesstop 0060  __end_of__initialization 10EC  
        __CFG_PBADEN$OFF 000000            ___rparam_used 000001           __pcstackCOMRAM 0000  
                __Hparam 0000                  __Lparam 0000                  __pcinit 10E4  
                __ramtop 0800                  __ptext0 1012             __size_of_ISR 00DC  
         __pintcode_body 1088     end_of_initialization 10EC                  int_func 1088  
              _PORTBbits 000F81                _TRISBbits 000F93                _TRISDbits 000F95  
    start_initialization 10E4              __end_of_ISR 10E4         __CFG_LPT1OSC$OFF 000000  
            __pbssCOMRAM 0001                __pintcode 1008                 _LATBbits 000F8A  
       __CFG_WDTPS$32768 000000                 __Hrparam 0000                 __Lrparam 0000  
          __size_of_main 0076                 int$flags 0005    __CFG_CPUDIV$OSC1_PLL2 000000  
               intlevel2 0000       __CFG_FOSC$HSPLL_HS 000000  
