

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Thu Mar 19 01:05:17 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    10                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    11                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    12                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    14  0000                     
    15                           ; Version 2.10
    16                           ; Generated 31/07/2019 GMT
    17                           ; 
    18                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    19                           ; All rights reserved.
    20                           ; 
    21                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    22                           ; 
    23                           ; Redistribution and use in source and binary forms, with or without modification, are
    24                           ; permitted provided that the following conditions are met:
    25                           ; 
    26                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    27                           ;        conditions and the following disclaimer.
    28                           ; 
    29                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    30                           ;        of conditions and the following disclaimer in the documentation and/or other
    31                           ;        materials provided with the distribution.
    32                           ; 
    33                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    34                           ;        software without specific prior written permission.
    35                           ; 
    36                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    37                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    38                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    39                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    40                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    41                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    42                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    43                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    44                           ; 
    45                           ; 
    46                           ; Code-generator required, PIC18F4550 Definitions
    47                           ; 
    48                           ; SFR Addresses
    49  0000                     _TMR0	set	4054
    50  0000                     _LATBbits	set	3978
    51  0000                     _PORTBbits	set	3969
    52  0000                     _T0CON	set	4053
    53  0000                     _TRISBbits	set	3987
    54  0000                     _TMR0IF	set	32658
    55  0000                     _T0IF	set	32658
    56  0000                     _TMR0IE	set	32661
    57  0000                     _GIE	set	32663
    58                           
    59                           ; #config settings
    60  0000                     
    61                           	psect	cinit
    62  0000E2                     __pcinit:
    63                           	opt callstack 0
    64  0000E2                     start_initialization:
    65                           	opt callstack 0
    66  0000E2                     __initialization:
    67                           	opt callstack 0
    68                           
    69                           ; Clear objects allocated to COMRAM (4 bytes)
    70  0000E2  6A04               	clrf	(__pbssCOMRAM+3)& (0+255),c
    71  0000E4  6A03               	clrf	(__pbssCOMRAM+2)& (0+255),c
    72  0000E6  6A02               	clrf	(__pbssCOMRAM+1)& (0+255),c
    73  0000E8  6A01               	clrf	__pbssCOMRAM& (0+255),c
    74  0000EA                     end_of_initialization:
    75                           	opt callstack 0
    76  0000EA                     __end_of__initialization:
    77                           	opt callstack 0
    78  0000EA  9005               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
    79  0000EC  9205               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
    80  0000EE  0100               	movlb	0
    81  0000F0  EF09  F000         	goto	_main	;jump to C main() function
    82                           
    83                           	psect	bssCOMRAM
    84  000001                     __pbssCOMRAM:
    85                           	opt callstack 0
    86  000001                     _value:
    87                           	opt callstack 0
    88  000001                     	ds	2
    89  000003                     _count:
    90                           	opt callstack 0
    91  000003                     	ds	2
    92                           
    93                           	psect	cstackCOMRAM
    94  000000                     __pcstackCOMRAM:
    95                           	opt callstack 0
    96  000000                     
    97                           ; 1 bytes @ 0x0
    98 ;;
    99 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   100 ;;
   101 ;; *************** function _main *****************
   102 ;; Defined at:
   103 ;;		line 11 in file "main.c"
   104 ;; Parameters:    Size  Location     Type
   105 ;;		None
   106 ;; Auto vars:     Size  Location     Type
   107 ;;		None
   108 ;; Return value:  Size  Location     Type
   109 ;;                  1    wreg      void 
   110 ;; Registers used:
   111 ;;		wreg, status,2, status,0
   112 ;; Tracked objects:
   113 ;;		On entry : 0/0
   114 ;;		On exit  : 0/0
   115 ;;		Unchanged: 0/0
   116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   117 ;;      Params:         0       0       0       0       0       0       0       0       0
   118 ;;      Locals:         0       0       0       0       0       0       0       0       0
   119 ;;      Temps:          0       0       0       0       0       0       0       0       0
   120 ;;      Totals:         0       0       0       0       0       0       0       0       0
   121 ;;Total ram usage:        0 bytes
   122 ;; Hardware stack levels required when called:    1
   123 ;; This function calls:
   124 ;;		Nothing
   125 ;; This function is called by:
   126 ;;		Startup code after reset
   127 ;; This function uses a non-reentrant model
   128 ;;
   129                           
   130                           	psect	text0
   131  000012                     __ptext0:
   132                           	opt callstack 0
   133  000012                     _main:
   134                           	opt callstack 30
   135  000012                     
   136                           ;main.c: 13:     TRISBbits.RB0 = 1;
   137  000012  8093               	bsf	147,0,c	;volatile
   138                           
   139                           ;main.c: 14:     TRISBbits.RB1 = 1;
   140  000014  8293               	bsf	147,1,c	;volatile
   141                           
   142                           ;main.c: 15:     TRISBbits.RB2 = 0;
   143  000016  9493               	bcf	147,2,c	;volatile
   144                           
   145                           ;main.c: 16:     GIE = 1;
   146  000018  8EF2               	bsf	4082,7,c	;volatile
   147                           
   148                           ;main.c: 17:     TMR0IE = 1;
   149  00001A  8AF2               	bsf	4082,5,c	;volatile
   150  00001C                     
   151                           ;main.c: 18:     T0CON = 0XC3;
   152  00001C  0EC3               	movlw	195
   153  00001E  6ED5               	movwf	213,c	;volatile
   154                           
   155                           ;main.c: 19:     TMR0 = 0X64;
   156  000020  0E00               	movlw	0
   157  000022  6ED7               	movwf	215,c	;volatile
   158  000024  0E64               	movlw	100
   159  000026  6ED6               	movwf	214,c	;volatile
   160  000028                     l735:
   161                           
   162                           ;main.c: 22:     {;main.c: 23:         if(PORTBbits.RB0 && value != 5){
   163  000028  A081               	btfss	129,0,c	;volatile
   164  00002A  EF19  F000         	goto	u21
   165  00002E  EF1B  F000         	goto	u20
   166  000032                     u21:
   167  000032  EF2B  F000         	goto	l36
   168  000036                     u20:
   169  000036  0E05               	movlw	5
   170  000038  1801               	xorwf	_value^0,w,c
   171  00003A  1002               	iorwf	(_value+1)^0,w,c
   172  00003C  B4D8               	btfsc	status,2,c
   173  00003E  EF23  F000         	goto	u31
   174  000042  EF25  F000         	goto	u30
   175  000046                     u31:
   176  000046  EF2B  F000         	goto	l36
   177  00004A                     u30:
   178  00004A                     
   179                           ;main.c: 24:             value = 5;
   180  00004A  0E00               	movlw	0
   181  00004C  6E02               	movwf	(_value+1)^0,c
   182  00004E  0E05               	movlw	5
   183  000050  6E01               	movwf	_value^0,c
   184                           
   185                           ;main.c: 25:         }
   186  000052  EF14  F000         	goto	l735
   187  000056                     l36:
   188  000056  A281               	btfss	129,1,c	;volatile
   189  000058  EF30  F000         	goto	u41
   190  00005C  EF32  F000         	goto	u40
   191  000060                     u41:
   192  000060  EF14  F000         	goto	l735
   193  000064                     u40:
   194  000064  5001               	movf	_value^0,w,c
   195  000066  1002               	iorwf	(_value+1)^0,w,c
   196  000068  B4D8               	btfsc	status,2,c
   197  00006A  EF39  F000         	goto	u51
   198  00006E  EF3B  F000         	goto	u50
   199  000072                     u51:
   200  000072  EF14  F000         	goto	l735
   201  000076                     u50:
   202  000076                     
   203                           ;main.c: 27:             value = 0;
   204  000076  0E00               	movlw	0
   205  000078  6E02               	movwf	(_value+1)^0,c
   206  00007A  0E00               	movlw	0
   207  00007C  6E01               	movwf	_value^0,c
   208  00007E  EF14  F000         	goto	l735
   209  000082  EF07  F000         	goto	start
   210  000086                     __end_of_main:
   211                           	opt callstack 0
   212                           
   213 ;; *************** function _ISR *****************
   214 ;; Defined at:
   215 ;;		line 32 in file "main.c"
   216 ;; Parameters:    Size  Location     Type
   217 ;;		None
   218 ;; Auto vars:     Size  Location     Type
   219 ;;		None
   220 ;; Return value:  Size  Location     Type
   221 ;;                  1    wreg      void 
   222 ;; Registers used:
   223 ;;		wreg, status,2, status,0
   224 ;; Tracked objects:
   225 ;;		On entry : 0/0
   226 ;;		On exit  : 0/0
   227 ;;		Unchanged: 0/0
   228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   229 ;;      Params:         0       0       0       0       0       0       0       0       0
   230 ;;      Locals:         0       0       0       0       0       0       0       0       0
   231 ;;      Temps:          0       0       0       0       0       0       0       0       0
   232 ;;      Totals:         0       0       0       0       0       0       0       0       0
   233 ;;Total ram usage:        0 bytes
   234 ;; Hardware stack levels used:    1
   235 ;; This function calls:
   236 ;;		Nothing
   237 ;; This function is called by:
   238 ;;		Interrupt level 2
   239 ;; This function uses a non-reentrant model
   240 ;;
   241                           
   242                           	psect	intcode
   243  000008                     __pintcode:
   244                           	opt callstack 0
   245  000008                     _ISR:
   246                           	opt callstack 30
   247                           
   248                           ;incstack = 0
   249  000008  8205               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
   250  00000A  ED43  F000         	call	int_func,f	;refresh shadow registers
   251                           
   252                           	psect	intcode_body
   253  000086                     __pintcode_body:
   254                           	opt callstack 30
   255  000086                     int_func:
   256                           	opt callstack 30
   257  000086  0006               	pop		; remove dummy address from shadow register refresh
   258  000088                     
   259                           ;main.c: 34:     if(T0IF)
   260  000088  A4F2               	btfss	4082,2,c	;volatile
   261  00008A  EF49  F000         	goto	i2u6_41
   262  00008E  EF4B  F000         	goto	i2u6_40
   263  000092                     i2u6_41:
   264  000092  EF6F  F000         	goto	i2l49
   265  000096                     i2u6_40:
   266  000096                     
   267                           ;main.c: 35:     {;main.c: 36:         TMR0IF = 0;
   268  000096  94F2               	bcf	4082,2,c	;volatile
   269  000098                     
   270                           ;main.c: 37:         count++;
   271  000098  4A03               	infsnz	_count^0,f,c
   272  00009A  2A04               	incf	(_count+1)^0,f,c
   273  00009C                     
   274                           ;main.c: 39:         if(count==40)
   275  00009C  0E28               	movlw	40
   276  00009E  1803               	xorwf	_count^0,w,c
   277  0000A0  1004               	iorwf	(_count+1)^0,w,c
   278  0000A2  A4D8               	btfss	status,2,c
   279  0000A4  EF56  F000         	goto	i2u7_41
   280  0000A8  EF58  F000         	goto	i2u7_40
   281  0000AC                     i2u7_41:
   282  0000AC  EF5D  F000         	goto	i2l757
   283  0000B0                     i2u7_40:
   284  0000B0                     
   285                           ;main.c: 40:         {;main.c: 41:             count = 0;
   286  0000B0  0E00               	movlw	0
   287  0000B2  6E04               	movwf	(_count+1)^0,c
   288  0000B4  0E00               	movlw	0
   289  0000B6  6E03               	movwf	_count^0,c
   290  0000B8                     
   291                           ;main.c: 42:             LATBbits.LB2 = 1;
   292  0000B8  848A               	bsf	138,2,c	;volatile
   293  0000BA                     i2l757:
   294                           
   295                           ;main.c: 44:         if(count==value)
   296  0000BA  5001               	movf	_value^0,w,c
   297  0000BC  1803               	xorwf	_count^0,w,c
   298  0000BE  E107               	bnz	i2u8_41
   299  0000C0  5002               	movf	(_value+1)^0,w,c
   300  0000C2  1804               	xorwf	(_count+1)^0,w,c
   301  0000C4  A4D8               	btfss	status,2,c
   302  0000C6  EF67  F000         	goto	i2u8_41
   303  0000CA  EF69  F000         	goto	i2u8_40
   304  0000CE                     i2u8_41:
   305  0000CE  EF6A  F000         	goto	i2l761
   306  0000D2                     i2u8_40:
   307  0000D2                     
   308                           ;main.c: 45:         {;main.c: 46:             LATBbits.LB2 = 0;
   309  0000D2  948A               	bcf	138,2,c	;volatile
   310  0000D4                     i2l761:
   311                           
   312                           ;main.c: 48:     TMR0=0x64;
   313  0000D4  0E00               	movlw	0
   314  0000D6  6ED7               	movwf	215,c	;volatile
   315  0000D8  0E64               	movlw	100
   316  0000DA  6ED6               	movwf	214,c	;volatile
   317  0000DC                     
   318                           ;main.c: 49:     T0IF = 0;
   319  0000DC  94F2               	bcf	4082,2,c	;volatile
   320  0000DE                     i2l49:
   321  0000DE  9205               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   322  0000E0  0011               	retfie		f
   323  0000E2                     __end_of_ISR:
   324                           	opt callstack 0
   325  0000                     
   326                           	psect	rparam
   327  0000                     
   328                           	psect	temp
   329  000005                     btemp:
   330                           	opt callstack 0
   331  000005                     	ds	1
   332  0000                     int$flags	set	btemp
   333  0000                     wtemp8	set	btemp+1
   334  0000                     ttemp5	set	btemp+1
   335  0000                     ttemp6	set	btemp+4
   336  0000                     ttemp7	set	btemp+8
   337                           tosu	equ	0xFFF
   338                           tosh	equ	0xFFE
   339                           tosl	equ	0xFFD
   340                           stkptr	equ	0xFFC
   341                           pclatu	equ	0xFFB
   342                           pclath	equ	0xFFA
   343                           pcl	equ	0xFF9
   344                           tblptru	equ	0xFF8
   345                           tblptrh	equ	0xFF7
   346                           tblptrl	equ	0xFF6
   347                           tablat	equ	0xFF5
   348                           prodh	equ	0xFF4
   349                           prodl	equ	0xFF3
   350                           indf0	equ	0xFEF
   351                           postinc0	equ	0xFEE
   352                           postdec0	equ	0xFED
   353                           preinc0	equ	0xFEC
   354                           plusw0	equ	0xFEB
   355                           fsr0h	equ	0xFEA
   356                           fsr0l	equ	0xFE9
   357                           wreg	equ	0xFE8
   358                           indf1	equ	0xFE7
   359                           postinc1	equ	0xFE6
   360                           postdec1	equ	0xFE5
   361                           preinc1	equ	0xFE4
   362                           plusw1	equ	0xFE3
   363                           fsr1h	equ	0xFE2
   364                           fsr1l	equ	0xFE1
   365                           bsr	equ	0xFE0
   366                           indf2	equ	0xFDF
   367                           postinc2	equ	0xFDE
   368                           postdec2	equ	0xFDD
   369                           preinc2	equ	0xFDC
   370                           plusw2	equ	0xFDB
   371                           fsr2h	equ	0xFDA
   372                           fsr2l	equ	0xFD9
   373                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         4
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94      0       4
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 0
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (1) _ISR                                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E      0       4       1        4.3%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0       4      20        0.0%
DATA                 0      0       4       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Thu Mar 19 01:05:17 2020

                     l36 0056                       u20 0036                       u21 0032  
                     u30 004A                       u31 0046                       u40 0064  
                     u41 0060                       u50 0076                       u51 0072  
            __CFG_BOR$ON 000000              __CFG_BORV$3 000000             __CFG_CP0$OFF 000000  
           __CFG_CP1$OFF 000000                      l731 0012                      l741 0064  
                    l733 001C                      l743 0076                      l735 0028  
                    l737 0036                      l739 004A                      _GIE 007F97  
           __CFG_CPB$OFF 000000                      _ISR 0008             __CFG_LVP$OFF 000000  
                   ?_ISR 0000             __CFG_WDT$OFF 000000                     _T0IF 007F92  
                   i2l49 00DE                     _TMR0 000FD6                     _main 0012  
                   btemp 0005                     start 000E            __CFG_IESO$OFF 000000  
          __CFG_MCLRE$ON 000000             ___param_bank 000000                    ??_ISR 0000  
          __CFG_PLLDIV$5 000000                    ?_main 0000                    _T0CON 000FD5  
                  i2l751 009C                    i2l761 00D4                    i2l753 00B0  
                  i2l745 0088                    i2l763 00DC                    i2l755 00B8  
                  i2l747 0096                    i2l757 00BA                    i2l749 0098  
                  i2l759 00D2            __CFG_USBDIV$2 000000            __CFG_PWRT$OFF 000000  
          __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000           __CFG_EBTR0$OFF 000000  
         __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000            __CFG_WRTB$OFF 000000  
          __CFG_WRTC$OFF 000000           __CFG_EBTRB$OFF 000000                    _count 0003  
                  _value 0001                    ttemp5 0006                    ttemp6 0009  
                  ttemp7 000D                    status 000FD8                    wtemp8 0006  
        __initialization 00E2             __end_of_main 0086                   ??_main 0000  
          __activetblptr 000000                   _TMR0IE 007F95                   _TMR0IF 007F92  
                 i2u6_40 0096                   i2u6_41 0092                   i2u7_40 00B0  
                 i2u7_41 00AC                   i2u8_40 00D2                   i2u8_41 00CE  
         __CFG_VREGEN$ON 000000           __CFG_XINST$OFF 000000           __CFG_STVREN$ON 000000  
             __accesstop 0060  __end_of__initialization 00EA          __CFG_PBADEN$OFF 000000  
          ___rparam_used 000001           __pcstackCOMRAM 0000                  __Hparam 0000  
                __Lparam 0000                  __pcinit 00E2                  __ramtop 0800  
                __ptext0 0012             __size_of_ISR 00DA           __pintcode_body 0086  
   end_of_initialization 00EA                  int_func 0086                _PORTBbits 000F81  
              _TRISBbits 000F93      start_initialization 00E2              __end_of_ISR 00E2  
       __CFG_LPT1OSC$OFF 000000              __pbssCOMRAM 0001                __pintcode 0008  
               _LATBbits 000F8A         __CFG_WDTPS$32768 000000                 __Hrparam 0000  
               __Lrparam 0000            __size_of_main 0074                 int$flags 0005  
  __CFG_CPUDIV$OSC1_PLL2 000000                 intlevel2 0000       __CFG_FOSC$HSPLL_HS 000000  
