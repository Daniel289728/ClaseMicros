

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Mon May 18 16:03:41 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=2
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text21,global,reloc=2,class=CODE,delta=1
    32                           	psect	text22,global,reloc=2,class=CODE,delta=1
    33                           	psect	text23,global,reloc=2,class=CODE,delta=1
    34                           	psect	text24,global,reloc=2,class=CODE,delta=1
    35                           	psect	text25,global,reloc=2,class=CODE,delta=1
    36                           	psect	text26,global,reloc=2,class=CODE,delta=1
    37                           	psect	text27,global,reloc=2,class=CODE,delta=1
    38                           	psect	text28,global,reloc=2,class=CODE,delta=1
    39                           	psect	text29,global,reloc=2,class=CODE,delta=1
    40                           	psect	text30,global,reloc=2,class=CODE,delta=1
    41                           	psect	text31,global,reloc=2,class=CODE,delta=1
    42                           	psect	text32,global,reloc=2,class=CODE,delta=1
    43                           	psect	text33,global,reloc=2,class=CODE,delta=1
    44                           	psect	text34,global,reloc=2,class=CODE,delta=1,group=1
    45                           	psect	text35,global,reloc=2,class=CODE,delta=1,group=1
    46                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=1
    47                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    48                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    49  0000                     
    50                           ; Version 2.10
    51                           ; Generated 31/07/2019 GMT
    52                           ; 
    53                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    54                           ; All rights reserved.
    55                           ; 
    56                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    57                           ; 
    58                           ; Redistribution and use in source and binary forms, with or without modification, are
    59                           ; permitted provided that the following conditions are met:
    60                           ; 
    61                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    62                           ;        conditions and the following disclaimer.
    63                           ; 
    64                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    65                           ;        of conditions and the following disclaimer in the documentation and/or other
    66                           ;        materials provided with the distribution.
    67                           ; 
    68                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    69                           ;        software without specific prior written permission.
    70                           ; 
    71                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    72                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    73                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    74                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    75                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    76                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    77                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    78                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    79                           ; 
    80                           ; 
    81                           ; Code-generator required, PIC18F4550 Definitions
    82                           ; 
    83                           ; SFR Addresses
    84  0000                     
    85                           	psect	smallconst
    86  001004                     __psmallconst:
    87                           	opt callstack 0
    88  001004  00                 	db	0
    89  001005                     __powers_:
    90                           	opt callstack 0
    91  001005  00                 	db	0
    92  001006  80                 	db	128
    93  001007  3F                 	db	63
    94  001008  00                 	db	0
    95  001009  20                 	db	32
    96  00100A  41                 	db	65
    97  00100B  00                 	db	0
    98  00100C  C8                 	db	200
    99  00100D  42                 	db	66
   100  00100E  00                 	db	0
   101  00100F  7A                 	db	122
   102  001010  44                 	db	68
   103  001011  40                 	db	64
   104  001012  1C                 	db	28
   105  001013  46                 	db	70
   106  001014  50                 	db	80
   107  001015  C3                 	db	195
   108  001016  47                 	db	71
   109  001017  24                 	db	36
   110  001018  74                 	db	116
   111  001019  49                 	db	73
   112  00101A  97                 	db	151
   113  00101B  18                 	db	24
   114  00101C  4B                 	db	75
   115  00101D  BC                 	db	188
   116  00101E  BE                 	db	190
   117  00101F  4C                 	db	76
   118  001020  6B                 	db	107
   119  001021  6E                 	db	110
   120  001022  4E                 	db	78
   121  001023  03                 	db	3
   122  001024  15                 	db	21
   123  001025  50                 	db	80
   124  001026  79                 	db	121
   125  001027  AD                 	db	173
   126  001028  60                 	db	96
   127  001029  F3                 	db	243
   128  00102A  49                 	db	73
   129  00102B  71                 	db	113
   130  00102C                     __end_of__powers_:
   131                           	opt callstack 0
   132  00102C                     __npowers_:
   133                           	opt callstack 0
   134  00102C  00                 	db	0
   135  00102D  80                 	db	128
   136  00102E  3F                 	db	63
   137  00102F  CD                 	db	205
   138  001030  CC                 	db	204
   139  001031  3D                 	db	61
   140  001032  D7                 	db	215
   141  001033  23                 	db	35
   142  001034  3C                 	db	60
   143  001035  12                 	db	18
   144  001036  83                 	db	131
   145  001037  3A                 	db	58
   146  001038  B7                 	db	183
   147  001039  D1                 	db	209
   148  00103A  38                 	db	56
   149  00103B  C6                 	db	198
   150  00103C  27                 	db	39
   151  00103D  37                 	db	55
   152  00103E  38                 	db	56
   153  00103F  86                 	db	134
   154  001040  35                 	db	53
   155  001041  C0                 	db	192
   156  001042  D6                 	db	214
   157  001043  33                 	db	51
   158  001044  CC                 	db	204
   159  001045  2B                 	db	43
   160  001046  32                 	db	50
   161  001047  70                 	db	112
   162  001048  89                 	db	137
   163  001049  30                 	db	48
   164  00104A  E7                 	db	231
   165  00104B  DB                 	db	219
   166  00104C  2E                 	db	46
   167  00104D  E5                 	db	229
   168  00104E  3C                 	db	60
   169  00104F  1E                 	db	30
   170  001050  42                 	db	66
   171  001051  A2                 	db	162
   172  001052  0D                 	db	13
   173  001053                     __end_of__npowers_:
   174                           	opt callstack 0
   175  001053                     _dpowers:
   176                           	opt callstack 0
   177  001053  0001               	dw	1
   178  001055  0000               	dw	0
   179  001057  000A               	dw	10
   180  001059  0000               	dw	0
   181  00105B  0064               	dw	100
   182  00105D  0000               	dw	0
   183  00105F  03E8               	dw	1000
   184  001061  0000               	dw	0
   185  001063  2710               	dw	10000
   186  001065  0000               	dw	0
   187  001067  86A0               	dw	34464
   188  001069  0001               	dw	1
   189  00106B  4240               	dw	16960
   190  00106D  000F               	dw	15
   191  00106F  9680               	dw	38528
   192  001071  0098               	dw	152
   193  001073  E100               	dw	57600
   194  001075  05F5               	dw	1525
   195  001077  CA00               	dw	51712
   196  001079  3B9A               	dw	15258
   197  00107B                     __end_of_dpowers:
   198                           	opt callstack 0
   199  0000                     _ADRESL	set	4035
   200  0000                     _ADRESH	set	4036
   201  0000                     _ADCON0bits	set	4034
   202  0000                     _ADCON2	set	4032
   203  0000                     _ADCON1	set	4033
   204  0000                     _ADCON0	set	4034
   205  0000                     _TRISEbits	set	3990
   206  0000                     _TRISD	set	3989
   207  0000                     _PORTD	set	3971
   208  0000                     _LATEbits	set	3981
   209  00107B                     STR_1:
   210  00107B  20                 	db	32
   211  00107C  20                 	db	32
   212  00107D  20                 	db	32
   213  00107E  20                 	db	32
   214  00107F  44                 	db	68	;'D'
   215  001080  69                 	db	105	;'i'
   216  001081  73                 	db	115	;'s'
   217  001082  74                 	db	116	;'t'
   218  001083  61                 	db	97	;'a'
   219  001084  6E                 	db	110	;'n'
   220  001085  63                 	db	99	;'c'
   221  001086  69                 	db	105	;'i'
   222  001087  61                 	db	97	;'a'
   223  001088  3A                 	db	58	;':'
   224  001089  00                 	db	0
   225  00108A                     STR_2:
   226  00108A  25                 	db	37
   227  00108B  2E                 	db	46
   228  00108C  33                 	db	51	;'3'
   229  00108D  66                 	db	102	;'f'
   230  00108E  20                 	db	32
   231  00108F  63                 	db	99	;'c'
   232  001090  6D                 	db	109	;'m'
   233  001091  00                 	db	0
   234                           
   235                           ; #config settings
   236  001092  00                 	db	0	; dummy byte at the end
   237  0000                     
   238                           	psect	cinit
   239  006198                     __pcinit:
   240                           	opt callstack 0
   241  006198                     start_initialization:
   242                           	opt callstack 0
   243  006198                     __initialization:
   244                           	opt callstack 0
   245                           
   246                           ; Clear objects allocated to BANK0 (5 bytes)
   247  006198  0100               	movlb	0
   248  00619A  6BAD               	clrf	(__pbssBANK0+4)& (0+255),b
   249  00619C  6BAC               	clrf	(__pbssBANK0+3)& (0+255),b
   250  00619E  6BAB               	clrf	(__pbssBANK0+2)& (0+255),b
   251  0061A0  6BAA               	clrf	(__pbssBANK0+1)& (0+255),b
   252  0061A2  6BA9               	clrf	__pbssBANK0& (0+255),b
   253  0061A4                     end_of_initialization:
   254                           	opt callstack 0
   255  0061A4                     __end_of__initialization:
   256                           	opt callstack 0
   257  0061A4  0E00               	movlw	low (__Lmediumconst shr (0+16))
   258  0061A6  6EF8               	movwf	tblptru,c
   259  0061A8  0100               	movlb	0
   260  0061AA  EFA8  F03A         	goto	_main	;jump to C main() function
   261                           
   262                           	psect	bssBANK0
   263  0000A9                     __pbssBANK0:
   264                           	opt callstack 0
   265  0000A9                     _strResultado:
   266                           	opt callstack 0
   267  0000A9                     	ds	5
   268                           
   269                           	psect	cstackBANK0
   270  000060                     __pcstackBANK0:
   271                           	opt callstack 0
   272  000060                     _sprintf$1075:
   273                           	opt callstack 0
   274                           
   275                           ; 3 bytes @ 0x0
   276  000060                     	ds	3
   277  000063                     sprintf@ap:
   278                           	opt callstack 0
   279                           
   280                           ; 2 bytes @ 0x3
   281  000063                     	ds	2
   282  000065                     sprintf@flag:
   283                           	opt callstack 0
   284                           
   285                           ; 2 bytes @ 0x5
   286  000065                     	ds	2
   287  000067                     sprintf@val:
   288                           	opt callstack 0
   289                           
   290                           ; 4 bytes @ 0x7
   291  000067                     	ds	4
   292  00006B                     sprintf@eexp:
   293                           	opt callstack 0
   294                           
   295                           ; 2 bytes @ 0xB
   296  00006B                     	ds	2
   297  00006D                     sprintf@tmpval:
   298                           	opt callstack 0
   299                           
   300                           ; 4 bytes @ 0xD
   301  00006D                     	ds	4
   302  000071                     sprintf@prec:
   303                           	opt callstack 0
   304                           
   305                           ; 2 bytes @ 0x11
   306  000071                     	ds	2
   307  000073                     sprintf@fval:
   308                           	opt callstack 0
   309                           
   310                           ; 3 bytes @ 0x13
   311  000073                     	ds	3
   312  000076                     sprintf@c:
   313                           	opt callstack 0
   314                           
   315                           ; 1 bytes @ 0x16
   316  000076                     	ds	1
   317  000077                     main@Dis:
   318                           	opt callstack 0
   319                           
   320                           ; 3 bytes @ 0x17
   321  000077                     	ds	3
   322  00007A                     _main$1058:
   323                           	opt callstack 0
   324                           
   325                           ; 3 bytes @ 0x1A
   326  00007A                     	ds	3
   327  00007D                     _main$1059:
   328                           	opt callstack 0
   329                           
   330                           ; 3 bytes @ 0x1D
   331  00007D                     	ds	3
   332  000080                     _main$1060:
   333                           	opt callstack 0
   334                           
   335                           ; 3 bytes @ 0x20
   336  000080                     	ds	3
   337  000083                     _main$1061:
   338                           	opt callstack 0
   339                           
   340                           ; 3 bytes @ 0x23
   341  000083                     	ds	3
   342  000086                     _main$1062:
   343                           	opt callstack 0
   344                           
   345                           ; 3 bytes @ 0x26
   346  000086                     	ds	3
   347  000089                     _main$1063:
   348                           	opt callstack 0
   349                           
   350                           ; 3 bytes @ 0x29
   351  000089                     	ds	3
   352  00008C                     _main$1064:
   353                           	opt callstack 0
   354                           
   355                           ; 3 bytes @ 0x2C
   356  00008C                     	ds	3
   357  00008F                     _main$1065:
   358                           	opt callstack 0
   359                           
   360                           ; 3 bytes @ 0x2F
   361  00008F                     	ds	3
   362  000092                     _main$1066:
   363                           	opt callstack 0
   364                           
   365                           ; 3 bytes @ 0x32
   366  000092                     	ds	3
   367  000095                     _main$1067:
   368                           	opt callstack 0
   369                           
   370                           ; 3 bytes @ 0x35
   371  000095                     	ds	3
   372  000098                     _main$1068:
   373                           	opt callstack 0
   374                           
   375                           ; 3 bytes @ 0x38
   376  000098                     	ds	3
   377  00009B                     _main$1069:
   378                           	opt callstack 0
   379                           
   380                           ; 3 bytes @ 0x3B
   381  00009B                     	ds	3
   382  00009E                     _main$1070:
   383                           	opt callstack 0
   384                           
   385                           ; 3 bytes @ 0x3E
   386  00009E                     	ds	3
   387  0000A1                     _main$1071:
   388                           	opt callstack 0
   389                           
   390                           ; 3 bytes @ 0x41
   391  0000A1                     	ds	3
   392  0000A4                     main@Radc:
   393                           	opt callstack 0
   394                           
   395                           ; 2 bytes @ 0x44
   396  0000A4                     	ds	2
   397  0000A6                     main@Vadc:
   398                           	opt callstack 0
   399                           
   400                           ; 3 bytes @ 0x46
   401  0000A6                     	ds	3
   402                           
   403                           	psect	cstackCOMRAM
   404  000001                     __pcstackCOMRAM:
   405                           	opt callstack 0
   406  000001                     ??_SetDDRamAddr:
   407  000001                     ??_isdigit:
   408  000001                     ?_conversionADC:
   409                           	opt callstack 0
   410  000001                     ?___awmod:
   411                           	opt callstack 0
   412  000001                     ?___lwmod:
   413                           	opt callstack 0
   414  000001                     ?___ftpack:
   415                           	opt callstack 0
   416  000001                     ?___ftneg:
   417                           	opt callstack 0
   418  000001                     ?__tdiv_to_l_:
   419                           	opt callstack 0
   420  000001                     ?__div_to_l_:
   421                           	opt callstack 0
   422  000001                     ?___lldiv:
   423                           	opt callstack 0
   424  000001                     ?___llmod:
   425                           	opt callstack 0
   426  000001                     WriteCmdXLCD@cmd:
   427                           	opt callstack 0
   428  000001                     WriteDataXLCD@data:
   429                           	opt callstack 0
   430  000001                     ___awmod@dividend:
   431                           	opt callstack 0
   432  000001                     ___lwmod@dividend:
   433                           	opt callstack 0
   434  000001                     __div_to_l_@f1:
   435                           	opt callstack 0
   436  000001                     ___ftpack@arg:
   437                           	opt callstack 0
   438  000001                     __tdiv_to_l_@f1:
   439                           	opt callstack 0
   440  000001                     ___ftge@ff1:
   441                           	opt callstack 0
   442  000001                     ___ftneg@f1:
   443                           	opt callstack 0
   444  000001                     delay_ms@n:
   445                           	opt callstack 0
   446  000001                     ___lldiv@dividend:
   447                           	opt callstack 0
   448  000001                     ___llmod@dividend:
   449                           	opt callstack 0
   450                           
   451                           ; 4 bytes @ 0x0
   452  000001                     	ds	1
   453  000002                     _isdigit$860:
   454                           	opt callstack 0
   455  000002                     putrsXLCD@buffer:
   456                           	opt callstack 0
   457  000002                     putsXLCD@buffer:
   458                           	opt callstack 0
   459                           
   460                           ; 2 bytes @ 0x1
   461  000002                     	ds	1
   462  000003                     ??_conversionADC:
   463  000003                     isdigit@c:
   464                           	opt callstack 0
   465  000003                     ___awmod@divisor:
   466                           	opt callstack 0
   467  000003                     ___lwmod@divisor:
   468                           	opt callstack 0
   469                           
   470                           ; 2 bytes @ 0x2
   471  000003                     	ds	1
   472  000004                     SetDDRamAddr@DDaddr:
   473                           	opt callstack 0
   474  000004                     ___ftpack@exp:
   475                           	opt callstack 0
   476  000004                     __div_to_l_@f2:
   477                           	opt callstack 0
   478  000004                     __tdiv_to_l_@f2:
   479                           	opt callstack 0
   480  000004                     ___ftge@ff2:
   481                           	opt callstack 0
   482                           
   483                           ; 3 bytes @ 0x3
   484  000004                     	ds	1
   485  000005                     ??_delay_ms:
   486  000005                     ___awmod@counter:
   487                           	opt callstack 0
   488  000005                     ___ftpack@sign:
   489                           	opt callstack 0
   490  000005                     ___lwmod@counter:
   491                           	opt callstack 0
   492  000005                     conversionADC@resultado:
   493                           	opt callstack 0
   494  000005                     ___lldiv@divisor:
   495                           	opt callstack 0
   496  000005                     ___llmod@divisor:
   497                           	opt callstack 0
   498                           
   499                           ; 4 bytes @ 0x4
   500  000005                     	ds	1
   501  000006                     ??___ftpack:
   502  000006                     ??_OpenXLCD:
   503  000006                     ?___lwdiv:
   504                           	opt callstack 0
   505  000006                     ___awmod@sign:
   506                           	opt callstack 0
   507  000006                     ___lwdiv@dividend:
   508                           	opt callstack 0
   509                           
   510                           ; 2 bytes @ 0x5
   511  000006                     	ds	1
   512  000007                     ??__tdiv_to_l_:
   513  000007                     ??___ftge:
   514  000007                     ?___awdiv:
   515                           	opt callstack 0
   516  000007                     OpenXLCD@lcdtype:
   517                           	opt callstack 0
   518  000007                     ___awdiv@dividend:
   519                           	opt callstack 0
   520  000007                     __div_to_l_@quot:
   521                           	opt callstack 0
   522                           
   523                           ; 4 bytes @ 0x6
   524  000007                     	ds	1
   525  000008                     ___lwdiv@divisor:
   526                           	opt callstack 0
   527                           
   528                           ; 2 bytes @ 0x7
   529  000008                     	ds	1
   530  000009                     ?___lltoft:
   531                           	opt callstack 0
   532  000009                     ?___lwtoft:
   533                           	opt callstack 0
   534  000009                     ___llmod@counter:
   535                           	opt callstack 0
   536  000009                     ___awdiv@divisor:
   537                           	opt callstack 0
   538  000009                     ___lwtoft@c:
   539                           	opt callstack 0
   540  000009                     ___lldiv@quotient:
   541                           	opt callstack 0
   542  000009                     ___lltoft@c:
   543                           	opt callstack 0
   544                           
   545                           ; 4 bytes @ 0x8
   546  000009                     	ds	1
   547  00000A                     ___lwdiv@quotient:
   548                           	opt callstack 0
   549  00000A                     __tdiv_to_l_@quot:
   550                           	opt callstack 0
   551                           
   552                           ; 4 bytes @ 0x9
   553  00000A                     	ds	1
   554  00000B                     ___awdiv@counter:
   555                           	opt callstack 0
   556  00000B                     __div_to_l_@cntr:
   557                           	opt callstack 0
   558                           
   559                           ; 1 bytes @ 0xA
   560  00000B                     	ds	1
   561  00000C                     ___awdiv@sign:
   562                           	opt callstack 0
   563  00000C                     __div_to_l_@exp1:
   564                           	opt callstack 0
   565  00000C                     ___lwdiv@counter:
   566                           	opt callstack 0
   567                           
   568                           ; 1 bytes @ 0xB
   569  00000C                     	ds	1
   570  00000D                     ??___lltoft:
   571  00000D                     ?___wmul:
   572                           	opt callstack 0
   573  00000D                     ___lldiv@counter:
   574                           	opt callstack 0
   575  00000D                     ___wmul@multiplier:
   576                           	opt callstack 0
   577  00000D                     ___awdiv@quotient:
   578                           	opt callstack 0
   579                           
   580                           ; 2 bytes @ 0xC
   581  00000D                     	ds	1
   582  00000E                     __tdiv_to_l_@cntr:
   583                           	opt callstack 0
   584                           
   585                           ; 1 bytes @ 0xD
   586  00000E                     	ds	1
   587  00000F                     __tdiv_to_l_@exp1:
   588                           	opt callstack 0
   589  00000F                     ___wmul@multiplicand:
   590                           	opt callstack 0
   591                           
   592                           ; 2 bytes @ 0xE
   593  00000F                     	ds	2
   594  000011                     ___lltoft@exp:
   595                           	opt callstack 0
   596  000011                     ___wmul@product:
   597                           	opt callstack 0
   598                           
   599                           ; 2 bytes @ 0x10
   600  000011                     	ds	2
   601  000013                     ?___ftmul:
   602                           	opt callstack 0
   603  000013                     ___ftmul@f1:
   604                           	opt callstack 0
   605                           
   606                           ; 3 bytes @ 0x12
   607  000013                     	ds	3
   608  000016                     ___ftmul@f2:
   609                           	opt callstack 0
   610                           
   611                           ; 3 bytes @ 0x15
   612  000016                     	ds	3
   613  000019                     ??___ftmul:
   614                           
   615                           ; 1 bytes @ 0x18
   616  000019                     	ds	3
   617  00001C                     ___ftmul@exp:
   618                           	opt callstack 0
   619                           
   620                           ; 1 bytes @ 0x1B
   621  00001C                     	ds	1
   622  00001D                     ___ftmul@f3_as_product:
   623                           	opt callstack 0
   624                           
   625                           ; 3 bytes @ 0x1C
   626  00001D                     	ds	3
   627  000020                     ___ftmul@cntr:
   628                           	opt callstack 0
   629                           
   630                           ; 1 bytes @ 0x1F
   631  000020                     	ds	1
   632  000021                     ___ftmul@sign:
   633                           	opt callstack 0
   634                           
   635                           ; 1 bytes @ 0x20
   636  000021                     	ds	1
   637  000022                     ?___ftdiv:
   638                           	opt callstack 0
   639  000022                     ?_fround:
   640                           	opt callstack 0
   641  000022                     ?_scale:
   642                           	opt callstack 0
   643  000022                     ___ftdiv@f1:
   644                           	opt callstack 0
   645                           
   646                           ; 3 bytes @ 0x21
   647  000022                     	ds	3
   648  000025                     ___ftdiv@f2:
   649                           	opt callstack 0
   650  000025                     _fround$1073:
   651                           	opt callstack 0
   652  000025                     _scale$1074:
   653                           	opt callstack 0
   654                           
   655                           ; 3 bytes @ 0x24
   656  000025                     	ds	3
   657  000028                     ??___ftdiv:
   658  000028                     scale@scl:
   659                           	opt callstack 0
   660  000028                     _fround$1072:
   661                           	opt callstack 0
   662                           
   663                           ; 3 bytes @ 0x27
   664  000028                     	ds	1
   665  000029                     ?___fttol:
   666                           	opt callstack 0
   667  000029                     ___fttol@f1:
   668                           	opt callstack 0
   669                           
   670                           ; 3 bytes @ 0x28
   671  000029                     	ds	2
   672  00002B                     fround@prec:
   673                           	opt callstack 0
   674  00002B                     ___ftdiv@cntr:
   675                           	opt callstack 0
   676                           
   677                           ; 1 bytes @ 0x2A
   678  00002B                     	ds	1
   679  00002C                     ?___ftadd:
   680                           	opt callstack 0
   681  00002C                     ___ftadd@f1:
   682                           	opt callstack 0
   683  00002C                     ___ftdiv@f3:
   684                           	opt callstack 0
   685                           
   686                           ; 3 bytes @ 0x2B
   687  00002C                     	ds	1
   688  00002D                     ??___fttol:
   689                           
   690                           ; 1 bytes @ 0x2C
   691  00002D                     	ds	2
   692  00002F                     ___ftdiv@exp:
   693                           	opt callstack 0
   694  00002F                     ___ftadd@f2:
   695                           	opt callstack 0
   696                           
   697                           ; 3 bytes @ 0x2E
   698  00002F                     	ds	1
   699  000030                     ___ftdiv@sign:
   700                           	opt callstack 0
   701                           
   702                           ; 1 bytes @ 0x2F
   703  000030                     	ds	2
   704  000032                     ??___ftadd:
   705  000032                     ___fttol@sign1:
   706                           	opt callstack 0
   707                           
   708                           ; 1 bytes @ 0x31
   709  000032                     	ds	1
   710  000033                     ___fttol@lval:
   711                           	opt callstack 0
   712                           
   713                           ; 4 bytes @ 0x32
   714  000033                     	ds	2
   715  000035                     ___ftadd@sign:
   716                           	opt callstack 0
   717                           
   718                           ; 1 bytes @ 0x34
   719  000035                     	ds	1
   720  000036                     ___ftadd@exp2:
   721                           	opt callstack 0
   722                           
   723                           ; 1 bytes @ 0x35
   724  000036                     	ds	1
   725  000037                     ___ftadd@exp1:
   726                           	opt callstack 0
   727  000037                     ___fttol@exp1:
   728                           	opt callstack 0
   729                           
   730                           ; 1 bytes @ 0x36
   731  000037                     	ds	1
   732  000038                     ?___ftsub:
   733                           	opt callstack 0
   734  000038                     ___ftsub@f1:
   735                           	opt callstack 0
   736                           
   737                           ; 3 bytes @ 0x37
   738  000038                     	ds	3
   739  00003B                     ___ftsub@f2:
   740                           	opt callstack 0
   741                           
   742                           ; 3 bytes @ 0x3A
   743  00003B                     	ds	3
   744  00003E                     ?_sprintf:
   745                           	opt callstack 0
   746  00003E                     sprintf@sp:
   747                           	opt callstack 0
   748                           
   749                           ; 2 bytes @ 0x3D
   750  00003E                     	ds	2
   751  000040                     sprintf@f:
   752                           	opt callstack 0
   753                           
   754                           ; 2 bytes @ 0x3F
   755  000040                     	ds	5
   756  000045                     ??_sprintf:
   757                           
   758                           ; 1 bytes @ 0x44
   759  000045                     	ds	6
   760  00004B                     
   761                           ; 1 bytes @ 0x4A
   762 ;;
   763 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   764 ;;
   765 ;; *************** function _main *****************
   766 ;; Defined at:
   767 ;;		line 14 in file "main.c"
   768 ;; Parameters:    Size  Location     Type
   769 ;;		None
   770 ;; Auto vars:     Size  Location     Type
   771 ;;  DisI            4    0        unsigned long 
   772 ;;  Vadc            3   70[BANK0 ] unsigned long 
   773 ;;  Dis             3   23[BANK0 ] unsigned long 
   774 ;;  Radc            2   68[BANK0 ] unsigned int 
   775 ;; Return value:  Size  Location     Type
   776 ;;                  1    wreg      void 
   777 ;; Registers used:
   778 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   779 ;; Tracked objects:
   780 ;;		On entry : 0/0
   781 ;;		On exit  : 0/0
   782 ;;		Unchanged: 0/0
   783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   784 ;;      Params:         0       0       0       0       0       0       0       0       0
   785 ;;      Locals:         0      50       0       0       0       0       0       0       0
   786 ;;      Temps:          0       0       0       0       0       0       0       0       0
   787 ;;      Totals:         0      50       0       0       0       0       0       0       0
   788 ;;Total ram usage:       50 bytes
   789 ;; Hardware stack levels required when called:    4
   790 ;; This function calls:
   791 ;;		_WriteCmdXLCD
   792 ;;		___ftadd
   793 ;;		___ftdiv
   794 ;;		___ftmul
   795 ;;		___ftsub
   796 ;;		___lwtoft
   797 ;;		_conversionADC
   798 ;;		_delay_ms
   799 ;;		_inicializacionLCD
   800 ;;		_initADC
   801 ;;		_putrsXLCD
   802 ;;		_putsXLCD
   803 ;;		_sprintf
   804 ;; This function is called by:
   805 ;;		Startup code after reset
   806 ;; This function uses a non-reentrant model
   807 ;;
   808                           
   809                           	psect	text0
   810  007550                     __ptext0:
   811                           	opt callstack 0
   812  007550                     _main:
   813                           	opt callstack 27
   814                           
   815                           ;main.c: 16: double Dis, Vadc;;main.c: 17: uint16_t Radc;;main.c: 18: uint32_t DisI;;mai
      +                          n.c: 19: inicializacionLCD();
   816                           
   817                           ;incstack = 0
   818  007550  ECD7  F030         	call	_inicializacionLCD	;wreg free
   819                           
   820                           ;main.c: 20: putrsXLCD("    Distancia:");
   821  007554  0E7B               	movlw	low STR_1
   822  007556  6E02               	movwf	putrsXLCD@buffer^0,c
   823  007558  0E10               	movlw	high STR_1
   824  00755A  6E03               	movwf	(putrsXLCD@buffer+1)^0,c
   825  00755C  EC52  F031         	call	_putrsXLCD	;wreg free
   826                           
   827                           ;main.c: 21: initADC();
   828  007560  ECBA  F030         	call	_initADC	;wreg free
   829  007564                     l3441:
   830                           
   831                           ;main.c: 24: Radc = (conversionADC());
   832  007564  ECF3  F030         	call	_conversionADC	;wreg free
   833  007568  C001  F0A4         	movff	?_conversionADC,main@Radc
   834  00756C  C002  F0A5         	movff	?_conversionADC+1,main@Radc+1
   835                           
   836                           ;main.c: 25: Vadc = (float)(Radc);
   837  007570  C0A4  F009         	movff	main@Radc,___lwtoft@c
   838  007574  C0A5  F00A         	movff	main@Radc+1,___lwtoft@c+1
   839  007578  EC04  F031         	call	___lwtoft	;wreg free
   840  00757C  C009  F0A6         	movff	?___lwtoft,main@Vadc
   841  007580  C00A  F0A7         	movff	?___lwtoft+1,main@Vadc+1
   842  007584  C00B  F0A8         	movff	?___lwtoft+2,main@Vadc+2
   843                           
   844                           ;main.c: 26: Vadc = (Vadc*2.5)/1024;
   845  007588  0E00               	movlw	0
   846  00758A  6E16               	movwf	___ftmul@f2^0,c
   847  00758C  0E20               	movlw	32
   848  00758E  6E17               	movwf	(___ftmul@f2+1)^0,c
   849  007590  0E40               	movlw	64
   850  007592  6E18               	movwf	(___ftmul@f2+2)^0,c
   851  007594  C0A6  F013         	movff	main@Vadc,___ftmul@f1
   852  007598  C0A7  F014         	movff	main@Vadc+1,___ftmul@f1+1
   853  00759C  C0A8  F015         	movff	main@Vadc+2,___ftmul@f1+2
   854  0075A0  EC7B  F035         	call	___ftmul	;wreg free
   855  0075A4  C013  F022         	movff	?___ftmul,___ftdiv@f1
   856  0075A8  C014  F023         	movff	?___ftmul+1,___ftdiv@f1+1
   857  0075AC  C015  F024         	movff	?___ftmul+2,___ftdiv@f1+2
   858  0075B0  0E00               	movlw	0
   859  0075B2  6E25               	movwf	___ftdiv@f2^0,c
   860  0075B4  0E80               	movlw	128
   861  0075B6  6E26               	movwf	(___ftdiv@f2+1)^0,c
   862  0075B8  0E44               	movlw	68
   863  0075BA  6E27               	movwf	(___ftdiv@f2+2)^0,c
   864  0075BC  EC8E  F034         	call	___ftdiv	;wreg free
   865  0075C0  C022  F0A6         	movff	?___ftdiv,main@Vadc
   866  0075C4  C023  F0A7         	movff	?___ftdiv+1,main@Vadc+1
   867  0075C8  C024  F0A8         	movff	?___ftdiv+2,main@Vadc+2
   868                           
   869                           ;main.c: 31: Dis = (-22.14*Vadc*Vadc*Vadc*Vadc*Vadc) + (171.6*Vadc*Vadc*Vadc*Vadc) - (52
      +                          3.0*Vadc*Vadc*Vadc) + (793.5*Vadc*Vadc) - (625.0*Vadc) + 232.9;
   870  0075CC  C0A6  F016         	movff	main@Vadc,___ftmul@f2
   871  0075D0  C0A7  F017         	movff	main@Vadc+1,___ftmul@f2+1
   872  0075D4  C0A8  F018         	movff	main@Vadc+2,___ftmul@f2+2
   873  0075D8  C0A6  F013         	movff	main@Vadc,___ftmul@f1
   874  0075DC  C0A7  F014         	movff	main@Vadc+1,___ftmul@f1+1
   875  0075E0  C0A8  F015         	movff	main@Vadc+2,___ftmul@f1+2
   876  0075E4  EC7B  F035         	call	___ftmul	;wreg free
   877  0075E8  C013  F07A         	movff	?___ftmul,_main$1058
   878  0075EC  C014  F07B         	movff	?___ftmul+1,_main$1058+1
   879  0075F0  C015  F07C         	movff	?___ftmul+2,_main$1058+2
   880                           
   881                           ;main.c: 31: Dis = (-22.14*Vadc*Vadc*Vadc*Vadc*Vadc) + (171.6*Vadc*Vadc*Vadc*Vadc) - (52
      +                          3.0*Vadc*Vadc*Vadc) + (793.5*Vadc*Vadc) - (625.0*Vadc) + 232.9;
   882  0075F4  C0A6  F016         	movff	main@Vadc,___ftmul@f2
   883  0075F8  C0A7  F017         	movff	main@Vadc+1,___ftmul@f2+1
   884  0075FC  C0A8  F018         	movff	main@Vadc+2,___ftmul@f2+2
   885  007600  C0A6  F013         	movff	main@Vadc,___ftmul@f1
   886  007604  C0A7  F014         	movff	main@Vadc+1,___ftmul@f1+1
   887  007608  C0A8  F015         	movff	main@Vadc+2,___ftmul@f1+2
   888  00760C  EC7B  F035         	call	___ftmul	;wreg free
   889  007610  C013  F07D         	movff	?___ftmul,_main$1059
   890  007614  C014  F07E         	movff	?___ftmul+1,_main$1059+1
   891  007618  C015  F07F         	movff	?___ftmul+2,_main$1059+2
   892                           
   893                           ;main.c: 31: Dis = (-22.14*Vadc*Vadc*Vadc*Vadc*Vadc) + (171.6*Vadc*Vadc*Vadc*Vadc) - (52
      +                          3.0*Vadc*Vadc*Vadc) + (793.5*Vadc*Vadc) - (625.0*Vadc) + 232.9;
   894  00761C  C0A6  F016         	movff	main@Vadc,___ftmul@f2
   895  007620  C0A7  F017         	movff	main@Vadc+1,___ftmul@f2+1
   896  007624  C0A8  F018         	movff	main@Vadc+2,___ftmul@f2+2
   897  007628  C07D  F013         	movff	_main$1059,___ftmul@f1
   898  00762C  C07E  F014         	movff	_main$1059+1,___ftmul@f1+1
   899  007630  C07F  F015         	movff	_main$1059+2,___ftmul@f1+2
   900  007634  EC7B  F035         	call	___ftmul	;wreg free
   901  007638  C013  F080         	movff	?___ftmul,_main$1060
   902  00763C  C014  F081         	movff	?___ftmul+1,_main$1060+1
   903  007640  C015  F082         	movff	?___ftmul+2,_main$1060+2
   904                           
   905                           ;main.c: 31: Dis = (-22.14*Vadc*Vadc*Vadc*Vadc*Vadc) + (171.6*Vadc*Vadc*Vadc*Vadc) - (52
      +                          3.0*Vadc*Vadc*Vadc) + (793.5*Vadc*Vadc) - (625.0*Vadc) + 232.9;
   906  007644  C0A6  F016         	movff	main@Vadc,___ftmul@f2
   907  007648  C0A7  F017         	movff	main@Vadc+1,___ftmul@f2+1
   908  00764C  C0A8  F018         	movff	main@Vadc+2,___ftmul@f2+2
   909  007650  C0A6  F013         	movff	main@Vadc,___ftmul@f1
   910  007654  C0A7  F014         	movff	main@Vadc+1,___ftmul@f1+1
   911  007658  C0A8  F015         	movff	main@Vadc+2,___ftmul@f1+2
   912  00765C  EC7B  F035         	call	___ftmul	;wreg free
   913  007660  C013  F083         	movff	?___ftmul,_main$1061
   914  007664  C014  F084         	movff	?___ftmul+1,_main$1061+1
   915  007668  C015  F085         	movff	?___ftmul+2,_main$1061+2
   916                           
   917                           ;main.c: 31: Dis = (-22.14*Vadc*Vadc*Vadc*Vadc*Vadc) + (171.6*Vadc*Vadc*Vadc*Vadc) - (52
      +                          3.0*Vadc*Vadc*Vadc) + (793.5*Vadc*Vadc) - (625.0*Vadc) + 232.9;
   918  00766C  C0A6  F016         	movff	main@Vadc,___ftmul@f2
   919  007670  C0A7  F017         	movff	main@Vadc+1,___ftmul@f2+1
   920  007674  C0A8  F018         	movff	main@Vadc+2,___ftmul@f2+2
   921  007678  C083  F013         	movff	_main$1061,___ftmul@f1
   922  00767C  C084  F014         	movff	_main$1061+1,___ftmul@f1+1
   923  007680  C085  F015         	movff	_main$1061+2,___ftmul@f1+2
   924  007684  EC7B  F035         	call	___ftmul	;wreg free
   925  007688  C013  F086         	movff	?___ftmul,_main$1062
   926  00768C  C014  F087         	movff	?___ftmul+1,_main$1062+1
   927  007690  C015  F088         	movff	?___ftmul+2,_main$1062+2
   928                           
   929                           ;main.c: 31: Dis = (-22.14*Vadc*Vadc*Vadc*Vadc*Vadc) + (171.6*Vadc*Vadc*Vadc*Vadc) - (52
      +                          3.0*Vadc*Vadc*Vadc) + (793.5*Vadc*Vadc) - (625.0*Vadc) + 232.9;
   930  007694  C0A6  F016         	movff	main@Vadc,___ftmul@f2
   931  007698  C0A7  F017         	movff	main@Vadc+1,___ftmul@f2+1
   932  00769C  C0A8  F018         	movff	main@Vadc+2,___ftmul@f2+2
   933  0076A0  C086  F013         	movff	_main$1062,___ftmul@f1
   934  0076A4  C087  F014         	movff	_main$1062+1,___ftmul@f1+1
   935  0076A8  C088  F015         	movff	_main$1062+2,___ftmul@f1+2
   936  0076AC  EC7B  F035         	call	___ftmul	;wreg free
   937  0076B0  C013  F089         	movff	?___ftmul,_main$1063
   938  0076B4  C014  F08A         	movff	?___ftmul+1,_main$1063+1
   939  0076B8  C015  F08B         	movff	?___ftmul+2,_main$1063+2
   940                           
   941                           ;main.c: 31: Dis = (-22.14*Vadc*Vadc*Vadc*Vadc*Vadc) + (171.6*Vadc*Vadc*Vadc*Vadc) - (52
      +                          3.0*Vadc*Vadc*Vadc) + (793.5*Vadc*Vadc) - (625.0*Vadc) + 232.9;
   942  0076BC  C0A6  F016         	movff	main@Vadc,___ftmul@f2
   943  0076C0  C0A7  F017         	movff	main@Vadc+1,___ftmul@f2+1
   944  0076C4  C0A8  F018         	movff	main@Vadc+2,___ftmul@f2+2
   945  0076C8  C0A6  F013         	movff	main@Vadc,___ftmul@f1
   946  0076CC  C0A7  F014         	movff	main@Vadc+1,___ftmul@f1+1
   947  0076D0  C0A8  F015         	movff	main@Vadc+2,___ftmul@f1+2
   948  0076D4  EC7B  F035         	call	___ftmul	;wreg free
   949  0076D8  C013  F08C         	movff	?___ftmul,_main$1064
   950  0076DC  C014  F08D         	movff	?___ftmul+1,_main$1064+1
   951  0076E0  C015  F08E         	movff	?___ftmul+2,_main$1064+2
   952                           
   953                           ;main.c: 31: Dis = (-22.14*Vadc*Vadc*Vadc*Vadc*Vadc) + (171.6*Vadc*Vadc*Vadc*Vadc) - (52
      +                          3.0*Vadc*Vadc*Vadc) + (793.5*Vadc*Vadc) - (625.0*Vadc) + 232.9;
   954  0076E4  C0A6  F016         	movff	main@Vadc,___ftmul@f2
   955  0076E8  C0A7  F017         	movff	main@Vadc+1,___ftmul@f2+1
   956  0076EC  C0A8  F018         	movff	main@Vadc+2,___ftmul@f2+2
   957  0076F0  C08C  F013         	movff	_main$1064,___ftmul@f1
   958  0076F4  C08D  F014         	movff	_main$1064+1,___ftmul@f1+1
   959  0076F8  C08E  F015         	movff	_main$1064+2,___ftmul@f1+2
   960  0076FC  EC7B  F035         	call	___ftmul	;wreg free
   961  007700  C013  F08F         	movff	?___ftmul,_main$1065
   962  007704  C014  F090         	movff	?___ftmul+1,_main$1065+1
   963  007708  C015  F091         	movff	?___ftmul+2,_main$1065+2
   964                           
   965                           ;main.c: 31: Dis = (-22.14*Vadc*Vadc*Vadc*Vadc*Vadc) + (171.6*Vadc*Vadc*Vadc*Vadc) - (52
      +                          3.0*Vadc*Vadc*Vadc) + (793.5*Vadc*Vadc) - (625.0*Vadc) + 232.9;
   966  00770C  C0A6  F016         	movff	main@Vadc,___ftmul@f2
   967  007710  C0A7  F017         	movff	main@Vadc+1,___ftmul@f2+1
   968  007714  C0A8  F018         	movff	main@Vadc+2,___ftmul@f2+2
   969  007718  C08F  F013         	movff	_main$1065,___ftmul@f1
   970  00771C  C090  F014         	movff	_main$1065+1,___ftmul@f1+1
   971  007720  C091  F015         	movff	_main$1065+2,___ftmul@f1+2
   972  007724  EC7B  F035         	call	___ftmul	;wreg free
   973  007728  C013  F092         	movff	?___ftmul,_main$1066
   974  00772C  C014  F093         	movff	?___ftmul+1,_main$1066+1
   975  007730  C015  F094         	movff	?___ftmul+2,_main$1066+2
   976                           
   977                           ;main.c: 31: Dis = (-22.14*Vadc*Vadc*Vadc*Vadc*Vadc) + (171.6*Vadc*Vadc*Vadc*Vadc) - (52
      +                          3.0*Vadc*Vadc*Vadc) + (793.5*Vadc*Vadc) - (625.0*Vadc) + 232.9;
   978  007734  C0A6  F016         	movff	main@Vadc,___ftmul@f2
   979  007738  C0A7  F017         	movff	main@Vadc+1,___ftmul@f2+1
   980  00773C  C0A8  F018         	movff	main@Vadc+2,___ftmul@f2+2
   981  007740  C092  F013         	movff	_main$1066,___ftmul@f1
   982  007744  C093  F014         	movff	_main$1066+1,___ftmul@f1+1
   983  007748  C094  F015         	movff	_main$1066+2,___ftmul@f1+2
   984  00774C  EC7B  F035         	call	___ftmul	;wreg free
   985  007750  C013  F095         	movff	?___ftmul,_main$1067
   986  007754  C014  F096         	movff	?___ftmul+1,_main$1067+1
   987  007758  C015  F097         	movff	?___ftmul+2,_main$1067+2
   988                           
   989                           ;main.c: 31: Dis = (-22.14*Vadc*Vadc*Vadc*Vadc*Vadc) + (171.6*Vadc*Vadc*Vadc*Vadc) - (52
      +                          3.0*Vadc*Vadc*Vadc) + (793.5*Vadc*Vadc) - (625.0*Vadc) + 232.9;
   990  00775C  0E9A               	movlw	154
   991  00775E  6E16               	movwf	___ftmul@f2^0,c
   992  007760  0E2B               	movlw	43
   993  007762  6E17               	movwf	(___ftmul@f2+1)^0,c
   994  007764  0E43               	movlw	67
   995  007766  6E18               	movwf	(___ftmul@f2+2)^0,c
   996  007768  C089  F013         	movff	_main$1063,___ftmul@f1
   997  00776C  C08A  F014         	movff	_main$1063+1,___ftmul@f1+1
   998  007770  C08B  F015         	movff	_main$1063+2,___ftmul@f1+2
   999  007774  EC7B  F035         	call	___ftmul	;wreg free
  1000  007778  C013  F02F         	movff	?___ftmul,___ftadd@f2
  1001  00777C  C014  F030         	movff	?___ftmul+1,___ftadd@f2+1
  1002  007780  C015  F031         	movff	?___ftmul+2,___ftadd@f2+2
  1003  007784  0E1F               	movlw	31
  1004  007786  6E16               	movwf	___ftmul@f2^0,c
  1005  007788  0EB1               	movlw	177
  1006  00778A  6E17               	movwf	(___ftmul@f2+1)^0,c
  1007  00778C  0EC1               	movlw	193
  1008  00778E  6E18               	movwf	(___ftmul@f2+2)^0,c
  1009  007790  C095  F013         	movff	_main$1067,___ftmul@f1
  1010  007794  C096  F014         	movff	_main$1067+1,___ftmul@f1+1
  1011  007798  C097  F015         	movff	_main$1067+2,___ftmul@f1+2
  1012  00779C  EC7B  F035         	call	___ftmul	;wreg free
  1013  0077A0  C013  F02C         	movff	?___ftmul,___ftadd@f1
  1014  0077A4  C014  F02D         	movff	?___ftmul+1,___ftadd@f1+1
  1015  0077A8  C015  F02E         	movff	?___ftmul+2,___ftadd@f1+2
  1016  0077AC  ECF1  F036         	call	___ftadd	;wreg free
  1017  0077B0  C02C  F098         	movff	?___ftadd,_main$1068
  1018  0077B4  C02D  F099         	movff	?___ftadd+1,_main$1068+1
  1019  0077B8  C02E  F09A         	movff	?___ftadd+2,_main$1068+2
  1020                           
  1021                           ;main.c: 31: Dis = (-22.14*Vadc*Vadc*Vadc*Vadc*Vadc) + (171.6*Vadc*Vadc*Vadc*Vadc) - (52
      +                          3.0*Vadc*Vadc*Vadc) + (793.5*Vadc*Vadc) - (625.0*Vadc) + 232.9;
  1022  0077BC  0EC0               	movlw	192
  1023  0077BE  6E16               	movwf	___ftmul@f2^0,c
  1024  0077C0  0E02               	movlw	2
  1025  0077C2  6E17               	movwf	(___ftmul@f2+1)^0,c
  1026  0077C4  0E44               	movlw	68
  1027  0077C6  6E18               	movwf	(___ftmul@f2+2)^0,c
  1028  0077C8  C080  F013         	movff	_main$1060,___ftmul@f1
  1029  0077CC  C081  F014         	movff	_main$1060+1,___ftmul@f1+1
  1030  0077D0  C082  F015         	movff	_main$1060+2,___ftmul@f1+2
  1031  0077D4  EC7B  F035         	call	___ftmul	;wreg free
  1032  0077D8  C013  F03B         	movff	?___ftmul,___ftsub@f2
  1033  0077DC  C014  F03C         	movff	?___ftmul+1,___ftsub@f2+1
  1034  0077E0  C015  F03D         	movff	?___ftmul+2,___ftsub@f2+2
  1035  0077E4  C098  F038         	movff	_main$1068,___ftsub@f1
  1036  0077E8  C099  F039         	movff	_main$1068+1,___ftsub@f1+1
  1037  0077EC  C09A  F03A         	movff	_main$1068+2,___ftsub@f1+2
  1038  0077F0  ECE2  F031         	call	___ftsub	;wreg free
  1039  0077F4  C038  F09B         	movff	?___ftsub,_main$1069
  1040  0077F8  C039  F09C         	movff	?___ftsub+1,_main$1069+1
  1041  0077FC  C03A  F09D         	movff	?___ftsub+2,_main$1069+2
  1042                           
  1043                           ;main.c: 31: Dis = (-22.14*Vadc*Vadc*Vadc*Vadc*Vadc) + (171.6*Vadc*Vadc*Vadc*Vadc) - (52
      +                          3.0*Vadc*Vadc*Vadc) + (793.5*Vadc*Vadc) - (625.0*Vadc) + 232.9;
  1044  007800  0E60               	movlw	96
  1045  007802  6E16               	movwf	___ftmul@f2^0,c
  1046  007804  0E46               	movlw	70
  1047  007806  6E17               	movwf	(___ftmul@f2+1)^0,c
  1048  007808  0E44               	movlw	68
  1049  00780A  6E18               	movwf	(___ftmul@f2+2)^0,c
  1050  00780C  C07A  F013         	movff	_main$1058,___ftmul@f1
  1051  007810  C07B  F014         	movff	_main$1058+1,___ftmul@f1+1
  1052  007814  C07C  F015         	movff	_main$1058+2,___ftmul@f1+2
  1053  007818  EC7B  F035         	call	___ftmul	;wreg free
  1054  00781C  C013  F02F         	movff	?___ftmul,___ftadd@f2
  1055  007820  C014  F030         	movff	?___ftmul+1,___ftadd@f2+1
  1056  007824  C015  F031         	movff	?___ftmul+2,___ftadd@f2+2
  1057  007828  C09B  F02C         	movff	_main$1069,___ftadd@f1
  1058  00782C  C09C  F02D         	movff	_main$1069+1,___ftadd@f1+1
  1059  007830  C09D  F02E         	movff	_main$1069+2,___ftadd@f1+2
  1060  007834  ECF1  F036         	call	___ftadd	;wreg free
  1061  007838  C02C  F09E         	movff	?___ftadd,_main$1070
  1062  00783C  C02D  F09F         	movff	?___ftadd+1,_main$1070+1
  1063  007840  C02E  F0A0         	movff	?___ftadd+2,_main$1070+2
  1064                           
  1065                           ;main.c: 31: Dis = (-22.14*Vadc*Vadc*Vadc*Vadc*Vadc) + (171.6*Vadc*Vadc*Vadc*Vadc) - (52
      +                          3.0*Vadc*Vadc*Vadc) + (793.5*Vadc*Vadc) - (625.0*Vadc) + 232.9;
  1066  007844  0E40               	movlw	64
  1067  007846  6E16               	movwf	___ftmul@f2^0,c
  1068  007848  0E1C               	movlw	28
  1069  00784A  6E17               	movwf	(___ftmul@f2+1)^0,c
  1070  00784C  0E44               	movlw	68
  1071  00784E  6E18               	movwf	(___ftmul@f2+2)^0,c
  1072  007850  C0A6  F013         	movff	main@Vadc,___ftmul@f1
  1073  007854  C0A7  F014         	movff	main@Vadc+1,___ftmul@f1+1
  1074  007858  C0A8  F015         	movff	main@Vadc+2,___ftmul@f1+2
  1075  00785C  EC7B  F035         	call	___ftmul	;wreg free
  1076  007860  C013  F03B         	movff	?___ftmul,___ftsub@f2
  1077  007864  C014  F03C         	movff	?___ftmul+1,___ftsub@f2+1
  1078  007868  C015  F03D         	movff	?___ftmul+2,___ftsub@f2+2
  1079  00786C  C09E  F038         	movff	_main$1070,___ftsub@f1
  1080  007870  C09F  F039         	movff	_main$1070+1,___ftsub@f1+1
  1081  007874  C0A0  F03A         	movff	_main$1070+2,___ftsub@f1+2
  1082  007878  ECE2  F031         	call	___ftsub	;wreg free
  1083  00787C  C038  F0A1         	movff	?___ftsub,_main$1071
  1084  007880  C039  F0A2         	movff	?___ftsub+1,_main$1071+1
  1085  007884  C03A  F0A3         	movff	?___ftsub+2,_main$1071+2
  1086                           
  1087                           ;main.c: 31: Dis = (-22.14*Vadc*Vadc*Vadc*Vadc*Vadc) + (171.6*Vadc*Vadc*Vadc*Vadc) - (52
      +                          3.0*Vadc*Vadc*Vadc) + (793.5*Vadc*Vadc) - (625.0*Vadc) + 232.9;
  1088  007888  C0A1  F02C         	movff	_main$1071,___ftadd@f1
  1089  00788C  C0A2  F02D         	movff	_main$1071+1,___ftadd@f1+1
  1090  007890  C0A3  F02E         	movff	_main$1071+2,___ftadd@f1+2
  1091  007894  0EE6               	movlw	230
  1092  007896  6E2F               	movwf	___ftadd@f2^0,c
  1093  007898  0E68               	movlw	104
  1094  00789A  6E30               	movwf	(___ftadd@f2+1)^0,c
  1095  00789C  0E43               	movlw	67
  1096  00789E  6E31               	movwf	(___ftadd@f2+2)^0,c
  1097  0078A0  ECF1  F036         	call	___ftadd	;wreg free
  1098  0078A4  C02C  F077         	movff	?___ftadd,main@Dis
  1099  0078A8  C02D  F078         	movff	?___ftadd+1,main@Dis+1
  1100  0078AC  C02E  F079         	movff	?___ftadd+2,main@Dis+2
  1101                           
  1102                           ;main.c: 32: sprintf(strResultado,"%.3f cm",Dis);
  1103  0078B0  0EA9               	movlw	low _strResultado
  1104  0078B2  6E3E               	movwf	sprintf@sp^0,c
  1105  0078B4  0E00               	movlw	high _strResultado
  1106  0078B6  6E3F               	movwf	(sprintf@sp+1)^0,c
  1107  0078B8  0E8A               	movlw	low STR_2
  1108  0078BA  6E40               	movwf	sprintf@f^0,c
  1109  0078BC  0E10               	movlw	high STR_2
  1110  0078BE  6E41               	movwf	(sprintf@f+1)^0,c
  1111  0078C0  C077  F042         	movff	main@Dis,?_sprintf+4
  1112  0078C4  C078  F043         	movff	main@Dis+1,?_sprintf+5
  1113  0078C8  C079  F044         	movff	main@Dis+2,?_sprintf+6
  1114  0078CC  EC7C  F03C         	call	_sprintf	;wreg free
  1115                           
  1116                           ;main.c: 33: WriteCmdXLCD(0b11000000 + 3);
  1117  0078D0  0EC3               	movlw	195
  1118  0078D2  ECA4  F031         	call	_WriteCmdXLCD
  1119                           
  1120                           ;main.c: 34: putsXLCD(strResultado);
  1121  0078D6  0EA9               	movlw	low _strResultado
  1122  0078D8  6E02               	movwf	putsXLCD@buffer^0,c
  1123  0078DA  0E00               	movlw	high _strResultado
  1124  0078DC  6E03               	movwf	(putsXLCD@buffer+1)^0,c
  1125  0078DE  EC3B  F031         	call	_putsXLCD	;wreg free
  1126                           
  1127                           ;main.c: 35: delay_ms(200);
  1128  0078E2  0EC8               	movlw	200
  1129  0078E4  6E01               	movwf	delay_ms@n^0,c
  1130  0078E6  0E00               	movlw	0
  1131  0078E8  6E02               	movwf	(delay_ms@n+1)^0,c
  1132  0078EA  0E00               	movlw	0
  1133  0078EC  6E03               	movwf	(delay_ms@n+2)^0,c
  1134  0078EE  0E00               	movlw	0
  1135  0078F0  6E04               	movwf	(delay_ms@n+3)^0,c
  1136  0078F2  EC6C  F031         	call	_delay_ms	;wreg free
  1137  0078F6  D636               	goto	l3441
  1138  0078F8                     __end_of_main:
  1139                           	opt callstack 0
  1140                           
  1141 ;; *************** function _sprintf *****************
  1142 ;; Defined at:
  1143 ;;		line 505 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c"
  1144 ;; Parameters:    Size  Location     Type
  1145 ;;  sp              2   61[COMRAM] PTR unsigned char 
  1146 ;;		 -> strResultado(5), 
  1147 ;;  f               2   63[COMRAM] PTR const unsigned char 
  1148 ;;		 -> STR_2(8), 
  1149 ;; Auto vars:     Size  Location     Type
  1150 ;;  tmpval          4   13[BANK0 ] struct .
  1151 ;;  val             4    7[BANK0 ] unsigned long 
  1152 ;;  fval            3   19[BANK0 ] unsigned long 
  1153 ;;  cp              3    0        PTR const unsigned char 
  1154 ;;  prec            2   17[BANK0 ] int 
  1155 ;;  eexp            2   11[BANK0 ] int 
  1156 ;;  flag            2    5[BANK0 ] unsigned short 
  1157 ;;  ap              2    3[BANK0 ] PTR void [1]
  1158 ;;		 -> ?_sprintf(2), 
  1159 ;;  len             2    0        unsigned int 
  1160 ;;  width           2    0        int 
  1161 ;;  c               1   22[BANK0 ] unsigned char 
  1162 ;;  d               1    0        unsigned char 
  1163 ;; Return value:  Size  Location     Type
  1164 ;;                  2   61[COMRAM] int 
  1165 ;; Registers used:
  1166 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1167 ;; Tracked objects:
  1168 ;;		On entry : 0/0
  1169 ;;		On exit  : 0/0
  1170 ;;		Unchanged: 0/0
  1171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1172 ;;      Params:         7       0       0       0       0       0       0       0       0
  1173 ;;      Locals:         0      23       0       0       0       0       0       0       0
  1174 ;;      Temps:          6       0       0       0       0       0       0       0       0
  1175 ;;      Totals:        13      23       0       0       0       0       0       0       0
  1176 ;;Total ram usage:       36 bytes
  1177 ;; Hardware stack levels used:    1
  1178 ;; Hardware stack levels required when called:    3
  1179 ;; This function calls:
  1180 ;;		___awdiv
  1181 ;;		___ftadd
  1182 ;;		___ftge
  1183 ;;		___ftmul
  1184 ;;		___ftneg
  1185 ;;		___ftsub
  1186 ;;		___fttol
  1187 ;;		___lldiv
  1188 ;;		___llmod
  1189 ;;		___lltoft
  1190 ;;		___wmul
  1191 ;;		__div_to_l_
  1192 ;;		__tdiv_to_l_
  1193 ;;		_fround
  1194 ;;		_isdigit
  1195 ;;		_scale
  1196 ;; This function is called by:
  1197 ;;		_main
  1198 ;; This function uses a non-reentrant model
  1199 ;;
  1200                           
  1201                           	psect	text1
  1202  0078F8                     __ptext1:
  1203                           	opt callstack 0
  1204  0078F8                     _sprintf:
  1205                           	opt callstack 27
  1206                           
  1207                           ;doprnt.c: 507: va_list ap;;doprnt.c: 512: char c;;doprnt.c: 514: int width;;doprnt.c: 5
      +                          17: int prec;;doprnt.c: 525: unsigned short flag;;doprnt.c: 532: char d;;doprnt.c: 533: 
      +                          double fval;;doprnt.c: 534: int eexp;;doprnt.c: 540: union {;doprnt.c: 541: unsigned lon
      +                          g vd;;doprnt.c: 542: double integ;;doprnt.c: 543: } tmpval;;doprnt.c: 545: unsigned long
      +                           val;;doprnt.c: 546: unsigned len;;doprnt.c: 547: const char * cp;;doprnt.c: 550: *ap = 
      +                          __va_start();
  1208                           
  1209                           ;incstack = 0
  1210  0078F8  0E42               	movlw	low (?_sprintf+4)
  1211  0078FA  0100               	movlb	0	; () banked
  1212  0078FC  6F63               	movwf	sprintf@ap& (0+255),b
  1213  0078FE  0E00               	movlw	high (?_sprintf+4)
  1214  007900  6F64               	movwf	(sprintf@ap+1)& (0+255),b
  1215                           
  1216                           ;doprnt.c: 553: while((c = *f++)) {
  1217  007902  D36B               	goto	l3305
  1218  007904                     l3105:
  1219                           
  1220                           ; BSR set to: 0
  1221                           ;doprnt.c: 555: if(c != '%')
  1222  007904  0E25               	movlw	37
  1223  007906  1976               	xorwf	sprintf@c& (0+255),w,b
  1224  007908  B4D8               	btfsc	status,2,c
  1225  00790A  D009               	goto	l3111
  1226                           
  1227                           ; BSR set to: 0
  1228                           ;doprnt.c: 557: {;doprnt.c: 558: ((*sp++ = (c)));
  1229  00790C  C03E  FFD9         	movff	sprintf@sp,fsr2l
  1230  007910  C03F  FFDA         	movff	sprintf@sp+1,fsr2h
  1231  007914  C076  FFDF         	movff	sprintf@c,indf2
  1232  007918                     l3109:
  1233                           
  1234                           ; BSR set to: 0
  1235  007918  4A3E               	infsnz	sprintf@sp^0,f,c
  1236  00791A  2A3F               	incf	(sprintf@sp+1)^0,f,c
  1237                           
  1238                           ;doprnt.c: 559: continue;
  1239  00791C  D35E               	goto	l3305
  1240  00791E                     l3111:
  1241                           
  1242                           ; BSR set to: 0
  1243                           ;doprnt.c: 560: };doprnt.c: 565: flag = 0;
  1244  00791E  0E00               	movlw	0
  1245  007920  6F66               	movwf	(sprintf@flag+1)& (0+255),b
  1246  007922  0E00               	movlw	0
  1247  007924  6F65               	movwf	sprintf@flag& (0+255),b
  1248                           
  1249                           ; BSR set to: 0
  1250                           ;doprnt.c: 628: if(*f == '.') {
  1251  007926  C040  FFF6         	movff	sprintf@f,tblptrl
  1252  00792A  C041  FFF7         	movff	sprintf@f+1,tblptrh
  1253  00792E                     	if	0	;tblptru may be non-zero
  1254  00792E                     	endif
  1255  00792E                     	if	0	;tblptru may be non-zero
  1256  00792E                     	endif
  1257  00792E  0008               	tblrd		*
  1258  007930  50F5               	movf	tablat,w,c
  1259  007932  0A2E               	xorlw	46
  1260  007934  A4D8               	btfss	status,2,c
  1261  007936  D038               	goto	l3127
  1262                           
  1263                           ; BSR set to: 0
  1264                           ;doprnt.c: 629: flag |= 0x4000;
  1265  007938  8D66               	bsf	(sprintf@flag+1)& (0+255),6,b
  1266                           
  1267                           ;doprnt.c: 630: f++;
  1268  00793A  4A40               	infsnz	sprintf@f^0,f,c
  1269  00793C  2A41               	incf	(sprintf@f+1)^0,f,c
  1270                           
  1271                           ; BSR set to: 0
  1272                           ;doprnt.c: 644: {;doprnt.c: 645: prec = 0;
  1273  00793E  0E00               	movlw	0
  1274  007940  6F72               	movwf	(sprintf@prec+1)& (0+255),b
  1275  007942  0E00               	movlw	0
  1276  007944  6F71               	movwf	sprintf@prec& (0+255),b
  1277                           
  1278                           ;doprnt.c: 646: while(isdigit((unsigned)*f)) {
  1279  007946  D025               	goto	l3125
  1280  007948                     l3119:
  1281                           
  1282                           ;doprnt.c: 647: prec *= 10;
  1283  007948  C071  F00D         	movff	sprintf@prec,___wmul@multiplier
  1284  00794C  C072  F00E         	movff	sprintf@prec+1,___wmul@multiplier+1
  1285  007950  0E00               	movlw	0
  1286  007952  6E10               	movwf	(___wmul@multiplicand+1)^0,c
  1287  007954  0E0A               	movlw	10
  1288  007956  6E0F               	movwf	___wmul@multiplicand^0,c
  1289  007958  EC28  F031         	call	___wmul	;wreg free
  1290  00795C  C00D  F071         	movff	?___wmul,sprintf@prec
  1291  007960  C00E  F072         	movff	?___wmul+1,sprintf@prec+1
  1292                           
  1293                           ;doprnt.c: 648: prec += *f++ - '0';
  1294  007964  0ED0               	movlw	208
  1295  007966  6E45               	movwf	??_sprintf^0,c
  1296  007968  0EFF               	movlw	255
  1297  00796A  6E46               	movwf	(??_sprintf+1)^0,c
  1298  00796C  C040  FFF6         	movff	sprintf@f,tblptrl
  1299  007970  C041  FFF7         	movff	sprintf@f+1,tblptrh
  1300  007974                     	if	0	;tblptru may be non-zero
  1301  007974                     	endif
  1302  007974                     	if	0	;tblptru may be non-zero
  1303  007974                     	endif
  1304  007974  0008               	tblrd		*
  1305  007976  50F5               	movf	tablat,w,c
  1306  007978  6E47               	movwf	(??_sprintf+2)^0,c
  1307  00797A  6A48               	clrf	(??_sprintf+3)^0,c
  1308  00797C  5045               	movf	??_sprintf^0,w,c
  1309  00797E  2647               	addwf	(??_sprintf+2)^0,f,c
  1310  007980  5046               	movf	(??_sprintf+1)^0,w,c
  1311  007982  2248               	addwfc	(??_sprintf+3)^0,f,c
  1312  007984  5047               	movf	(??_sprintf+2)^0,w,c
  1313  007986  0100               	movlb	0	; () banked
  1314  007988  2771               	addwf	sprintf@prec& (0+255),f,b
  1315  00798A  5048               	movf	(??_sprintf+3)^0,w,c
  1316  00798C  2372               	addwfc	(sprintf@prec+1)& (0+255),f,b
  1317                           
  1318                           ; BSR set to: 0
  1319  00798E  4A40               	infsnz	sprintf@f^0,f,c
  1320  007990  2A41               	incf	(sprintf@f+1)^0,f,c
  1321  007992                     l3125:
  1322                           
  1323                           ; BSR set to: 0
  1324  007992  C040  FFF6         	movff	sprintf@f,tblptrl
  1325  007996  C041  FFF7         	movff	sprintf@f+1,tblptrh
  1326  00799A                     	if	0	;tblptru may be non-zero
  1327  00799A                     	endif
  1328  00799A                     	if	0	;tblptru may be non-zero
  1329  00799A                     	endif
  1330  00799A  0008               	tblrd		*
  1331  00799C  50F5               	movf	tablat,w,c
  1332  00799E  ECE4  F030         	call	_isdigit
  1333  0079A2  A0D8               	btfss	status,0,c
  1334  0079A4  D009               	goto	l3135
  1335  0079A6  D7D0               	goto	l3119
  1336  0079A8                     l3127:
  1337                           
  1338                           ; BSR set to: 0
  1339                           ;doprnt.c: 652: prec = 0;
  1340  0079A8  0E00               	movlw	0
  1341  0079AA  6F72               	movwf	(sprintf@prec+1)& (0+255),b
  1342  0079AC  0E00               	movlw	0
  1343  0079AE  6F71               	movwf	sprintf@prec& (0+255),b
  1344                           
  1345                           ; BSR set to: 0
  1346                           ;doprnt.c: 654: flag |= 0x1000;
  1347  0079B0  8966               	bsf	(sprintf@flag+1)& (0+255),4,b
  1348  0079B2  D002               	goto	l3135
  1349  0079B4                     l3131:
  1350                           
  1351                           ; BSR set to: 0
  1352                           ;doprnt.c: 689: flag |= 0x400;
  1353  0079B4  8566               	bsf	(sprintf@flag+1)& (0+255),2,b
  1354                           
  1355                           ;doprnt.c: 690: break;
  1356  0079B6  D012               	goto	l3137
  1357  0079B8                     l3135:
  1358  0079B8  C040  FFF6         	movff	sprintf@f,tblptrl
  1359  0079BC  C041  FFF7         	movff	sprintf@f+1,tblptrh
  1360  0079C0  4A40               	infsnz	sprintf@f^0,f,c
  1361  0079C2  2A41               	incf	(sprintf@f+1)^0,f,c
  1362  0079C4                     	if	0	;tblptru may be non-zero
  1363  0079C4                     	endif
  1364  0079C4                     	if	0	;tblptru may be non-zero
  1365  0079C4                     	endif
  1366  0079C4  0008               	tblrd		*
  1367  0079C6  CFF5 F076          	movff	tablat,sprintf@c
  1368  0079CA  0100               	movlb	0	; () banked
  1369  0079CC  5176               	movf	sprintf@c& (0+255),w,b
  1370                           
  1371                           ; Switch size 1, requested type "simple"
  1372                           ; Number of cases is 2, Range of values is 0 to 102
  1373                           ; switch strategies available:
  1374                           ; Name         Instructions Cycles
  1375                           ; simple_byte            7     4 (average)
  1376                           ;	Chosen strategy is simple_byte
  1377  0079CE  0A00               	xorlw	0	; case 0
  1378  0079D0  B4D8               	btfsc	status,2,c
  1379  0079D2  D30F               	goto	u2960
  1380  0079D4  0A66               	xorlw	102	; case 102
  1381  0079D6  B4D8               	btfsc	status,2,c
  1382  0079D8  D7ED               	goto	l3131
  1383  0079DA  D2FF               	goto	l3305
  1384  0079DC                     l3137:
  1385                           
  1386                           ; BSR set to: 0
  1387                           ;doprnt.c: 851: if(flag & (0x700)) {
  1388  0079DC  0E07               	movlw	7
  1389  0079DE  1566               	andwf	(sprintf@flag+1)& (0+255),w,b
  1390  0079E0  B4D8               	btfsc	status,2,c
  1391  0079E2  D2C6               	goto	l3285
  1392                           
  1393                           ; BSR set to: 0
  1394                           ;doprnt.c: 853: if(flag & 0x1000)
  1395  0079E4  A966               	btfss	(sprintf@flag+1)& (0+255),4,b
  1396  0079E6  D004               	goto	l3143
  1397                           
  1398                           ; BSR set to: 0
  1399                           ;doprnt.c: 855: prec = 6;
  1400  0079E8  0E00               	movlw	0
  1401  0079EA  6F72               	movwf	(sprintf@prec+1)& (0+255),b
  1402  0079EC  0E06               	movlw	6
  1403  0079EE  6F71               	movwf	sprintf@prec& (0+255),b
  1404  0079F0                     l3143:
  1405                           
  1406                           ; BSR set to: 0
  1407                           ;doprnt.c: 856: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  1408  0079F0  C063  FFD9         	movff	sprintf@ap,fsr2l
  1409  0079F4  C064  FFDA         	movff	sprintf@ap+1,fsr2h
  1410  0079F8  CFDE F073          	movff	postinc2,sprintf@fval
  1411  0079FC  CFDE F074          	movff	postinc2,sprintf@fval+1
  1412  007A00  CFDD F075          	movff	postdec2,sprintf@fval+2
  1413                           
  1414                           ; BSR set to: 0
  1415  007A04  0E03               	movlw	3
  1416  007A06  2763               	addwf	sprintf@ap& (0+255),f,b
  1417  007A08  0E00               	movlw	0
  1418  007A0A  2364               	addwfc	(sprintf@ap+1)& (0+255),f,b
  1419                           
  1420                           ; BSR set to: 0
  1421                           ;doprnt.c: 857: if(fval < 0.0) {
  1422  007A0C  AF75               	btfss	(sprintf@fval+2)& (0+255),7,b
  1423  007A0E  D011               	goto	l3153
  1424                           
  1425                           ; BSR set to: 0
  1426                           ;doprnt.c: 858: fval = -fval;
  1427  007A10  C073  F001         	movff	sprintf@fval,___ftneg@f1
  1428  007A14  C074  F002         	movff	sprintf@fval+1,___ftneg@f1+1
  1429  007A18  C075  F003         	movff	sprintf@fval+2,___ftneg@f1+2
  1430  007A1C  EC16  F031         	call	___ftneg	;wreg free
  1431  007A20  C001  F073         	movff	?___ftneg,sprintf@fval
  1432  007A24  C002  F074         	movff	?___ftneg+1,sprintf@fval+1
  1433  007A28  C003  F075         	movff	?___ftneg+2,sprintf@fval+2
  1434                           
  1435                           ;doprnt.c: 859: flag |= 0x03;
  1436  007A2C  0E03               	movlw	3
  1437  007A2E  0100               	movlb	0	; () banked
  1438  007A30  1365               	iorwf	sprintf@flag& (0+255),f,b
  1439  007A32                     l3153:
  1440                           
  1441                           ; BSR set to: 0
  1442                           ;doprnt.c: 860: };doprnt.c: 861: eexp = 0;
  1443  007A32  0E00               	movlw	0
  1444  007A34  6F6C               	movwf	(sprintf@eexp+1)& (0+255),b
  1445  007A36  0E00               	movlw	0
  1446  007A38  6F6B               	movwf	sprintf@eexp& (0+255),b
  1447                           
  1448                           ; BSR set to: 0
  1449                           ;doprnt.c: 862: if( fval!=0) {
  1450  007A3A  5173               	movf	sprintf@fval& (0+255),w,b
  1451  007A3C  1174               	iorwf	(sprintf@fval+1)& (0+255),w,b
  1452  007A3E  1175               	iorwf	(sprintf@fval+2)& (0+255),w,b
  1453  007A40  B4D8               	btfsc	status,2,c
  1454  007A42  D086               	goto	l3181
  1455                           
  1456                           ; BSR set to: 0
  1457                           ;doprnt.c: 863: (void)(*(&eexp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  1458  007A44  0E82               	movlw	130
  1459  007A46  6E45               	movwf	??_sprintf^0,c
  1460  007A48  0EFF               	movlw	255
  1461  007A4A  6E46               	movwf	(??_sprintf+1)^0,c
  1462  007A4C  C073  F047         	movff	sprintf@fval,??_sprintf+2
  1463  007A50  C074  F048         	movff	sprintf@fval+1,??_sprintf+3
  1464  007A54  C075  F049         	movff	sprintf@fval+2,??_sprintf+4
  1465  007A58  C076  F04A         	movff	sprintf@fval+3,??_sprintf+5
  1466  007A5C  0E10               	movlw	16
  1467  007A5E  D005               	goto	u2720
  1468  007A60                     u2725:
  1469  007A60  90D8               	bcf	status,0,c
  1470  007A62  324A               	rrcf	(??_sprintf+5)^0,f,c
  1471  007A64  3249               	rrcf	(??_sprintf+4)^0,f,c
  1472  007A66  3248               	rrcf	(??_sprintf+3)^0,f,c
  1473  007A68  3247               	rrcf	(??_sprintf+2)^0,f,c
  1474  007A6A                     u2720:
  1475  007A6A  2EE8               	decfsz	wreg,f,c
  1476  007A6C  D7F9               	goto	u2725
  1477  007A6E  5047               	movf	(??_sprintf+2)^0,w,c
  1478  007A70  2445               	addwf	??_sprintf^0,w,c
  1479  007A72  6F6B               	movwf	sprintf@eexp& (0+255),b
  1480  007A74  0E00               	movlw	0
  1481  007A76  2046               	addwfc	(??_sprintf+1)^0,w,c
  1482  007A78  6F6C               	movwf	(sprintf@eexp+1)& (0+255),b
  1483                           
  1484                           ; BSR set to: 0
  1485                           ;doprnt.c: 864: eexp--;
  1486  007A7A  076B               	decf	sprintf@eexp& (0+255),f,b
  1487  007A7C  A0D8               	btfss	status,0,c
  1488  007A7E  076C               	decf	(sprintf@eexp+1)& (0+255),f,b
  1489                           
  1490                           ; BSR set to: 0
  1491                           ;doprnt.c: 865: eexp *= 3;
  1492  007A80  C06B  F00D         	movff	sprintf@eexp,___wmul@multiplier
  1493  007A84  C06C  F00E         	movff	sprintf@eexp+1,___wmul@multiplier+1
  1494  007A88  0E00               	movlw	0
  1495  007A8A  6E10               	movwf	(___wmul@multiplicand+1)^0,c
  1496  007A8C  0E03               	movlw	3
  1497  007A8E  6E0F               	movwf	___wmul@multiplicand^0,c
  1498  007A90  EC28  F031         	call	___wmul	;wreg free
  1499  007A94  C00D  F06B         	movff	?___wmul,sprintf@eexp
  1500  007A98  C00E  F06C         	movff	?___wmul+1,sprintf@eexp+1
  1501                           
  1502                           ;doprnt.c: 866: eexp /= 10;
  1503  007A9C  C06B  F007         	movff	sprintf@eexp,___awdiv@dividend
  1504  007AA0  C06C  F008         	movff	sprintf@eexp+1,___awdiv@dividend+1
  1505  007AA4  0E00               	movlw	0
  1506  007AA6  6E0A               	movwf	(___awdiv@divisor+1)^0,c
  1507  007AA8  0E0A               	movlw	10
  1508  007AAA  6E09               	movwf	___awdiv@divisor^0,c
  1509  007AAC  EC8C  F033         	call	___awdiv	;wreg free
  1510  007AB0  C007  F06B         	movff	?___awdiv,sprintf@eexp
  1511  007AB4  C008  F06C         	movff	?___awdiv+1,sprintf@eexp+1
  1512                           
  1513                           ;doprnt.c: 867: if(eexp < 0)
  1514  007AB8  0100               	movlb	0	; () banked
  1515  007ABA  AF6C               	btfss	(sprintf@eexp+1)& (0+255),7,b
  1516  007ABC  D003               	goto	l3169
  1517                           
  1518                           ; BSR set to: 0
  1519                           ;doprnt.c: 868: eexp--;
  1520  007ABE  076B               	decf	sprintf@eexp& (0+255),f,b
  1521  007AC0  A0D8               	btfss	status,0,c
  1522  007AC2  076C               	decf	(sprintf@eexp+1)& (0+255),f,b
  1523  007AC4                     l3169:
  1524                           
  1525                           ; BSR set to: 0
  1526                           ;doprnt.c: 872: tmpval.integ = scale(-eexp);
  1527  007AC4  516B               	movf	sprintf@eexp& (0+255),w,b
  1528  007AC6  0800               	sublw	0
  1529  007AC8  ECF4  F038         	call	_scale
  1530  007ACC  C022  F06D         	movff	?_scale,sprintf@tmpval
  1531  007AD0  C023  F06E         	movff	?_scale+1,sprintf@tmpval+1
  1532  007AD4  C024  F06F         	movff	?_scale+2,sprintf@tmpval+2
  1533                           
  1534                           ;doprnt.c: 873: tmpval.integ *= fval;
  1535  007AD8  C06D  F013         	movff	sprintf@tmpval,___ftmul@f1
  1536  007ADC  C06E  F014         	movff	sprintf@tmpval+1,___ftmul@f1+1
  1537  007AE0  C06F  F015         	movff	sprintf@tmpval+2,___ftmul@f1+2
  1538  007AE4  C073  F016         	movff	sprintf@fval,___ftmul@f2
  1539  007AE8  C074  F017         	movff	sprintf@fval+1,___ftmul@f2+1
  1540  007AEC  C075  F018         	movff	sprintf@fval+2,___ftmul@f2+2
  1541  007AF0  EC7B  F035         	call	___ftmul	;wreg free
  1542  007AF4  C013  F06D         	movff	?___ftmul,sprintf@tmpval
  1543  007AF8  C014  F06E         	movff	?___ftmul+1,sprintf@tmpval+1
  1544  007AFC  C015  F06F         	movff	?___ftmul+2,sprintf@tmpval+2
  1545                           
  1546                           ;doprnt.c: 874: if(tmpval.integ < 1.0)
  1547  007B00  C06D  F001         	movff	sprintf@tmpval,___ftge@ff1
  1548  007B04  C06E  F002         	movff	sprintf@tmpval+1,___ftge@ff1+1
  1549  007B08  C06F  F003         	movff	sprintf@tmpval+2,___ftge@ff1+2
  1550  007B0C  0E00               	movlw	0
  1551  007B0E  6E04               	movwf	___ftge@ff2^0,c
  1552  007B10  0E80               	movlw	128
  1553  007B12  6E05               	movwf	(___ftge@ff2+1)^0,c
  1554  007B14  0E3F               	movlw	63
  1555  007B16  6E06               	movwf	(___ftge@ff2+2)^0,c
  1556  007B18  EC11  F033         	call	___ftge	;wreg free
  1557  007B1C  B0D8               	btfsc	status,0,c
  1558  007B1E  D005               	goto	l3177
  1559                           
  1560                           ;doprnt.c: 875: eexp--;
  1561  007B20  0100               	movlb	0	; () banked
  1562  007B22  076B               	decf	sprintf@eexp& (0+255),f,b
  1563  007B24  A0D8               	btfss	status,0,c
  1564  007B26  076C               	decf	(sprintf@eexp+1)& (0+255),f,b
  1565  007B28  D013               	goto	l3181
  1566  007B2A                     l3177:
  1567                           
  1568                           ;doprnt.c: 876: else if(tmpval.integ >= 10.0)
  1569  007B2A  C06D  F001         	movff	sprintf@tmpval,___ftge@ff1
  1570  007B2E  C06E  F002         	movff	sprintf@tmpval+1,___ftge@ff1+1
  1571  007B32  C06F  F003         	movff	sprintf@tmpval+2,___ftge@ff1+2
  1572  007B36  0E00               	movlw	0
  1573  007B38  6E04               	movwf	___ftge@ff2^0,c
  1574  007B3A  0E20               	movlw	32
  1575  007B3C  6E05               	movwf	(___ftge@ff2+1)^0,c
  1576  007B3E  0E41               	movlw	65
  1577  007B40  6E06               	movwf	(___ftge@ff2+2)^0,c
  1578  007B42  EC11  F033         	call	___ftge	;wreg free
  1579  007B46  A0D8               	btfss	status,0,c
  1580  007B48  D003               	goto	l3181
  1581                           
  1582                           ;doprnt.c: 877: eexp++;
  1583  007B4A  0100               	movlb	0	; () banked
  1584  007B4C  4B6B               	infsnz	sprintf@eexp& (0+255),f,b
  1585  007B4E  2B6C               	incf	(sprintf@eexp+1)& (0+255),f,b
  1586  007B50                     l3181:
  1587                           
  1588                           ;doprnt.c: 878: };doprnt.c: 1138: if(prec <= 12)
  1589  007B50  0100               	movlb	0	; () banked
  1590  007B52  BF72               	btfsc	(sprintf@prec+1)& (0+255),7,b
  1591  007B54  D006               	goto	u2760
  1592  007B56  5172               	movf	(sprintf@prec+1)& (0+255),w,b
  1593  007B58  E11B               	bnz	l3185
  1594  007B5A  0E0D               	movlw	13
  1595  007B5C  5D71               	subwf	sprintf@prec& (0+255),w,b
  1596  007B5E  B0D8               	btfsc	status,0,c
  1597  007B60  D017               	goto	l3185
  1598  007B62                     u2760:
  1599                           
  1600                           ; BSR set to: 0
  1601                           ;doprnt.c: 1139: fval += fround((unsigned int)prec);
  1602  007B62  C073  F02C         	movff	sprintf@fval,___ftadd@f1
  1603  007B66  C074  F02D         	movff	sprintf@fval+1,___ftadd@f1+1
  1604  007B6A  C075  F02E         	movff	sprintf@fval+2,___ftadd@f1+2
  1605  007B6E  5171               	movf	sprintf@prec& (0+255),w,b
  1606  007B70  ECC5  F037         	call	_fround
  1607  007B74  C022  F02F         	movff	?_fround,___ftadd@f2
  1608  007B78  C023  F030         	movff	?_fround+1,___ftadd@f2+1
  1609  007B7C  C024  F031         	movff	?_fround+2,___ftadd@f2+2
  1610  007B80  ECF1  F036         	call	___ftadd	;wreg free
  1611  007B84  C02C  F073         	movff	?___ftadd,sprintf@fval
  1612  007B88  C02D  F074         	movff	?___ftadd+1,sprintf@fval+1
  1613  007B8C  C02E  F075         	movff	?___ftadd+2,sprintf@fval+2
  1614  007B90                     l3185:
  1615                           
  1616                           ;doprnt.c: 1142: if((eexp > 9)||(fval != 0 && (unsigned long)fval == 0 && eexp > 1)) {
  1617  007B90  0100               	movlb	0	; () banked
  1618  007B92  BF6C               	btfsc	(sprintf@eexp+1)& (0+255),7,b
  1619  007B94  D006               	goto	u2770
  1620  007B96  516C               	movf	(sprintf@eexp+1)& (0+255),w,b
  1621  007B98  E120               	bnz	l3193
  1622  007B9A  0E0A               	movlw	10
  1623  007B9C  5D6B               	subwf	sprintf@eexp& (0+255),w,b
  1624  007B9E  B0D8               	btfsc	status,0,c
  1625  007BA0  D01C               	goto	u2800
  1626  007BA2                     u2770:
  1627                           
  1628                           ; BSR set to: 0
  1629  007BA2  5173               	movf	sprintf@fval& (0+255),w,b
  1630  007BA4  1174               	iorwf	(sprintf@fval+1)& (0+255),w,b
  1631  007BA6  1175               	iorwf	(sprintf@fval+2)& (0+255),w,b
  1632  007BA8  B4D8               	btfsc	status,2,c
  1633  007BAA  D056               	goto	l3207
  1634                           
  1635                           ; BSR set to: 0
  1636  007BAC  C073  F029         	movff	sprintf@fval,___fttol@f1
  1637  007BB0  C074  F02A         	movff	sprintf@fval+1,___fttol@f1+1
  1638  007BB4  C075  F02B         	movff	sprintf@fval+2,___fttol@f1+2
  1639  007BB8  EC25  F034         	call	___fttol	;wreg free
  1640  007BBC  5029               	movf	?___fttol^0,w,c
  1641  007BBE  102A               	iorwf	(?___fttol+1)^0,w,c
  1642  007BC0  102B               	iorwf	(?___fttol+2)^0,w,c
  1643  007BC2  102C               	iorwf	(?___fttol+3)^0,w,c
  1644  007BC4  A4D8               	btfss	status,2,c
  1645  007BC6  D048               	goto	l3207
  1646  007BC8  0100               	movlb	0	; () banked
  1647  007BCA  BF6C               	btfsc	(sprintf@eexp+1)& (0+255),7,b
  1648  007BCC  D045               	goto	l3207
  1649  007BCE  516C               	movf	(sprintf@eexp+1)& (0+255),w,b
  1650  007BD0  E104               	bnz	u2800
  1651  007BD2  0E02               	movlw	2
  1652  007BD4  5D6B               	subwf	sprintf@eexp& (0+255),w,b
  1653  007BD6  A0D8               	btfss	status,0,c
  1654  007BD8  D03F               	goto	l3207
  1655  007BDA                     u2800:
  1656  007BDA                     l3193:
  1657                           
  1658                           ; BSR set to: 0
  1659                           ;doprnt.c: 1146: if(tmpval.integ < 4.294967296){
  1660  007BDA  C06D  F001         	movff	sprintf@tmpval,___ftge@ff1
  1661  007BDE  C06E  F002         	movff	sprintf@tmpval+1,___ftge@ff1+1
  1662  007BE2  C06F  F003         	movff	sprintf@tmpval+2,___ftge@ff1+2
  1663  007BE6  0E70               	movlw	112
  1664  007BE8  6E04               	movwf	___ftge@ff2^0,c
  1665  007BEA  0E89               	movlw	137
  1666  007BEC  6E05               	movwf	(___ftge@ff2+1)^0,c
  1667  007BEE  0E40               	movlw	64
  1668  007BF0  6E06               	movwf	(___ftge@ff2+2)^0,c
  1669  007BF2  EC11  F033         	call	___ftge	;wreg free
  1670  007BF6  B0D8               	btfsc	status,0,c
  1671  007BF8  D003               	goto	l3197
  1672                           
  1673                           ;doprnt.c: 1147: eexp -= (sizeof dpowers/sizeof dpowers[0])-1;
  1674  007BFA  0100               	movlb	0	; () banked
  1675  007BFC  0EF7               	movlw	247
  1676  007BFE  D002               	goto	L1
  1677  007C00                     l3197:
  1678                           
  1679                           ;doprnt.c: 1149: eexp -= (sizeof dpowers/sizeof dpowers[0])-2;
  1680  007C00  0100               	movlb	0	; () banked
  1681  007C02  0EF8               	movlw	248
  1682  007C04                     L1:
  1683  007C04  276B               	addwf	sprintf@eexp& (0+255),f,b
  1684  007C06  0EFF               	movlw	255
  1685  007C08  236C               	addwfc	(sprintf@eexp+1)& (0+255),f,b
  1686                           
  1687                           ; BSR set to: 0
  1688                           ;doprnt.c: 1150: };doprnt.c: 1151: tmpval.integ = scale(eexp);
  1689  007C0A  516B               	movf	sprintf@eexp& (0+255),w,b
  1690  007C0C  ECF4  F038         	call	_scale
  1691  007C10  C022  F06D         	movff	?_scale,sprintf@tmpval
  1692  007C14  C023  F06E         	movff	?_scale+1,sprintf@tmpval+1
  1693  007C18  C024  F06F         	movff	?_scale+2,sprintf@tmpval+2
  1694                           
  1695                           ;doprnt.c: 1152: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  1696  007C1C  C073  F001         	movff	sprintf@fval,__tdiv_to_l_@f1
  1697  007C20  C074  F002         	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
  1698  007C24  C075  F003         	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
  1699  007C28  C06D  F004         	movff	sprintf@tmpval,__tdiv_to_l_@f2
  1700  007C2C  C06E  F005         	movff	sprintf@tmpval+1,__tdiv_to_l_@f2+1
  1701  007C30  C06F  F006         	movff	sprintf@tmpval+2,__tdiv_to_l_@f2+2
  1702  007C34  EC72  F036         	call	__tdiv_to_l_	;wreg free
  1703  007C38  C001  F067         	movff	?__tdiv_to_l_,sprintf@val
  1704  007C3C  C002  F068         	movff	?__tdiv_to_l_+1,sprintf@val+1
  1705  007C40  C003  F069         	movff	?__tdiv_to_l_+2,sprintf@val+2
  1706  007C44  C004  F06A         	movff	?__tdiv_to_l_+3,sprintf@val+3
  1707                           
  1708                           ;doprnt.c: 1155: fval = 0.0;
  1709  007C48  0E00               	movlw	0
  1710  007C4A  0100               	movlb	0	; () banked
  1711  007C4C  6F73               	movwf	sprintf@fval& (0+255),b
  1712  007C4E  0E00               	movlw	0
  1713  007C50  6F74               	movwf	(sprintf@fval+1)& (0+255),b
  1714  007C52  0E00               	movlw	0
  1715  007C54  6F75               	movwf	(sprintf@fval+2)& (0+255),b
  1716                           
  1717                           ;doprnt.c: 1156: } else {
  1718  007C56  D033               	goto	l3211
  1719  007C58                     l3207:
  1720                           
  1721                           ;doprnt.c: 1157: val = (unsigned long)fval;
  1722  007C58  C073  F029         	movff	sprintf@fval,___fttol@f1
  1723  007C5C  C074  F02A         	movff	sprintf@fval+1,___fttol@f1+1
  1724  007C60  C075  F02B         	movff	sprintf@fval+2,___fttol@f1+2
  1725  007C64  EC25  F034         	call	___fttol	;wreg free
  1726  007C68  C029  F067         	movff	?___fttol,sprintf@val
  1727  007C6C  C02A  F068         	movff	?___fttol+1,sprintf@val+1
  1728  007C70  C02B  F069         	movff	?___fttol+2,sprintf@val+2
  1729  007C74  C02C  F06A         	movff	?___fttol+3,sprintf@val+3
  1730                           
  1731                           ;doprnt.c: 1158: fval -= (double)val;
  1732  007C78  C073  F038         	movff	sprintf@fval,___ftsub@f1
  1733  007C7C  C074  F039         	movff	sprintf@fval+1,___ftsub@f1+1
  1734  007C80  C075  F03A         	movff	sprintf@fval+2,___ftsub@f1+2
  1735  007C84  C067  F009         	movff	sprintf@val,___lltoft@c
  1736  007C88  C068  F00A         	movff	sprintf@val+1,___lltoft@c+1
  1737  007C8C  C069  F00B         	movff	sprintf@val+2,___lltoft@c+2
  1738  007C90  C06A  F00C         	movff	sprintf@val+3,___lltoft@c+3
  1739  007C94  EC78  F032         	call	___lltoft	;wreg free
  1740  007C98  C009  F03B         	movff	?___lltoft,___ftsub@f2
  1741  007C9C  C00A  F03C         	movff	?___lltoft+1,___ftsub@f2+1
  1742  007CA0  C00B  F03D         	movff	?___lltoft+2,___ftsub@f2+2
  1743  007CA4  ECE2  F031         	call	___ftsub	;wreg free
  1744  007CA8  C038  F073         	movff	?___ftsub,sprintf@fval
  1745  007CAC  C039  F074         	movff	?___ftsub+1,sprintf@fval+1
  1746  007CB0  C03A  F075         	movff	?___ftsub+2,sprintf@fval+2
  1747                           
  1748                           ;doprnt.c: 1159: eexp = 0;
  1749  007CB4  0E00               	movlw	0
  1750  007CB6  0100               	movlb	0	; () banked
  1751  007CB8  6F6C               	movwf	(sprintf@eexp+1)& (0+255),b
  1752  007CBA  0E00               	movlw	0
  1753  007CBC  6F6B               	movwf	sprintf@eexp& (0+255),b
  1754  007CBE                     l3211:
  1755                           
  1756                           ; BSR set to: 0
  1757                           ;doprnt.c: 1160: };doprnt.c: 1162: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ;
      +                           c++)
  1758  007CBE  0E01               	movlw	1
  1759  007CC0  6F76               	movwf	sprintf@c& (0+255),b
  1760  007CC2                     l3217:
  1761                           
  1762                           ; BSR set to: 0
  1763                           ;doprnt.c: 1163: if(val < dpowers[c])
  1764  007CC2  5176               	movf	sprintf@c& (0+255),w,b
  1765  007CC4  0D04               	mullw	4
  1766  007CC6  0E53               	movlw	low _dpowers
  1767  007CC8  24F3               	addwf	243,w,c
  1768  007CCA  6EF6               	movwf	tblptrl,c
  1769  007CCC  0E10               	movlw	high _dpowers
  1770  007CCE  20F4               	addwfc	244,w,c
  1771  007CD0  6EF7               	movwf	tblptrh,c
  1772  007CD2                     	if	0	;There are less than 3 active tblptr bytes
  1773  007CD2                     	endif
  1774  007CD2  0009               	tblrd		*+
  1775  007CD4  50F5               	movf	tablat,w,c
  1776  007CD6  5D67               	subwf	sprintf@val& (0+255),w,b
  1777  007CD8  0009               	tblrd		*+
  1778  007CDA  50F5               	movf	tablat,w,c
  1779  007CDC  5968               	subwfb	(sprintf@val+1)& (0+255),w,b
  1780  007CDE  0009               	tblrd		*+
  1781  007CE0  50F5               	movf	tablat,w,c
  1782  007CE2  5969               	subwfb	(sprintf@val+2)& (0+255),w,b
  1783  007CE4  0009               	tblrd		*+
  1784  007CE6  50F5               	movf	tablat,w,c
  1785  007CE8  596A               	subwfb	(sprintf@val+3)& (0+255),w,b
  1786  007CEA  A0D8               	btfss	status,0,c
  1787  007CEC  D005               	goto	u2830
  1788                           
  1789                           ; BSR set to: 0
  1790  007CEE  2B76               	incf	sprintf@c& (0+255),f,b
  1791                           
  1792                           ; BSR set to: 0
  1793  007CF0  0E0A               	movlw	10
  1794  007CF2  1976               	xorwf	sprintf@c& (0+255),w,b
  1795  007CF4  A4D8               	btfss	status,2,c
  1796  007CF6  D7E5               	goto	l3217
  1797  007CF8                     u2830:
  1798                           
  1799                           ; BSR set to: 0
  1800                           ;doprnt.c: 1201: {;doprnt.c: 1214: if(flag & 0x03)
  1801  007CF8  0E03               	movlw	3
  1802  007CFA  1565               	andwf	sprintf@flag& (0+255),w,b
  1803  007CFC  6E45               	movwf	??_sprintf^0,c
  1804  007CFE  0E00               	movlw	0
  1805  007D00  1566               	andwf	(sprintf@flag+1)& (0+255),w,b
  1806  007D02  6E46               	movwf	(??_sprintf+1)^0,c
  1807  007D04  5045               	movf	??_sprintf^0,w,c
  1808  007D06  1046               	iorwf	(??_sprintf+1)^0,w,c
  1809  007D08  B4D8               	btfsc	status,2,c
  1810  007D0A  D051               	goto	l3239
  1811                           
  1812                           ; BSR set to: 0
  1813                           ;doprnt.c: 1216: ((*sp++ = ('-')));
  1814  007D0C  C03E  FFD9         	movff	sprintf@sp,fsr2l
  1815  007D10  C03F  FFDA         	movff	sprintf@sp+1,fsr2h
  1816  007D14  0E2D               	movlw	45
  1817  007D16  6EDF               	movwf	indf2,c
  1818                           
  1819                           ; BSR set to: 0
  1820  007D18  4A3E               	infsnz	sprintf@sp^0,f,c
  1821  007D1A  2A3F               	incf	(sprintf@sp+1)^0,f,c
  1822  007D1C  D048               	goto	l3239
  1823  007D1E                     l3231:
  1824                           
  1825                           ; BSR set to: 0
  1826                           ;doprnt.c: 1226: {;doprnt.c: 1227: tmpval.vd = val/dpowers[c];
  1827  007D1E  C067  F001         	movff	sprintf@val,___lldiv@dividend
  1828  007D22  C068  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  1829  007D26  C069  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  1830  007D2A  C06A  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  1831  007D2E  5176               	movf	sprintf@c& (0+255),w,b
  1832  007D30  0D04               	mullw	4
  1833  007D32  0E53               	movlw	low _dpowers
  1834  007D34  24F3               	addwf	243,w,c
  1835  007D36  6EF6               	movwf	tblptrl,c
  1836  007D38  0E10               	movlw	high _dpowers
  1837  007D3A  20F4               	addwfc	244,w,c
  1838  007D3C  6EF7               	movwf	tblptrh,c
  1839  007D3E                     	if	0	;There are less than 3 active tblptr bytes
  1840  007D3E                     	endif
  1841  007D3E  0009               	tblrd		*+
  1842  007D40  CFF5 F005          	movff	tablat,___lldiv@divisor
  1843  007D44  0009               	tblrd		*+
  1844  007D46  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  1845  007D4A  0009               	tblrd		*+
  1846  007D4C  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  1847  007D50  000A               	tblrd		*-
  1848  007D52  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  1849  007D56  EC4B  F033         	call	___lldiv	;wreg free
  1850  007D5A  C001  F06D         	movff	?___lldiv,sprintf@tmpval
  1851  007D5E  C002  F06E         	movff	?___lldiv+1,sprintf@tmpval+1
  1852  007D62  C003  F06F         	movff	?___lldiv+2,sprintf@tmpval+2
  1853  007D66  C004  F070         	movff	?___lldiv+3,sprintf@tmpval+3
  1854                           
  1855                           ;doprnt.c: 1228: tmpval.vd %= 10;
  1856  007D6A  C06D  F001         	movff	sprintf@tmpval,___llmod@dividend
  1857  007D6E  C06E  F002         	movff	sprintf@tmpval+1,___llmod@dividend+1
  1858  007D72  C06F  F003         	movff	sprintf@tmpval+2,___llmod@dividend+2
  1859  007D76  C070  F004         	movff	sprintf@tmpval+3,___llmod@dividend+3
  1860  007D7A  0E0A               	movlw	10
  1861  007D7C  6E05               	movwf	___llmod@divisor^0,c
  1862  007D7E  0E00               	movlw	0
  1863  007D80  6E06               	movwf	(___llmod@divisor+1)^0,c
  1864  007D82  0E00               	movlw	0
  1865  007D84  6E07               	movwf	(___llmod@divisor+2)^0,c
  1866  007D86  0E00               	movlw	0
  1867  007D88  6E08               	movwf	(___llmod@divisor+3)^0,c
  1868  007D8A  ECA6  F032         	call	___llmod	;wreg free
  1869  007D8E  C001  F06D         	movff	?___llmod,sprintf@tmpval
  1870  007D92  C002  F06E         	movff	?___llmod+1,sprintf@tmpval+1
  1871  007D96  C003  F06F         	movff	?___llmod+2,sprintf@tmpval+2
  1872  007D9A  C004  F070         	movff	?___llmod+3,sprintf@tmpval+3
  1873                           
  1874                           ;doprnt.c: 1229: ((*sp++ = ('0' + tmpval.vd)));
  1875  007D9E  0100               	movlb	0	; () banked
  1876  007DA0  516D               	movf	sprintf@tmpval& (0+255),w,b
  1877  007DA2  0F30               	addlw	48
  1878  007DA4  C03E  FFD9         	movff	sprintf@sp,fsr2l
  1879  007DA8  C03F  FFDA         	movff	sprintf@sp+1,fsr2h
  1880  007DAC  D7B4               	goto	L2
  1881  007DAE                     l3239:
  1882                           
  1883                           ; BSR set to: 0
  1884  007DAE  0776               	decf	sprintf@c& (0+255),f,b
  1885  007DB0  2976               	incf	sprintf@c& (0+255),w,b
  1886  007DB2  B4D8               	btfsc	status,2,c
  1887  007DB4  D00C               	goto	l3247
  1888  007DB6  D7B3               	goto	l3231
  1889  007DB8                     l3241:
  1890                           
  1891                           ; BSR set to: 0
  1892                           ;doprnt.c: 1234: ((*sp++ = ('0')));
  1893  007DB8  C03E  FFD9         	movff	sprintf@sp,fsr2l
  1894  007DBC  C03F  FFDA         	movff	sprintf@sp+1,fsr2h
  1895  007DC0  0E30               	movlw	48
  1896  007DC2  6EDF               	movwf	indf2,c
  1897                           
  1898                           ; BSR set to: 0
  1899  007DC4  4A3E               	infsnz	sprintf@sp^0,f,c
  1900  007DC6  2A3F               	incf	(sprintf@sp+1)^0,f,c
  1901                           
  1902                           ; BSR set to: 0
  1903                           ;doprnt.c: 1235: eexp--;
  1904  007DC8  076B               	decf	sprintf@eexp& (0+255),f,b
  1905  007DCA  A0D8               	btfss	status,0,c
  1906  007DCC  076C               	decf	(sprintf@eexp+1)& (0+255),f,b
  1907  007DCE                     l3247:
  1908                           
  1909                           ; BSR set to: 0
  1910  007DCE  BF6C               	btfsc	(sprintf@eexp+1)& (0+255),7,b
  1911  007DD0  D005               	goto	u2860
  1912  007DD2  516C               	movf	(sprintf@eexp+1)& (0+255),w,b
  1913  007DD4  E1F1               	bnz	l3241
  1914  007DD6  056B               	decf	sprintf@eexp& (0+255),w,b
  1915  007DD8  B0D8               	btfsc	status,0,c
  1916  007DDA  D7EE               	goto	l3241
  1917  007DDC                     u2860:
  1918                           
  1919                           ; BSR set to: 0
  1920                           ;doprnt.c: 1236: };doprnt.c: 1237: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2)
      +                          )
  1921  007DDC  BF72               	btfsc	(sprintf@prec+1)& (0+255),7,b
  1922  007DDE  D009               	goto	l289
  1923  007DE0  5172               	movf	(sprintf@prec+1)& (0+255),w,b
  1924  007DE2  E104               	bnz	u2870
  1925  007DE4  0E09               	movlw	9
  1926  007DE6  5D71               	subwf	sprintf@prec& (0+255),w,b
  1927  007DE8  A0D8               	btfss	status,0,c
  1928  007DEA  D003               	goto	l289
  1929  007DEC                     u2870:
  1930                           
  1931                           ; BSR set to: 0
  1932                           ;doprnt.c: 1238: c = (sizeof dpowers/sizeof dpowers[0])-2;
  1933  007DEC  0E08               	movlw	8
  1934  007DEE  6F76               	movwf	sprintf@c& (0+255),b
  1935  007DF0  D002               	goto	l3253
  1936  007DF2                     l289:
  1937                           
  1938                           ; BSR set to: 0
  1939                           ;doprnt.c: 1239: else;doprnt.c: 1240: c = (char)prec;
  1940  007DF2  C071  F076         	movff	sprintf@prec,sprintf@c
  1941  007DF6                     l3253:
  1942                           
  1943                           ; BSR set to: 0
  1944                           ;doprnt.c: 1241: prec -= (int)c;
  1945  007DF6  5176               	movf	sprintf@c& (0+255),w,b
  1946  007DF8  5F71               	subwf	sprintf@prec& (0+255),f,b
  1947  007DFA  0E00               	movlw	0
  1948  007DFC  5B72               	subwfb	(sprintf@prec+1)& (0+255),f,b
  1949                           
  1950                           ; BSR set to: 0
  1951                           ;doprnt.c: 1245: if(c)
  1952  007DFE  5176               	movf	sprintf@c& (0+255),w,b
  1953  007E00  B4D8               	btfsc	status,2,c
  1954  007E02  D008               	goto	l3261
  1955                           
  1956                           ; BSR set to: 0
  1957                           ;doprnt.c: 1247: ((*sp++ = ('.')));
  1958  007E04  C03E  FFD9         	movff	sprintf@sp,fsr2l
  1959  007E08  C03F  FFDA         	movff	sprintf@sp+1,fsr2h
  1960  007E0C  0E2E               	movlw	46
  1961  007E0E  6EDF               	movwf	indf2,c
  1962                           
  1963                           ; BSR set to: 0
  1964  007E10  4A3E               	infsnz	sprintf@sp^0,f,c
  1965  007E12  2A3F               	incf	(sprintf@sp+1)^0,f,c
  1966  007E14                     l3261:
  1967                           
  1968                           ; BSR set to: 0
  1969                           ;doprnt.c: 1253: val = (unsigned long)(fval * scale((signed char)c));
  1970  007E14  5176               	movf	sprintf@c& (0+255),w,b
  1971  007E16  ECF4  F038         	call	_scale
  1972  007E1A  C022  F060         	movff	?_scale,_sprintf$1075
  1973  007E1E  C023  F061         	movff	?_scale+1,_sprintf$1075+1
  1974  007E22  C024  F062         	movff	?_scale+2,_sprintf$1075+2
  1975                           
  1976                           ;doprnt.c: 1253: val = (unsigned long)(fval * scale((signed char)c));
  1977  007E26  C073  F016         	movff	sprintf@fval,___ftmul@f2
  1978  007E2A  C074  F017         	movff	sprintf@fval+1,___ftmul@f2+1
  1979  007E2E  C075  F018         	movff	sprintf@fval+2,___ftmul@f2+2
  1980  007E32  C060  F013         	movff	_sprintf$1075,___ftmul@f1
  1981  007E36  C061  F014         	movff	_sprintf$1075+1,___ftmul@f1+1
  1982  007E3A  C062  F015         	movff	_sprintf$1075+2,___ftmul@f1+2
  1983  007E3E  EC7B  F035         	call	___ftmul	;wreg free
  1984  007E42  C013  F029         	movff	?___ftmul,___fttol@f1
  1985  007E46  C014  F02A         	movff	?___ftmul+1,___fttol@f1+1
  1986  007E4A  C015  F02B         	movff	?___ftmul+2,___fttol@f1+2
  1987  007E4E  EC25  F034         	call	___fttol	;wreg free
  1988  007E52  C029  F067         	movff	?___fttol,sprintf@val
  1989  007E56  C02A  F068         	movff	?___fttol+1,sprintf@val+1
  1990  007E5A  C02B  F069         	movff	?___fttol+2,sprintf@val+2
  1991  007E5E  C02C  F06A         	movff	?___fttol+3,sprintf@val+3
  1992                           
  1993                           ;doprnt.c: 1254: while(c--) {
  1994  007E62  D070               	goto	l3275
  1995  007E64                     l3265:
  1996                           
  1997                           ; BSR set to: 0
  1998                           ;doprnt.c: 1255: tmpval.vd = val/dpowers[c];
  1999  007E64  C067  F001         	movff	sprintf@val,___lldiv@dividend
  2000  007E68  C068  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  2001  007E6C  C069  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  2002  007E70  C06A  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  2003  007E74  5176               	movf	sprintf@c& (0+255),w,b
  2004  007E76  0D04               	mullw	4
  2005  007E78  0E53               	movlw	low _dpowers
  2006  007E7A  24F3               	addwf	243,w,c
  2007  007E7C  6EF6               	movwf	tblptrl,c
  2008  007E7E  0E10               	movlw	high _dpowers
  2009  007E80  20F4               	addwfc	244,w,c
  2010  007E82  6EF7               	movwf	tblptrh,c
  2011  007E84                     	if	0	;There are less than 3 active tblptr bytes
  2012  007E84                     	endif
  2013  007E84  0009               	tblrd		*+
  2014  007E86  CFF5 F005          	movff	tablat,___lldiv@divisor
  2015  007E8A  0009               	tblrd		*+
  2016  007E8C  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  2017  007E90  0009               	tblrd		*+
  2018  007E92  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  2019  007E96  000A               	tblrd		*-
  2020  007E98  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  2021  007E9C  EC4B  F033         	call	___lldiv	;wreg free
  2022  007EA0  C001  F06D         	movff	?___lldiv,sprintf@tmpval
  2023  007EA4  C002  F06E         	movff	?___lldiv+1,sprintf@tmpval+1
  2024  007EA8  C003  F06F         	movff	?___lldiv+2,sprintf@tmpval+2
  2025  007EAC  C004  F070         	movff	?___lldiv+3,sprintf@tmpval+3
  2026                           
  2027                           ;doprnt.c: 1256: tmpval.vd %= 10;
  2028  007EB0  C06D  F001         	movff	sprintf@tmpval,___llmod@dividend
  2029  007EB4  C06E  F002         	movff	sprintf@tmpval+1,___llmod@dividend+1
  2030  007EB8  C06F  F003         	movff	sprintf@tmpval+2,___llmod@dividend+2
  2031  007EBC  C070  F004         	movff	sprintf@tmpval+3,___llmod@dividend+3
  2032  007EC0  0E0A               	movlw	10
  2033  007EC2  6E05               	movwf	___llmod@divisor^0,c
  2034  007EC4  0E00               	movlw	0
  2035  007EC6  6E06               	movwf	(___llmod@divisor+1)^0,c
  2036  007EC8  0E00               	movlw	0
  2037  007ECA  6E07               	movwf	(___llmod@divisor+2)^0,c
  2038  007ECC  0E00               	movlw	0
  2039  007ECE  6E08               	movwf	(___llmod@divisor+3)^0,c
  2040  007ED0  ECA6  F032         	call	___llmod	;wreg free
  2041  007ED4  C001  F06D         	movff	?___llmod,sprintf@tmpval
  2042  007ED8  C002  F06E         	movff	?___llmod+1,sprintf@tmpval+1
  2043  007EDC  C003  F06F         	movff	?___llmod+2,sprintf@tmpval+2
  2044  007EE0  C004  F070         	movff	?___llmod+3,sprintf@tmpval+3
  2045                           
  2046                           ;doprnt.c: 1257: ((*sp++ = ('0' + tmpval.vd)));
  2047  007EE4  0100               	movlb	0	; () banked
  2048  007EE6  516D               	movf	sprintf@tmpval& (0+255),w,b
  2049  007EE8  0F30               	addlw	48
  2050  007EEA  C03E  FFD9         	movff	sprintf@sp,fsr2l
  2051  007EEE  C03F  FFDA         	movff	sprintf@sp+1,fsr2h
  2052  007EF2  6EDF               	movwf	indf2,c
  2053                           
  2054                           ; BSR set to: 0
  2055  007EF4  4A3E               	infsnz	sprintf@sp^0,f,c
  2056  007EF6  2A3F               	incf	(sprintf@sp+1)^0,f,c
  2057                           
  2058                           ; BSR set to: 0
  2059                           ;doprnt.c: 1258: val %= dpowers[c];
  2060  007EF8  C067  F001         	movff	sprintf@val,___llmod@dividend
  2061  007EFC  C068  F002         	movff	sprintf@val+1,___llmod@dividend+1
  2062  007F00  C069  F003         	movff	sprintf@val+2,___llmod@dividend+2
  2063  007F04  C06A  F004         	movff	sprintf@val+3,___llmod@dividend+3
  2064  007F08  5176               	movf	sprintf@c& (0+255),w,b
  2065  007F0A  0D04               	mullw	4
  2066  007F0C  0E53               	movlw	low _dpowers
  2067  007F0E  24F3               	addwf	243,w,c
  2068  007F10  6EF6               	movwf	tblptrl,c
  2069  007F12  0E10               	movlw	high _dpowers
  2070  007F14  20F4               	addwfc	244,w,c
  2071  007F16  6EF7               	movwf	tblptrh,c
  2072  007F18                     	if	0	;There are less than 3 active tblptr bytes
  2073  007F18                     	endif
  2074  007F18  0009               	tblrd		*+
  2075  007F1A  CFF5 F005          	movff	tablat,___llmod@divisor
  2076  007F1E  0009               	tblrd		*+
  2077  007F20  CFF5 F006          	movff	tablat,___llmod@divisor+1
  2078  007F24  0009               	tblrd		*+
  2079  007F26  CFF5 F007          	movff	tablat,___llmod@divisor+2
  2080  007F2A  000A               	tblrd		*-
  2081  007F2C  CFF5 F008          	movff	tablat,___llmod@divisor+3
  2082  007F30  ECA6  F032         	call	___llmod	;wreg free
  2083  007F34  C001  F067         	movff	?___llmod,sprintf@val
  2084  007F38  C002  F068         	movff	?___llmod+1,sprintf@val+1
  2085  007F3C  C003  F069         	movff	?___llmod+2,sprintf@val+2
  2086  007F40  C004  F06A         	movff	?___llmod+3,sprintf@val+3
  2087  007F44                     l3275:
  2088  007F44  0100               	movlb	0	; () banked
  2089  007F46  0776               	decf	sprintf@c& (0+255),f,b
  2090  007F48  2976               	incf	sprintf@c& (0+255),w,b
  2091  007F4A  B4D8               	btfsc	status,2,c
  2092  007F4C  D00C               	goto	l3283
  2093  007F4E  D78A               	goto	l3265
  2094  007F50                     l3277:
  2095                           
  2096                           ; BSR set to: 0
  2097                           ;doprnt.c: 1262: ((*sp++ = ('0')));
  2098  007F50  C03E  FFD9         	movff	sprintf@sp,fsr2l
  2099  007F54  C03F  FFDA         	movff	sprintf@sp+1,fsr2h
  2100  007F58  0E30               	movlw	48
  2101  007F5A  6EDF               	movwf	indf2,c
  2102                           
  2103                           ; BSR set to: 0
  2104  007F5C  4A3E               	infsnz	sprintf@sp^0,f,c
  2105  007F5E  2A3F               	incf	(sprintf@sp+1)^0,f,c
  2106                           
  2107                           ; BSR set to: 0
  2108                           ;doprnt.c: 1263: prec--;
  2109  007F60  0771               	decf	sprintf@prec& (0+255),f,b
  2110  007F62  A0D8               	btfss	status,0,c
  2111  007F64  0772               	decf	(sprintf@prec+1)& (0+255),f,b
  2112  007F66                     l3283:
  2113                           
  2114                           ; BSR set to: 0
  2115  007F66  5171               	movf	sprintf@prec& (0+255),w,b
  2116  007F68  1172               	iorwf	(sprintf@prec+1)& (0+255),w,b
  2117  007F6A  B4D8               	btfsc	status,2,c
  2118  007F6C  D036               	goto	l3305
  2119  007F6E  D7F0               	goto	l3277
  2120  007F70                     l3285:
  2121                           
  2122                           ; BSR set to: 0
  2123                           ;doprnt.c: 1272: };doprnt.c: 1316: if(prec == 0 && val == 0)
  2124  007F70  5171               	movf	sprintf@prec& (0+255),w,b
  2125  007F72  1172               	iorwf	(sprintf@prec+1)& (0+255),w,b
  2126  007F74  A4D8               	btfss	status,2,c
  2127  007F76  D008               	goto	l3291
  2128                           
  2129                           ; BSR set to: 0
  2130  007F78  5167               	movf	sprintf@val& (0+255),w,b
  2131  007F7A  1168               	iorwf	(sprintf@val+1)& (0+255),w,b
  2132  007F7C  1169               	iorwf	(sprintf@val+2)& (0+255),w,b
  2133  007F7E  116A               	iorwf	(sprintf@val+3)& (0+255),w,b
  2134  007F80  A4D8               	btfss	status,2,c
  2135  007F82  D002               	goto	l3291
  2136                           
  2137                           ; BSR set to: 0
  2138                           ;doprnt.c: 1317: prec++;
  2139  007F84  4B71               	infsnz	sprintf@prec& (0+255),f,b
  2140  007F86  2B72               	incf	(sprintf@prec+1)& (0+255),f,b
  2141  007F88                     l3291:
  2142                           
  2143                           ; BSR set to: 0
  2144                           ;doprnt.c: 1365: if(c < prec)
  2145  007F88  5176               	movf	sprintf@c& (0+255),w,b
  2146  007F8A  6E45               	movwf	??_sprintf^0,c
  2147  007F8C  6A46               	clrf	(??_sprintf+1)^0,c
  2148  007F8E  5171               	movf	sprintf@prec& (0+255),w,b
  2149  007F90  5C45               	subwf	??_sprintf^0,w,c
  2150  007F92  5046               	movf	(??_sprintf+1)^0,w,c
  2151  007F94  0A80               	xorlw	128
  2152  007F96  6E47               	movwf	(??_sprintf+2)^0,c
  2153  007F98  5172               	movf	(sprintf@prec+1)& (0+255),w,b
  2154  007F9A  0A80               	xorlw	128
  2155  007F9C  5847               	subwfb	(??_sprintf+2)^0,w,c
  2156  007F9E  A0D8               	btfss	status,0,c
  2157  007FA0  D00B               	goto	u2941
  2158                           
  2159                           ; BSR set to: 0
  2160                           ;doprnt.c: 1367: else if(prec < c)
  2161                           
  2162                           ; BSR set to: 0
  2163  007FA2  5176               	movf	sprintf@c& (0+255),w,b
  2164  007FA4  6E45               	movwf	??_sprintf^0,c
  2165  007FA6  6A46               	clrf	(??_sprintf+1)^0,c
  2166  007FA8  5045               	movf	??_sprintf^0,w,c
  2167  007FAA  5D71               	subwf	sprintf@prec& (0+255),w,b
  2168  007FAC  5172               	movf	(sprintf@prec+1)& (0+255),w,b
  2169  007FAE  0A80               	xorlw	128
  2170  007FB0  6E47               	movwf	(??_sprintf+2)^0,c
  2171  007FB2  5046               	movf	(??_sprintf+1)^0,w,c
  2172  007FB4  0A80               	xorlw	128
  2173  007FB6  5847               	subwfb	(??_sprintf+2)^0,w,c
  2174  007FB8                     u2941:
  2175                           
  2176                           ; BSR set to: 0
  2177                           ;doprnt.c: 1448: {;doprnt.c: 1464: if(flag & 0x03)
  2178                           
  2179                           ; BSR set to: 0
  2180  007FB8  0E03               	movlw	3
  2181  007FBA  1565               	andwf	sprintf@flag& (0+255),w,b
  2182  007FBC  6E45               	movwf	??_sprintf^0,c
  2183  007FBE  0E00               	movlw	0
  2184  007FC0  1566               	andwf	(sprintf@flag+1)& (0+255),w,b
  2185  007FC2  6E46               	movwf	(??_sprintf+1)^0,c
  2186  007FC4  5045               	movf	??_sprintf^0,w,c
  2187  007FC6  1046               	iorwf	(??_sprintf+1)^0,w,c
  2188  007FC8  B4D8               	btfsc	status,2,c
  2189  007FCA  D007               	goto	l3305
  2190                           
  2191                           ; BSR set to: 0
  2192                           ;doprnt.c: 1465: ((*sp++ = ('-')));
  2193  007FCC  C03E  FFD9         	movff	sprintf@sp,fsr2l
  2194  007FD0  C03F  FFDA         	movff	sprintf@sp+1,fsr2h
  2195  007FD4  0E2D               	movlw	45
  2196  007FD6  6EDF               	movwf	indf2,c
  2197  007FD8  D49F               	goto	l3109
  2198  007FDA                     l3305:
  2199                           
  2200                           ; BSR set to: 0
  2201  007FDA  C040  FFF6         	movff	sprintf@f,tblptrl
  2202  007FDE  C041  FFF7         	movff	sprintf@f+1,tblptrh
  2203  007FE2  4A40               	infsnz	sprintf@f^0,f,c
  2204  007FE4  2A41               	incf	(sprintf@f+1)^0,f,c
  2205  007FE6                     	if	0	;tblptru may be non-zero
  2206  007FE6                     	endif
  2207  007FE6                     	if	0	;tblptru may be non-zero
  2208  007FE6                     	endif
  2209  007FE6  0008               	tblrd		*
  2210  007FE8  CFF5 F076          	movff	tablat,sprintf@c
  2211  007FEC  5176               	movf	sprintf@c& (0+255),w,b
  2212  007FEE  A4D8               	btfss	status,2,c
  2213  007FF0  D489               	goto	l3105
  2214  007FF2                     u2960:
  2215                           
  2216                           ; BSR set to: 0
  2217                           ;doprnt.c: 1564: *sp = 0;
  2218  007FF2  C03E  FFD9         	movff	sprintf@sp,fsr2l
  2219  007FF6  C03F  FFDA         	movff	sprintf@sp+1,fsr2h
  2220  007FFA  0E00               	movlw	0
  2221  007FFC  6EDF               	movwf	indf2,c
  2222                           
  2223                           ; BSR set to: 0
  2224  007FFE  0012               	return		;funcret
  2225  008000                     __end_of_sprintf:
  2226                           	opt callstack 0
  2227                           
  2228 ;; *************** function _scale *****************
  2229 ;; Defined at:
  2230 ;;		line 433 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c"
  2231 ;; Parameters:    Size  Location     Type
  2232 ;;  scl             1    wreg     char 
  2233 ;; Auto vars:     Size  Location     Type
  2234 ;;  scl             1   39[COMRAM] char 
  2235 ;; Return value:  Size  Location     Type
  2236 ;;                  3   33[COMRAM] char 
  2237 ;; Registers used:
  2238 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2239 ;; Tracked objects:
  2240 ;;		On entry : 0/0
  2241 ;;		On exit  : 0/0
  2242 ;;		Unchanged: 0/0
  2243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2244 ;;      Params:         3       0       0       0       0       0       0       0       0
  2245 ;;      Locals:         4       0       0       0       0       0       0       0       0
  2246 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2247 ;;      Totals:         7       0       0       0       0       0       0       0       0
  2248 ;;Total ram usage:        7 bytes
  2249 ;; Hardware stack levels used:    1
  2250 ;; Hardware stack levels required when called:    2
  2251 ;; This function calls:
  2252 ;;		___awdiv
  2253 ;;		___awmod
  2254 ;;		___ftmul
  2255 ;; This function is called by:
  2256 ;;		_sprintf
  2257 ;; This function uses a non-reentrant model
  2258 ;;
  2259                           
  2260                           	psect	text2
  2261  0071E8                     __ptext2:
  2262                           	opt callstack 0
  2263  0071E8                     _scale:
  2264                           	opt callstack 27
  2265                           
  2266                           ; BSR set to: 0
  2267                           ;incstack = 0
  2268                           ;scale@scl stored from wreg
  2269  0071E8  6E28               	movwf	scale@scl^0,c
  2270                           
  2271                           ;doprnt.c: 436: if(scl < 0) {
  2272  0071EA  AE28               	btfss	scale@scl^0,7,c
  2273  0071EC  D0D9               	goto	l2801
  2274                           
  2275                           ;doprnt.c: 437: scl = -scl;
  2276  0071EE  6C28               	negf	scale@scl^0,c
  2277                           
  2278                           ;doprnt.c: 438: if(scl>=110)
  2279  0071F0  5028               	movf	scale@scl^0,w,c
  2280  0071F2  0A80               	xorlw	128
  2281  0071F4  0F12               	addlw	-238
  2282  0071F6  A0D8               	btfss	status,0,c
  2283  0071F8  D079               	goto	l2791
  2284                           
  2285                           ;doprnt.c: 439: return _npowers_[(unsigned char)(scl/100+18)] * _npowers_[(unsigned char
      +                          )((scl%100)/10+9)] * _npowers_[(unsigned char)(scl%10)];
  2286  0071FA  0E00               	movlw	0
  2287  0071FC  6E0A               	movwf	(___awdiv@divisor+1)^0,c
  2288  0071FE  0E0A               	movlw	10
  2289  007200  6E09               	movwf	___awdiv@divisor^0,c
  2290  007202  0E00               	movlw	0
  2291  007204  6E04               	movwf	(___awmod@divisor+1)^0,c
  2292  007206  0E64               	movlw	100
  2293  007208  6E03               	movwf	___awmod@divisor^0,c
  2294  00720A  5028               	movf	scale@scl^0,w,c
  2295  00720C  6E01               	movwf	___awmod@dividend^0,c
  2296  00720E  6A02               	clrf	(___awmod@dividend+1)^0,c
  2297  007210  BE01               	btfsc	___awmod@dividend^0,7,c
  2298  007212  0602               	decf	(___awmod@dividend+1)^0,f,c
  2299  007214  ECD9  F032         	call	___awmod	;wreg free
  2300  007218  C001  F007         	movff	?___awmod,___awdiv@dividend
  2301  00721C  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  2302  007220  EC8C  F033         	call	___awdiv	;wreg free
  2303  007224  0E09               	movlw	9
  2304  007226  2607               	addwf	?___awdiv^0,f,c
  2305  007228  5007               	movf	?___awdiv^0,w,c
  2306  00722A  0D03               	mullw	3
  2307  00722C  0E2C               	movlw	low __npowers_
  2308  00722E  24F3               	addwf	243,w,c
  2309  007230  6EF6               	movwf	tblptrl,c
  2310  007232  0E10               	movlw	high __npowers_
  2311  007234  20F4               	addwfc	244,w,c
  2312  007236  6EF7               	movwf	tblptrh,c
  2313  007238                     	if	0	;There are less than 3 active tblptr bytes
  2314  007238                     	endif
  2315  007238  0009               	tblrd		*+
  2316  00723A  CFF5 F016          	movff	tablat,___ftmul@f2
  2317  00723E  0009               	tblrd		*+
  2318  007240  CFF5 F017          	movff	tablat,___ftmul@f2+1
  2319  007244  000A               	tblrd		*-
  2320  007246  CFF5 F018          	movff	tablat,___ftmul@f2+2
  2321  00724A  0E00               	movlw	0
  2322  00724C  6E0A               	movwf	(___awdiv@divisor+1)^0,c
  2323  00724E  0E64               	movlw	100
  2324  007250  6E09               	movwf	___awdiv@divisor^0,c
  2325  007252  5028               	movf	scale@scl^0,w,c
  2326  007254  6E07               	movwf	___awdiv@dividend^0,c
  2327  007256  6A08               	clrf	(___awdiv@dividend+1)^0,c
  2328  007258  BE07               	btfsc	___awdiv@dividend^0,7,c
  2329  00725A  0608               	decf	(___awdiv@dividend+1)^0,f,c
  2330  00725C  EC8C  F033         	call	___awdiv	;wreg free
  2331  007260  0E12               	movlw	18
  2332  007262  2607               	addwf	?___awdiv^0,f,c
  2333  007264  5007               	movf	?___awdiv^0,w,c
  2334  007266  0D03               	mullw	3
  2335  007268  0E2C               	movlw	low __npowers_
  2336  00726A  24F3               	addwf	243,w,c
  2337  00726C  6EF6               	movwf	tblptrl,c
  2338  00726E  0E10               	movlw	high __npowers_
  2339  007270  20F4               	addwfc	244,w,c
  2340  007272  6EF7               	movwf	tblptrh,c
  2341  007274                     	if	0	;There are less than 3 active tblptr bytes
  2342  007274                     	endif
  2343  007274  0009               	tblrd		*+
  2344  007276  CFF5 F013          	movff	tablat,___ftmul@f1
  2345  00727A  0009               	tblrd		*+
  2346  00727C  CFF5 F014          	movff	tablat,___ftmul@f1+1
  2347  007280  000A               	tblrd		*-
  2348  007282  CFF5 F015          	movff	tablat,___ftmul@f1+2
  2349  007286  EC7B  F035         	call	___ftmul	;wreg free
  2350  00728A  C013  F025         	movff	?___ftmul,_scale$1074
  2351  00728E  C014  F026         	movff	?___ftmul+1,_scale$1074+1
  2352  007292  C015  F027         	movff	?___ftmul+2,_scale$1074+2
  2353                           
  2354                           ;doprnt.c: 439: return _npowers_[(unsigned char)(scl/100+18)] * _npowers_[(unsigned char
      +                          )((scl%100)/10+9)] * _npowers_[(unsigned char)(scl%10)];
  2355  007296  C025  F013         	movff	_scale$1074,___ftmul@f1
  2356  00729A  C026  F014         	movff	_scale$1074+1,___ftmul@f1+1
  2357  00729E  C027  F015         	movff	_scale$1074+2,___ftmul@f1+2
  2358  0072A2  0E00               	movlw	0
  2359  0072A4  6E04               	movwf	(___awmod@divisor+1)^0,c
  2360  0072A6  0E0A               	movlw	10
  2361  0072A8  6E03               	movwf	___awmod@divisor^0,c
  2362  0072AA  5028               	movf	scale@scl^0,w,c
  2363  0072AC  6E01               	movwf	___awmod@dividend^0,c
  2364  0072AE  6A02               	clrf	(___awmod@dividend+1)^0,c
  2365  0072B0  BE01               	btfsc	___awmod@dividend^0,7,c
  2366  0072B2  0602               	decf	(___awmod@dividend+1)^0,f,c
  2367  0072B4  ECD9  F032         	call	___awmod	;wreg free
  2368  0072B8  5001               	movf	?___awmod^0,w,c
  2369  0072BA  0D03               	mullw	3
  2370  0072BC  0E2C               	movlw	low __npowers_
  2371  0072BE  24F3               	addwf	243,w,c
  2372  0072C0  6EF6               	movwf	tblptrl,c
  2373  0072C2  0E10               	movlw	high __npowers_
  2374  0072C4  20F4               	addwfc	244,w,c
  2375  0072C6  6EF7               	movwf	tblptrh,c
  2376  0072C8                     	if	0	;There are less than 3 active tblptr bytes
  2377  0072C8                     	endif
  2378  0072C8  0009               	tblrd		*+
  2379  0072CA  CFF5 F016          	movff	tablat,___ftmul@f2
  2380  0072CE  0009               	tblrd		*+
  2381  0072D0  CFF5 F017          	movff	tablat,___ftmul@f2+1
  2382  0072D4  000A               	tblrd		*-
  2383  0072D6  CFF5 F018          	movff	tablat,___ftmul@f2+2
  2384  0072DA  EC7B  F035         	call	___ftmul	;wreg free
  2385  0072DE  C013  F022         	movff	?___ftmul,?_scale
  2386  0072E2  C014  F023         	movff	?___ftmul+1,?_scale+1
  2387  0072E6  C015  F024         	movff	?___ftmul+2,?_scale+2
  2388  0072EA  0012               	return	
  2389  0072EC                     l2791:
  2390                           
  2391                           ;doprnt.c: 440: else if(scl > 10)
  2392  0072EC  5028               	movf	scale@scl^0,w,c
  2393  0072EE  0A80               	xorlw	128
  2394  0072F0  0F75               	addlw	-139
  2395  0072F2  A0D8               	btfss	status,0,c
  2396  0072F4  D043               	goto	l2797
  2397                           
  2398                           ;doprnt.c: 441: return _npowers_[(unsigned char)(scl/10+9)] * _npowers_[(unsigned char)(
      +                          scl%10)];
  2399  0072F6  0E00               	movlw	0
  2400  0072F8  6E0A               	movwf	(___awdiv@divisor+1)^0,c
  2401  0072FA  0E0A               	movlw	10
  2402  0072FC  6E09               	movwf	___awdiv@divisor^0,c
  2403  0072FE  5028               	movf	scale@scl^0,w,c
  2404  007300  6E07               	movwf	___awdiv@dividend^0,c
  2405  007302  6A08               	clrf	(___awdiv@dividend+1)^0,c
  2406  007304  BE07               	btfsc	___awdiv@dividend^0,7,c
  2407  007306  0608               	decf	(___awdiv@dividend+1)^0,f,c
  2408  007308  EC8C  F033         	call	___awdiv	;wreg free
  2409  00730C  0E09               	movlw	9
  2410  00730E  2607               	addwf	?___awdiv^0,f,c
  2411  007310  5007               	movf	?___awdiv^0,w,c
  2412  007312  0D03               	mullw	3
  2413  007314  0E2C               	movlw	low __npowers_
  2414  007316  24F3               	addwf	243,w,c
  2415  007318  6EF6               	movwf	tblptrl,c
  2416  00731A  0E10               	movlw	high __npowers_
  2417  00731C  20F4               	addwfc	244,w,c
  2418  00731E  6EF7               	movwf	tblptrh,c
  2419  007320                     	if	0	;There are less than 3 active tblptr bytes
  2420  007320                     	endif
  2421  007320  0009               	tblrd		*+
  2422  007322  CFF5 F013          	movff	tablat,___ftmul@f1
  2423  007326  0009               	tblrd		*+
  2424  007328  CFF5 F014          	movff	tablat,___ftmul@f1+1
  2425  00732C  000A               	tblrd		*-
  2426  00732E  CFF5 F015          	movff	tablat,___ftmul@f1+2
  2427  007332  0E00               	movlw	0
  2428  007334  6E04               	movwf	(___awmod@divisor+1)^0,c
  2429  007336  0E0A               	movlw	10
  2430  007338  6E03               	movwf	___awmod@divisor^0,c
  2431  00733A  5028               	movf	scale@scl^0,w,c
  2432  00733C  6E01               	movwf	___awmod@dividend^0,c
  2433  00733E  6A02               	clrf	(___awmod@dividend+1)^0,c
  2434  007340  BE01               	btfsc	___awmod@dividend^0,7,c
  2435  007342  0602               	decf	(___awmod@dividend+1)^0,f,c
  2436  007344  ECD9  F032         	call	___awmod	;wreg free
  2437  007348  5001               	movf	?___awmod^0,w,c
  2438  00734A  0D03               	mullw	3
  2439  00734C  0E2C               	movlw	low __npowers_
  2440  00734E  24F3               	addwf	243,w,c
  2441  007350  6EF6               	movwf	tblptrl,c
  2442  007352  0E10               	movlw	high __npowers_
  2443  007354  20F4               	addwfc	244,w,c
  2444  007356  6EF7               	movwf	tblptrh,c
  2445  007358                     	if	0	;There are less than 3 active tblptr bytes
  2446  007358                     	endif
  2447  007358  0009               	tblrd		*+
  2448  00735A  CFF5 F016          	movff	tablat,___ftmul@f2
  2449  00735E  0009               	tblrd		*+
  2450  007360  CFF5 F017          	movff	tablat,___ftmul@f2+1
  2451  007364  000A               	tblrd		*-
  2452  007366  CFF5 F018          	movff	tablat,___ftmul@f2+2
  2453  00736A  EC7B  F035         	call	___ftmul	;wreg free
  2454  00736E  C013  F022         	movff	?___ftmul,?_scale
  2455  007372  C014  F023         	movff	?___ftmul+1,?_scale+1
  2456  007376  C015  F024         	movff	?___ftmul+2,?_scale+2
  2457  00737A  0012               	return	
  2458  00737C                     l2797:
  2459                           
  2460                           ;doprnt.c: 442: return _npowers_[(unsigned char)scl];
  2461  00737C  5028               	movf	scale@scl^0,w,c
  2462  00737E  0D03               	mullw	3
  2463  007380  0E2C               	movlw	low __npowers_
  2464  007382  24F3               	addwf	243,w,c
  2465  007384  6EF6               	movwf	tblptrl,c
  2466  007386  0E10               	movlw	high __npowers_
  2467  007388  20F4               	addwfc	244,w,c
  2468  00738A  6EF7               	movwf	tblptrh,c
  2469  00738C                     	if	0	;There are less than 3 active tblptr bytes
  2470  00738C                     	endif
  2471  00738C  0009               	tblrd		*+
  2472  00738E  CFF5 F022          	movff	tablat,?_scale
  2473  007392  0009               	tblrd		*+
  2474  007394  CFF5 F023          	movff	tablat,?_scale+1
  2475  007398  000A               	tblrd		*-
  2476  00739A  CFF5 F024          	movff	tablat,?_scale+2
  2477  00739E  0012               	return	
  2478  0073A0                     l2801:
  2479                           
  2480                           ;doprnt.c: 443: };doprnt.c: 444: if(scl>=110)
  2481  0073A0  5028               	movf	scale@scl^0,w,c
  2482  0073A2  0A80               	xorlw	128
  2483  0073A4  0F12               	addlw	-238
  2484  0073A6  A0D8               	btfss	status,0,c
  2485  0073A8  D079               	goto	l2809
  2486                           
  2487                           ;doprnt.c: 445: return _powers_[(unsigned char)(scl/100+18)] * _powers_[(unsigned char)(
      +                          (scl%100)/10+9)] * _powers_[(unsigned char)(scl%10)];
  2488  0073AA  0E00               	movlw	0
  2489  0073AC  6E0A               	movwf	(___awdiv@divisor+1)^0,c
  2490  0073AE  0E0A               	movlw	10
  2491  0073B0  6E09               	movwf	___awdiv@divisor^0,c
  2492  0073B2  0E00               	movlw	0
  2493  0073B4  6E04               	movwf	(___awmod@divisor+1)^0,c
  2494  0073B6  0E64               	movlw	100
  2495  0073B8  6E03               	movwf	___awmod@divisor^0,c
  2496  0073BA  5028               	movf	scale@scl^0,w,c
  2497  0073BC  6E01               	movwf	___awmod@dividend^0,c
  2498  0073BE  6A02               	clrf	(___awmod@dividend+1)^0,c
  2499  0073C0  BE01               	btfsc	___awmod@dividend^0,7,c
  2500  0073C2  0602               	decf	(___awmod@dividend+1)^0,f,c
  2501  0073C4  ECD9  F032         	call	___awmod	;wreg free
  2502  0073C8  C001  F007         	movff	?___awmod,___awdiv@dividend
  2503  0073CC  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  2504  0073D0  EC8C  F033         	call	___awdiv	;wreg free
  2505  0073D4  0E09               	movlw	9
  2506  0073D6  2607               	addwf	?___awdiv^0,f,c
  2507  0073D8  5007               	movf	?___awdiv^0,w,c
  2508  0073DA  0D03               	mullw	3
  2509  0073DC  0E05               	movlw	low __powers_
  2510  0073DE  24F3               	addwf	243,w,c
  2511  0073E0  6EF6               	movwf	tblptrl,c
  2512  0073E2  0E10               	movlw	high __powers_
  2513  0073E4  20F4               	addwfc	244,w,c
  2514  0073E6  6EF7               	movwf	tblptrh,c
  2515  0073E8                     	if	0	;There are less than 3 active tblptr bytes
  2516  0073E8                     	endif
  2517  0073E8  0009               	tblrd		*+
  2518  0073EA  CFF5 F016          	movff	tablat,___ftmul@f2
  2519  0073EE  0009               	tblrd		*+
  2520  0073F0  CFF5 F017          	movff	tablat,___ftmul@f2+1
  2521  0073F4  000A               	tblrd		*-
  2522  0073F6  CFF5 F018          	movff	tablat,___ftmul@f2+2
  2523  0073FA  0E00               	movlw	0
  2524  0073FC  6E0A               	movwf	(___awdiv@divisor+1)^0,c
  2525  0073FE  0E64               	movlw	100
  2526  007400  6E09               	movwf	___awdiv@divisor^0,c
  2527  007402  5028               	movf	scale@scl^0,w,c
  2528  007404  6E07               	movwf	___awdiv@dividend^0,c
  2529  007406  6A08               	clrf	(___awdiv@dividend+1)^0,c
  2530  007408  BE07               	btfsc	___awdiv@dividend^0,7,c
  2531  00740A  0608               	decf	(___awdiv@dividend+1)^0,f,c
  2532  00740C  EC8C  F033         	call	___awdiv	;wreg free
  2533  007410  0E12               	movlw	18
  2534  007412  2607               	addwf	?___awdiv^0,f,c
  2535  007414  5007               	movf	?___awdiv^0,w,c
  2536  007416  0D03               	mullw	3
  2537  007418  0E05               	movlw	low __powers_
  2538  00741A  24F3               	addwf	243,w,c
  2539  00741C  6EF6               	movwf	tblptrl,c
  2540  00741E  0E10               	movlw	high __powers_
  2541  007420  20F4               	addwfc	244,w,c
  2542  007422  6EF7               	movwf	tblptrh,c
  2543  007424                     	if	0	;There are less than 3 active tblptr bytes
  2544  007424                     	endif
  2545  007424  0009               	tblrd		*+
  2546  007426  CFF5 F013          	movff	tablat,___ftmul@f1
  2547  00742A  0009               	tblrd		*+
  2548  00742C  CFF5 F014          	movff	tablat,___ftmul@f1+1
  2549  007430  000A               	tblrd		*-
  2550  007432  CFF5 F015          	movff	tablat,___ftmul@f1+2
  2551  007436  EC7B  F035         	call	___ftmul	;wreg free
  2552  00743A  C013  F025         	movff	?___ftmul,_scale$1074
  2553  00743E  C014  F026         	movff	?___ftmul+1,_scale$1074+1
  2554  007442  C015  F027         	movff	?___ftmul+2,_scale$1074+2
  2555                           
  2556                           ;doprnt.c: 445: return _powers_[(unsigned char)(scl/100+18)] * _powers_[(unsigned char)(
      +                          (scl%100)/10+9)] * _powers_[(unsigned char)(scl%10)];
  2557  007446  C025  F013         	movff	_scale$1074,___ftmul@f1
  2558  00744A  C026  F014         	movff	_scale$1074+1,___ftmul@f1+1
  2559  00744E  C027  F015         	movff	_scale$1074+2,___ftmul@f1+2
  2560  007452  0E00               	movlw	0
  2561  007454  6E04               	movwf	(___awmod@divisor+1)^0,c
  2562  007456  0E0A               	movlw	10
  2563  007458  6E03               	movwf	___awmod@divisor^0,c
  2564  00745A  5028               	movf	scale@scl^0,w,c
  2565  00745C  6E01               	movwf	___awmod@dividend^0,c
  2566  00745E  6A02               	clrf	(___awmod@dividend+1)^0,c
  2567  007460  BE01               	btfsc	___awmod@dividend^0,7,c
  2568  007462  0602               	decf	(___awmod@dividend+1)^0,f,c
  2569  007464  ECD9  F032         	call	___awmod	;wreg free
  2570  007468  5001               	movf	?___awmod^0,w,c
  2571  00746A  0D03               	mullw	3
  2572  00746C  0E05               	movlw	low __powers_
  2573  00746E  24F3               	addwf	243,w,c
  2574  007470  6EF6               	movwf	tblptrl,c
  2575  007472  0E10               	movlw	high __powers_
  2576  007474  20F4               	addwfc	244,w,c
  2577  007476  6EF7               	movwf	tblptrh,c
  2578  007478                     	if	0	;There are less than 3 active tblptr bytes
  2579  007478                     	endif
  2580  007478  0009               	tblrd		*+
  2581  00747A  CFF5 F016          	movff	tablat,___ftmul@f2
  2582  00747E  0009               	tblrd		*+
  2583  007480  CFF5 F017          	movff	tablat,___ftmul@f2+1
  2584  007484  000A               	tblrd		*-
  2585  007486  CFF5 F018          	movff	tablat,___ftmul@f2+2
  2586  00748A  EC7B  F035         	call	___ftmul	;wreg free
  2587  00748E  C013  F022         	movff	?___ftmul,?_scale
  2588  007492  C014  F023         	movff	?___ftmul+1,?_scale+1
  2589  007496  C015  F024         	movff	?___ftmul+2,?_scale+2
  2590  00749A  0012               	return	
  2591  00749C                     l2809:
  2592                           
  2593                           ;doprnt.c: 446: else if(scl > 10)
  2594  00749C  5028               	movf	scale@scl^0,w,c
  2595  00749E  0A80               	xorlw	128
  2596  0074A0  0F75               	addlw	-139
  2597  0074A2  A0D8               	btfss	status,0,c
  2598  0074A4  D043               	goto	l2815
  2599                           
  2600                           ;doprnt.c: 447: return _powers_[(unsigned char)(scl/10+9)] * _powers_[(unsigned char)(sc
      +                          l%10)];
  2601  0074A6  0E00               	movlw	0
  2602  0074A8  6E0A               	movwf	(___awdiv@divisor+1)^0,c
  2603  0074AA  0E0A               	movlw	10
  2604  0074AC  6E09               	movwf	___awdiv@divisor^0,c
  2605  0074AE  5028               	movf	scale@scl^0,w,c
  2606  0074B0  6E07               	movwf	___awdiv@dividend^0,c
  2607  0074B2  6A08               	clrf	(___awdiv@dividend+1)^0,c
  2608  0074B4  BE07               	btfsc	___awdiv@dividend^0,7,c
  2609  0074B6  0608               	decf	(___awdiv@dividend+1)^0,f,c
  2610  0074B8  EC8C  F033         	call	___awdiv	;wreg free
  2611  0074BC  0E09               	movlw	9
  2612  0074BE  2607               	addwf	?___awdiv^0,f,c
  2613  0074C0  5007               	movf	?___awdiv^0,w,c
  2614  0074C2  0D03               	mullw	3
  2615  0074C4  0E05               	movlw	low __powers_
  2616  0074C6  24F3               	addwf	243,w,c
  2617  0074C8  6EF6               	movwf	tblptrl,c
  2618  0074CA  0E10               	movlw	high __powers_
  2619  0074CC  20F4               	addwfc	244,w,c
  2620  0074CE  6EF7               	movwf	tblptrh,c
  2621  0074D0                     	if	0	;There are less than 3 active tblptr bytes
  2622  0074D0                     	endif
  2623  0074D0  0009               	tblrd		*+
  2624  0074D2  CFF5 F013          	movff	tablat,___ftmul@f1
  2625  0074D6  0009               	tblrd		*+
  2626  0074D8  CFF5 F014          	movff	tablat,___ftmul@f1+1
  2627  0074DC  000A               	tblrd		*-
  2628  0074DE  CFF5 F015          	movff	tablat,___ftmul@f1+2
  2629  0074E2  0E00               	movlw	0
  2630  0074E4  6E04               	movwf	(___awmod@divisor+1)^0,c
  2631  0074E6  0E0A               	movlw	10
  2632  0074E8  6E03               	movwf	___awmod@divisor^0,c
  2633  0074EA  5028               	movf	scale@scl^0,w,c
  2634  0074EC  6E01               	movwf	___awmod@dividend^0,c
  2635  0074EE  6A02               	clrf	(___awmod@dividend+1)^0,c
  2636  0074F0  BE01               	btfsc	___awmod@dividend^0,7,c
  2637  0074F2  0602               	decf	(___awmod@dividend+1)^0,f,c
  2638  0074F4  ECD9  F032         	call	___awmod	;wreg free
  2639  0074F8  5001               	movf	?___awmod^0,w,c
  2640  0074FA  0D03               	mullw	3
  2641  0074FC  0E05               	movlw	low __powers_
  2642  0074FE  24F3               	addwf	243,w,c
  2643  007500  6EF6               	movwf	tblptrl,c
  2644  007502  0E10               	movlw	high __powers_
  2645  007504  20F4               	addwfc	244,w,c
  2646  007506  6EF7               	movwf	tblptrh,c
  2647  007508                     	if	0	;There are less than 3 active tblptr bytes
  2648  007508                     	endif
  2649  007508  0009               	tblrd		*+
  2650  00750A  CFF5 F016          	movff	tablat,___ftmul@f2
  2651  00750E  0009               	tblrd		*+
  2652  007510  CFF5 F017          	movff	tablat,___ftmul@f2+1
  2653  007514  000A               	tblrd		*-
  2654  007516  CFF5 F018          	movff	tablat,___ftmul@f2+2
  2655  00751A  EC7B  F035         	call	___ftmul	;wreg free
  2656  00751E  C013  F022         	movff	?___ftmul,?_scale
  2657  007522  C014  F023         	movff	?___ftmul+1,?_scale+1
  2658  007526  C015  F024         	movff	?___ftmul+2,?_scale+2
  2659  00752A  0012               	return	
  2660  00752C                     l2815:
  2661                           
  2662                           ;doprnt.c: 448: return _powers_[(unsigned char)scl];
  2663  00752C  5028               	movf	scale@scl^0,w,c
  2664  00752E  0D03               	mullw	3
  2665  007530  0E05               	movlw	low __powers_
  2666  007532  24F3               	addwf	243,w,c
  2667  007534  6EF6               	movwf	tblptrl,c
  2668  007536  0E10               	movlw	high __powers_
  2669  007538  20F4               	addwfc	244,w,c
  2670  00753A  6EF7               	movwf	tblptrh,c
  2671  00753C                     	if	0	;There are less than 3 active tblptr bytes
  2672  00753C                     	endif
  2673  00753C  0009               	tblrd		*+
  2674  00753E  CFF5 F022          	movff	tablat,?_scale
  2675  007542  0009               	tblrd		*+
  2676  007544  CFF5 F023          	movff	tablat,?_scale+1
  2677  007548  000A               	tblrd		*-
  2678  00754A  CFF5 F024          	movff	tablat,?_scale+2
  2679  00754E  0012               	return		;funcret
  2680  007550                     __end_of_scale:
  2681                           	opt callstack 0
  2682                           
  2683 ;; *************** function ___awmod *****************
  2684 ;; Defined at:
  2685 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\awmod.c"
  2686 ;; Parameters:    Size  Location     Type
  2687 ;;  dividend        2    0[COMRAM] int 
  2688 ;;  divisor         2    2[COMRAM] int 
  2689 ;; Auto vars:     Size  Location     Type
  2690 ;;  sign            1    5[COMRAM] unsigned char 
  2691 ;;  counter         1    4[COMRAM] unsigned char 
  2692 ;; Return value:  Size  Location     Type
  2693 ;;                  2    0[COMRAM] int 
  2694 ;; Registers used:
  2695 ;;		wreg, status,2, status,0
  2696 ;; Tracked objects:
  2697 ;;		On entry : 0/0
  2698 ;;		On exit  : 0/0
  2699 ;;		Unchanged: 0/0
  2700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2701 ;;      Params:         4       0       0       0       0       0       0       0       0
  2702 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2703 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2704 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2705 ;;Total ram usage:        6 bytes
  2706 ;; Hardware stack levels used:    1
  2707 ;; This function calls:
  2708 ;;		Nothing
  2709 ;; This function is called by:
  2710 ;;		_scale
  2711 ;; This function uses a non-reentrant model
  2712 ;;
  2713                           
  2714                           	psect	text3
  2715  0065B2                     __ptext3:
  2716                           	opt callstack 0
  2717  0065B2                     ___awmod:
  2718                           	opt callstack 28
  2719                           
  2720                           ;incstack = 0
  2721  0065B2  0E00               	movlw	0
  2722  0065B4  6E06               	movwf	___awmod@sign^0,c
  2723  0065B6  AE02               	btfss	(___awmod@dividend+1)^0,7,c
  2724  0065B8  D006               	goto	l2605
  2725  0065BA  6C01               	negf	___awmod@dividend^0,c
  2726  0065BC  1E02               	comf	(___awmod@dividend+1)^0,f,c
  2727  0065BE  B0D8               	btfsc	status,0,c
  2728  0065C0  2A02               	incf	(___awmod@dividend+1)^0,f,c
  2729  0065C2  0E01               	movlw	1
  2730  0065C4  6E06               	movwf	___awmod@sign^0,c
  2731  0065C6                     l2605:
  2732  0065C6  AE04               	btfss	(___awmod@divisor+1)^0,7,c
  2733  0065C8  D004               	goto	l2609
  2734  0065CA  6C03               	negf	___awmod@divisor^0,c
  2735  0065CC  1E04               	comf	(___awmod@divisor+1)^0,f,c
  2736  0065CE  B0D8               	btfsc	status,0,c
  2737  0065D0  2A04               	incf	(___awmod@divisor+1)^0,f,c
  2738  0065D2                     l2609:
  2739  0065D2  5003               	movf	___awmod@divisor^0,w,c
  2740  0065D4  1004               	iorwf	(___awmod@divisor+1)^0,w,c
  2741  0065D6  B4D8               	btfsc	status,2,c
  2742  0065D8  D018               	goto	l2625
  2743  0065DA  0E01               	movlw	1
  2744  0065DC  6E05               	movwf	___awmod@counter^0,c
  2745  0065DE  D004               	goto	l2615
  2746  0065E0                     l2613:
  2747  0065E0  90D8               	bcf	status,0,c
  2748  0065E2  3603               	rlcf	___awmod@divisor^0,f,c
  2749  0065E4  3604               	rlcf	(___awmod@divisor+1)^0,f,c
  2750  0065E6  2A05               	incf	___awmod@counter^0,f,c
  2751  0065E8                     l2615:
  2752  0065E8  AE04               	btfss	(___awmod@divisor+1)^0,7,c
  2753  0065EA  D7FA               	goto	l2613
  2754  0065EC                     u1990:
  2755  0065EC  5003               	movf	___awmod@divisor^0,w,c
  2756  0065EE  5C01               	subwf	___awmod@dividend^0,w,c
  2757  0065F0  5004               	movf	(___awmod@divisor+1)^0,w,c
  2758  0065F2  5802               	subwfb	(___awmod@dividend+1)^0,w,c
  2759  0065F4  A0D8               	btfss	status,0,c
  2760  0065F6  D004               	goto	l2621
  2761  0065F8  5003               	movf	___awmod@divisor^0,w,c
  2762  0065FA  5E01               	subwf	___awmod@dividend^0,f,c
  2763  0065FC  5004               	movf	(___awmod@divisor+1)^0,w,c
  2764  0065FE  5A02               	subwfb	(___awmod@dividend+1)^0,f,c
  2765  006600                     l2621:
  2766  006600  90D8               	bcf	status,0,c
  2767  006602  3204               	rrcf	(___awmod@divisor+1)^0,f,c
  2768  006604  3203               	rrcf	___awmod@divisor^0,f,c
  2769  006606  2E05               	decfsz	___awmod@counter^0,f,c
  2770  006608  D7F1               	goto	u1990
  2771  00660A                     l2625:
  2772  00660A  5006               	movf	___awmod@sign^0,w,c
  2773  00660C  B4D8               	btfsc	status,2,c
  2774  00660E  D004               	goto	l2629
  2775  006610  6C01               	negf	___awmod@dividend^0,c
  2776  006612  1E02               	comf	(___awmod@dividend+1)^0,f,c
  2777  006614  B0D8               	btfsc	status,0,c
  2778  006616  2A02               	incf	(___awmod@dividend+1)^0,f,c
  2779  006618                     l2629:
  2780  006618  C001  F001         	movff	___awmod@dividend,?___awmod
  2781  00661C  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  2782  006620  0012               	return		;funcret
  2783  006622                     __end_of___awmod:
  2784                           	opt callstack 0
  2785                           
  2786 ;; *************** function ___awdiv *****************
  2787 ;; Defined at:
  2788 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\awdiv.c"
  2789 ;; Parameters:    Size  Location     Type
  2790 ;;  dividend        2    6[COMRAM] int 
  2791 ;;  divisor         2    8[COMRAM] int 
  2792 ;; Auto vars:     Size  Location     Type
  2793 ;;  quotient        2   12[COMRAM] int 
  2794 ;;  sign            1   11[COMRAM] unsigned char 
  2795 ;;  counter         1   10[COMRAM] unsigned char 
  2796 ;; Return value:  Size  Location     Type
  2797 ;;                  2    6[COMRAM] int 
  2798 ;; Registers used:
  2799 ;;		wreg, status,2, status,0
  2800 ;; Tracked objects:
  2801 ;;		On entry : 0/0
  2802 ;;		On exit  : 0/0
  2803 ;;		Unchanged: 0/0
  2804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2805 ;;      Params:         4       0       0       0       0       0       0       0       0
  2806 ;;      Locals:         4       0       0       0       0       0       0       0       0
  2807 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2808 ;;      Totals:         8       0       0       0       0       0       0       0       0
  2809 ;;Total ram usage:        8 bytes
  2810 ;; Hardware stack levels used:    1
  2811 ;; This function calls:
  2812 ;;		Nothing
  2813 ;; This function is called by:
  2814 ;;		_scale
  2815 ;;		_sprintf
  2816 ;; This function uses a non-reentrant model
  2817 ;;
  2818                           
  2819                           	psect	text4
  2820  006718                     __ptext4:
  2821                           	opt callstack 0
  2822  006718                     ___awdiv:
  2823                           	opt callstack 28
  2824                           
  2825                           ;incstack = 0
  2826  006718  0E00               	movlw	0
  2827  00671A  6E0C               	movwf	___awdiv@sign^0,c
  2828  00671C  AE0A               	btfss	(___awdiv@divisor+1)^0,7,c
  2829  00671E  D006               	goto	l2561
  2830  006720  6C09               	negf	___awdiv@divisor^0,c
  2831  006722  1E0A               	comf	(___awdiv@divisor+1)^0,f,c
  2832  006724  B0D8               	btfsc	status,0,c
  2833  006726  2A0A               	incf	(___awdiv@divisor+1)^0,f,c
  2834  006728  0E01               	movlw	1
  2835  00672A  6E0C               	movwf	___awdiv@sign^0,c
  2836  00672C                     l2561:
  2837  00672C  AE08               	btfss	(___awdiv@dividend+1)^0,7,c
  2838  00672E  D006               	goto	l2567
  2839  006730  6C07               	negf	___awdiv@dividend^0,c
  2840  006732  1E08               	comf	(___awdiv@dividend+1)^0,f,c
  2841  006734  B0D8               	btfsc	status,0,c
  2842  006736  2A08               	incf	(___awdiv@dividend+1)^0,f,c
  2843  006738  0E01               	movlw	1
  2844  00673A  1A0C               	xorwf	___awdiv@sign^0,f,c
  2845  00673C                     l2567:
  2846  00673C  0E00               	movlw	0
  2847  00673E  6E0E               	movwf	(___awdiv@quotient+1)^0,c
  2848  006740  0E00               	movlw	0
  2849  006742  6E0D               	movwf	___awdiv@quotient^0,c
  2850  006744  5009               	movf	___awdiv@divisor^0,w,c
  2851  006746  100A               	iorwf	(___awdiv@divisor+1)^0,w,c
  2852  006748  B4D8               	btfsc	status,2,c
  2853  00674A  D01C               	goto	l2589
  2854  00674C  0E01               	movlw	1
  2855  00674E  6E0B               	movwf	___awdiv@counter^0,c
  2856  006750  D004               	goto	l2575
  2857  006752                     l2573:
  2858  006752  90D8               	bcf	status,0,c
  2859  006754  3609               	rlcf	___awdiv@divisor^0,f,c
  2860  006756  360A               	rlcf	(___awdiv@divisor+1)^0,f,c
  2861  006758  2A0B               	incf	___awdiv@counter^0,f,c
  2862  00675A                     l2575:
  2863  00675A  AE0A               	btfss	(___awdiv@divisor+1)^0,7,c
  2864  00675C  D7FA               	goto	l2573
  2865  00675E                     u1930:
  2866  00675E  90D8               	bcf	status,0,c
  2867  006760  360D               	rlcf	___awdiv@quotient^0,f,c
  2868  006762  360E               	rlcf	(___awdiv@quotient+1)^0,f,c
  2869  006764  5009               	movf	___awdiv@divisor^0,w,c
  2870  006766  5C07               	subwf	___awdiv@dividend^0,w,c
  2871  006768  500A               	movf	(___awdiv@divisor+1)^0,w,c
  2872  00676A  5808               	subwfb	(___awdiv@dividend+1)^0,w,c
  2873  00676C  A0D8               	btfss	status,0,c
  2874  00676E  D005               	goto	l2585
  2875  006770  5009               	movf	___awdiv@divisor^0,w,c
  2876  006772  5E07               	subwf	___awdiv@dividend^0,f,c
  2877  006774  500A               	movf	(___awdiv@divisor+1)^0,w,c
  2878  006776  5A08               	subwfb	(___awdiv@dividend+1)^0,f,c
  2879  006778  800D               	bsf	___awdiv@quotient^0,0,c
  2880  00677A                     l2585:
  2881  00677A  90D8               	bcf	status,0,c
  2882  00677C  320A               	rrcf	(___awdiv@divisor+1)^0,f,c
  2883  00677E  3209               	rrcf	___awdiv@divisor^0,f,c
  2884  006780  2E0B               	decfsz	___awdiv@counter^0,f,c
  2885  006782  D7ED               	goto	u1930
  2886  006784                     l2589:
  2887  006784  500C               	movf	___awdiv@sign^0,w,c
  2888  006786  B4D8               	btfsc	status,2,c
  2889  006788  D004               	goto	l2593
  2890  00678A  6C0D               	negf	___awdiv@quotient^0,c
  2891  00678C  1E0E               	comf	(___awdiv@quotient+1)^0,f,c
  2892  00678E  B0D8               	btfsc	status,0,c
  2893  006790  2A0E               	incf	(___awdiv@quotient+1)^0,f,c
  2894  006792                     l2593:
  2895  006792  C00D  F007         	movff	___awdiv@quotient,?___awdiv
  2896  006796  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
  2897  00679A  0012               	return		;funcret
  2898  00679C                     __end_of___awdiv:
  2899                           	opt callstack 0
  2900                           
  2901 ;; *************** function _isdigit *****************
  2902 ;; Defined at:
  2903 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\isdigit.c"
  2904 ;; Parameters:    Size  Location     Type
  2905 ;;  c               1    wreg     unsigned char 
  2906 ;; Auto vars:     Size  Location     Type
  2907 ;;  c               1    2[COMRAM] unsigned char 
  2908 ;; Return value:  Size  Location     Type
  2909 ;;		None               void
  2910 ;; Registers used:
  2911 ;;		wreg, status,2, status,0
  2912 ;; Tracked objects:
  2913 ;;		On entry : 0/0
  2914 ;;		On exit  : 0/0
  2915 ;;		Unchanged: 0/0
  2916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2917 ;;      Params:         0       0       0       0       0       0       0       0       0
  2918 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2919 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2920 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2921 ;;Total ram usage:        3 bytes
  2922 ;; Hardware stack levels used:    1
  2923 ;; This function calls:
  2924 ;;		Nothing
  2925 ;; This function is called by:
  2926 ;;		_sprintf
  2927 ;; This function uses a non-reentrant model
  2928 ;;
  2929                           
  2930                           	psect	text5
  2931  0061C8                     __ptext5:
  2932                           	opt callstack 0
  2933  0061C8                     _isdigit:
  2934                           	opt callstack 29
  2935                           
  2936                           ;incstack = 0
  2937                           ;isdigit@c stored from wreg
  2938  0061C8  6E03               	movwf	isdigit@c^0,c
  2939  0061CA  0E00               	movlw	0
  2940  0061CC  6E02               	movwf	_isdigit$860^0,c
  2941  0061CE  0E3A               	movlw	58
  2942  0061D0  6003               	cpfslt	isdigit@c^0,c
  2943  0061D2  D005               	goto	l2827
  2944  0061D4  0E2F               	movlw	47
  2945  0061D6  6403               	cpfsgt	isdigit@c^0,c
  2946  0061D8  D002               	goto	l2827
  2947  0061DA  0E01               	movlw	1
  2948  0061DC  6E02               	movwf	_isdigit$860^0,c
  2949  0061DE                     l2827:
  2950  0061DE  C002  F001         	movff	_isdigit$860,??_isdigit
  2951  0061E2  3001               	rrcf	??_isdigit^0,w,c
  2952  0061E4  0012               	return		;funcret
  2953  0061E6                     __end_of_isdigit:
  2954                           	opt callstack 0
  2955                           
  2956 ;; *************** function _fround *****************
  2957 ;; Defined at:
  2958 ;;		line 417 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c"
  2959 ;; Parameters:    Size  Location     Type
  2960 ;;  prec            1    wreg     unsigned char 
  2961 ;; Auto vars:     Size  Location     Type
  2962 ;;  prec            1   42[COMRAM] unsigned char 
  2963 ;; Return value:  Size  Location     Type
  2964 ;;                  3   33[COMRAM] unsigned char 
  2965 ;; Registers used:
  2966 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2967 ;; Tracked objects:
  2968 ;;		On entry : 0/0
  2969 ;;		On exit  : 0/0
  2970 ;;		Unchanged: 0/0
  2971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2972 ;;      Params:         3       0       0       0       0       0       0       0       0
  2973 ;;      Locals:         7       0       0       0       0       0       0       0       0
  2974 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2975 ;;      Totals:        10       0       0       0       0       0       0       0       0
  2976 ;;Total ram usage:       10 bytes
  2977 ;; Hardware stack levels used:    1
  2978 ;; Hardware stack levels required when called:    2
  2979 ;; This function calls:
  2980 ;;		___ftmul
  2981 ;;		___lwdiv
  2982 ;;		___lwmod
  2983 ;;		___wmul
  2984 ;; This function is called by:
  2985 ;;		_sprintf
  2986 ;; This function uses a non-reentrant model
  2987 ;;
  2988                           
  2989                           	psect	text6
  2990  006F8A                     __ptext6:
  2991                           	opt callstack 0
  2992  006F8A                     _fround:
  2993                           	opt callstack 27
  2994                           
  2995                           ;incstack = 0
  2996                           ;fround@prec stored from wreg
  2997  006F8A  6E2B               	movwf	fround@prec^0,c
  2998                           
  2999                           ;doprnt.c: 421: if(prec>=110)
  3000  006F8C  0E6D               	movlw	109
  3001  006F8E  642B               	cpfsgt	fround@prec^0,c
  3002  006F90  D0A3               	goto	l2769
  3003                           
  3004                           ;doprnt.c: 422: return 0.5 * _npowers_[prec/100U+18U] * _npowers_[(prec%100U)/10U+9U] * 
      +                          _npowers_[prec%10U];
  3005  006F92  0E00               	movlw	0
  3006  006F94  6E10               	movwf	(___wmul@multiplicand+1)^0,c
  3007  006F96  0E03               	movlw	3
  3008  006F98  6E0F               	movwf	___wmul@multiplicand^0,c
  3009  006F9A  0E00               	movlw	0
  3010  006F9C  6E09               	movwf	(___lwdiv@divisor+1)^0,c
  3011  006F9E  0E0A               	movlw	10
  3012  006FA0  6E08               	movwf	___lwdiv@divisor^0,c
  3013  006FA2  0E00               	movlw	0
  3014  006FA4  6E04               	movwf	(___lwmod@divisor+1)^0,c
  3015  006FA6  0E64               	movlw	100
  3016  006FA8  6E03               	movwf	___lwmod@divisor^0,c
  3017  006FAA  C02B  F001         	movff	fround@prec,___lwmod@dividend
  3018  006FAE  6A02               	clrf	(___lwmod@dividend+1)^0,c
  3019  006FB0  EC02  F032         	call	___lwmod	;wreg free
  3020  006FB4  C001  F006         	movff	?___lwmod,___lwdiv@dividend
  3021  006FB8  C002  F007         	movff	?___lwmod+1,___lwdiv@dividend+1
  3022  006FBC  EC23  F032         	call	___lwdiv	;wreg free
  3023  006FC0  C006  F00D         	movff	?___lwdiv,___wmul@multiplier
  3024  006FC4  C007  F00E         	movff	?___lwdiv+1,___wmul@multiplier+1
  3025  006FC8  EC28  F031         	call	___wmul	;wreg free
  3026  006FCC  0E1B               	movlw	27
  3027  006FCE  260D               	addwf	?___wmul^0,f,c
  3028  006FD0  0E00               	movlw	0
  3029  006FD2  220E               	addwfc	(?___wmul+1)^0,f,c
  3030  006FD4  0E2C               	movlw	low __npowers_
  3031  006FD6  240D               	addwf	?___wmul^0,w,c
  3032  006FD8  6EF6               	movwf	tblptrl,c
  3033  006FDA  0E10               	movlw	high __npowers_
  3034  006FDC  200E               	addwfc	(?___wmul+1)^0,w,c
  3035  006FDE  6EF7               	movwf	tblptrh,c
  3036  006FE0                     	if	0	;There are less than 3 active tblptr bytes
  3037  006FE0                     	endif
  3038  006FE0  0009               	tblrd		*+
  3039  006FE2  CFF5 F016          	movff	tablat,___ftmul@f2
  3040  006FE6  0009               	tblrd		*+
  3041  006FE8  CFF5 F017          	movff	tablat,___ftmul@f2+1
  3042  006FEC  000A               	tblrd		*-
  3043  006FEE  CFF5 F018          	movff	tablat,___ftmul@f2+2
  3044  006FF2  0E00               	movlw	0
  3045  006FF4  6E09               	movwf	(___lwdiv@divisor+1)^0,c
  3046  006FF6  0E64               	movlw	100
  3047  006FF8  6E08               	movwf	___lwdiv@divisor^0,c
  3048  006FFA  C02B  F006         	movff	fround@prec,___lwdiv@dividend
  3049  006FFE  6A07               	clrf	(___lwdiv@dividend+1)^0,c
  3050  007000  EC23  F032         	call	___lwdiv	;wreg free
  3051  007004  C006  F00D         	movff	?___lwdiv,___wmul@multiplier
  3052  007008  C007  F00E         	movff	?___lwdiv+1,___wmul@multiplier+1
  3053  00700C  0E00               	movlw	0
  3054  00700E  6E10               	movwf	(___wmul@multiplicand+1)^0,c
  3055  007010  0E03               	movlw	3
  3056  007012  6E0F               	movwf	___wmul@multiplicand^0,c
  3057  007014  EC28  F031         	call	___wmul	;wreg free
  3058  007018  0E36               	movlw	54
  3059  00701A  260D               	addwf	?___wmul^0,f,c
  3060  00701C  0E00               	movlw	0
  3061  00701E  220E               	addwfc	(?___wmul+1)^0,f,c
  3062  007020  0E2C               	movlw	low __npowers_
  3063  007022  240D               	addwf	?___wmul^0,w,c
  3064  007024  6EF6               	movwf	tblptrl,c
  3065  007026  0E10               	movlw	high __npowers_
  3066  007028  200E               	addwfc	(?___wmul+1)^0,w,c
  3067  00702A  6EF7               	movwf	tblptrh,c
  3068  00702C                     	if	0	;There are less than 3 active tblptr bytes
  3069  00702C                     	endif
  3070  00702C  0009               	tblrd		*+
  3071  00702E  CFF5 F013          	movff	tablat,___ftmul@f1
  3072  007032  0009               	tblrd		*+
  3073  007034  CFF5 F014          	movff	tablat,___ftmul@f1+1
  3074  007038  000A               	tblrd		*-
  3075  00703A  CFF5 F015          	movff	tablat,___ftmul@f1+2
  3076  00703E  EC7B  F035         	call	___ftmul	;wreg free
  3077  007042  C013  F028         	movff	?___ftmul,_fround$1072
  3078  007046  C014  F029         	movff	?___ftmul+1,_fround$1072+1
  3079  00704A  C015  F02A         	movff	?___ftmul+2,_fround$1072+2
  3080                           
  3081                           ;doprnt.c: 422: return 0.5 * _npowers_[prec/100U+18U] * _npowers_[(prec%100U)/10U+9U] * 
      +                          _npowers_[prec%10U];
  3082  00704E  0E00               	movlw	0
  3083  007050  6E10               	movwf	(___wmul@multiplicand+1)^0,c
  3084  007052  0E03               	movlw	3
  3085  007054  6E0F               	movwf	___wmul@multiplicand^0,c
  3086  007056  0E00               	movlw	0
  3087  007058  6E04               	movwf	(___lwmod@divisor+1)^0,c
  3088  00705A  0E0A               	movlw	10
  3089  00705C  6E03               	movwf	___lwmod@divisor^0,c
  3090  00705E  C02B  F001         	movff	fround@prec,___lwmod@dividend
  3091  007062  6A02               	clrf	(___lwmod@dividend+1)^0,c
  3092  007064  EC02  F032         	call	___lwmod	;wreg free
  3093  007068  C001  F00D         	movff	?___lwmod,___wmul@multiplier
  3094  00706C  C002  F00E         	movff	?___lwmod+1,___wmul@multiplier+1
  3095  007070  EC28  F031         	call	___wmul	;wreg free
  3096  007074  0E2C               	movlw	low __npowers_
  3097  007076  240D               	addwf	?___wmul^0,w,c
  3098  007078  6EF6               	movwf	tblptrl,c
  3099  00707A  0E10               	movlw	high __npowers_
  3100  00707C  200E               	addwfc	(?___wmul+1)^0,w,c
  3101  00707E  6EF7               	movwf	tblptrh,c
  3102  007080                     	if	0	;There are less than 3 active tblptr bytes
  3103  007080                     	endif
  3104  007080  0009               	tblrd		*+
  3105  007082  CFF5 F016          	movff	tablat,___ftmul@f2
  3106  007086  0009               	tblrd		*+
  3107  007088  CFF5 F017          	movff	tablat,___ftmul@f2+1
  3108  00708C  000A               	tblrd		*-
  3109  00708E  CFF5 F018          	movff	tablat,___ftmul@f2+2
  3110  007092  C028  F013         	movff	_fround$1072,___ftmul@f1
  3111  007096  C029  F014         	movff	_fround$1072+1,___ftmul@f1+1
  3112  00709A  C02A  F015         	movff	_fround$1072+2,___ftmul@f1+2
  3113  00709E  EC7B  F035         	call	___ftmul	;wreg free
  3114  0070A2  C013  F025         	movff	?___ftmul,_fround$1073
  3115  0070A6  C014  F026         	movff	?___ftmul+1,_fround$1073+1
  3116  0070AA  C015  F027         	movff	?___ftmul+2,_fround$1073+2
  3117                           
  3118                           ;doprnt.c: 422: return 0.5 * _npowers_[prec/100U+18U] * _npowers_[(prec%100U)/10U+9U] * 
      +                          _npowers_[prec%10U];
  3119  0070AE  C025  F013         	movff	_fround$1073,___ftmul@f1
  3120  0070B2  C026  F014         	movff	_fround$1073+1,___ftmul@f1+1
  3121  0070B6  C027  F015         	movff	_fround$1073+2,___ftmul@f1+2
  3122  0070BA  0E00               	movlw	0
  3123  0070BC  6E16               	movwf	___ftmul@f2^0,c
  3124  0070BE  0E00               	movlw	0
  3125  0070C0  6E17               	movwf	(___ftmul@f2+1)^0,c
  3126  0070C2  0E3F               	movlw	63
  3127  0070C4  6E18               	movwf	(___ftmul@f2+2)^0,c
  3128  0070C6  EC7B  F035         	call	___ftmul	;wreg free
  3129  0070CA  C013  F022         	movff	?___ftmul,?_fround
  3130  0070CE  C014  F023         	movff	?___ftmul+1,?_fround+1
  3131  0070D2  C015  F024         	movff	?___ftmul+2,?_fround+2
  3132  0070D6  0012               	return	
  3133  0070D8                     l2769:
  3134                           
  3135                           ;doprnt.c: 423: else if(prec > 10)
  3136  0070D8  0E0A               	movlw	10
  3137  0070DA  642B               	cpfsgt	fround@prec^0,c
  3138  0070DC  D065               	goto	l2777
  3139                           
  3140                           ;doprnt.c: 424: return 0.5 * _npowers_[prec/10U+9U] * _npowers_[prec%10U];
  3141  0070DE  0E00               	movlw	0
  3142  0070E0  6E10               	movwf	(___wmul@multiplicand+1)^0,c
  3143  0070E2  0E03               	movlw	3
  3144  0070E4  6E0F               	movwf	___wmul@multiplicand^0,c
  3145  0070E6  0E00               	movlw	0
  3146  0070E8  6E04               	movwf	(___lwmod@divisor+1)^0,c
  3147  0070EA  0E0A               	movlw	10
  3148  0070EC  6E03               	movwf	___lwmod@divisor^0,c
  3149  0070EE  C02B  F001         	movff	fround@prec,___lwmod@dividend
  3150  0070F2  6A02               	clrf	(___lwmod@dividend+1)^0,c
  3151  0070F4  EC02  F032         	call	___lwmod	;wreg free
  3152  0070F8  C001  F00D         	movff	?___lwmod,___wmul@multiplier
  3153  0070FC  C002  F00E         	movff	?___lwmod+1,___wmul@multiplier+1
  3154  007100  EC28  F031         	call	___wmul	;wreg free
  3155  007104  0E2C               	movlw	low __npowers_
  3156  007106  240D               	addwf	?___wmul^0,w,c
  3157  007108  6EF6               	movwf	tblptrl,c
  3158  00710A  0E10               	movlw	high __npowers_
  3159  00710C  200E               	addwfc	(?___wmul+1)^0,w,c
  3160  00710E  6EF7               	movwf	tblptrh,c
  3161  007110                     	if	0	;There are less than 3 active tblptr bytes
  3162  007110                     	endif
  3163  007110  0009               	tblrd		*+
  3164  007112  CFF5 F016          	movff	tablat,___ftmul@f2
  3165  007116  0009               	tblrd		*+
  3166  007118  CFF5 F017          	movff	tablat,___ftmul@f2+1
  3167  00711C  000A               	tblrd		*-
  3168  00711E  CFF5 F018          	movff	tablat,___ftmul@f2+2
  3169  007122  0E00               	movlw	0
  3170  007124  6E09               	movwf	(___lwdiv@divisor+1)^0,c
  3171  007126  0E0A               	movlw	10
  3172  007128  6E08               	movwf	___lwdiv@divisor^0,c
  3173  00712A  C02B  F006         	movff	fround@prec,___lwdiv@dividend
  3174  00712E  6A07               	clrf	(___lwdiv@dividend+1)^0,c
  3175  007130  EC23  F032         	call	___lwdiv	;wreg free
  3176  007134  C006  F00D         	movff	?___lwdiv,___wmul@multiplier
  3177  007138  C007  F00E         	movff	?___lwdiv+1,___wmul@multiplier+1
  3178  00713C  0E00               	movlw	0
  3179  00713E  6E10               	movwf	(___wmul@multiplicand+1)^0,c
  3180  007140  0E03               	movlw	3
  3181  007142  6E0F               	movwf	___wmul@multiplicand^0,c
  3182  007144  EC28  F031         	call	___wmul	;wreg free
  3183  007148  0E1B               	movlw	27
  3184  00714A  260D               	addwf	?___wmul^0,f,c
  3185  00714C  0E00               	movlw	0
  3186  00714E  220E               	addwfc	(?___wmul+1)^0,f,c
  3187  007150  0E2C               	movlw	low __npowers_
  3188  007152  240D               	addwf	?___wmul^0,w,c
  3189  007154  6EF6               	movwf	tblptrl,c
  3190  007156  0E10               	movlw	high __npowers_
  3191  007158  200E               	addwfc	(?___wmul+1)^0,w,c
  3192  00715A  6EF7               	movwf	tblptrh,c
  3193  00715C                     	if	0	;There are less than 3 active tblptr bytes
  3194  00715C                     	endif
  3195  00715C  0009               	tblrd		*+
  3196  00715E  CFF5 F013          	movff	tablat,___ftmul@f1
  3197  007162  0009               	tblrd		*+
  3198  007164  CFF5 F014          	movff	tablat,___ftmul@f1+1
  3199  007168  000A               	tblrd		*-
  3200  00716A  CFF5 F015          	movff	tablat,___ftmul@f1+2
  3201  00716E  EC7B  F035         	call	___ftmul	;wreg free
  3202  007172  C013  F028         	movff	?___ftmul,_fround$1072
  3203  007176  C014  F029         	movff	?___ftmul+1,_fround$1072+1
  3204  00717A  C015  F02A         	movff	?___ftmul+2,_fround$1072+2
  3205                           
  3206                           ;doprnt.c: 424: return 0.5 * _npowers_[prec/10U+9U] * _npowers_[prec%10U];
  3207  00717E  C028  F013         	movff	_fround$1072,___ftmul@f1
  3208  007182  C029  F014         	movff	_fround$1072+1,___ftmul@f1+1
  3209  007186  C02A  F015         	movff	_fround$1072+2,___ftmul@f1+2
  3210  00718A  0E00               	movlw	0
  3211  00718C  6E16               	movwf	___ftmul@f2^0,c
  3212  00718E  0E00               	movlw	0
  3213  007190  6E17               	movwf	(___ftmul@f2+1)^0,c
  3214  007192  0E3F               	movlw	63
  3215  007194  6E18               	movwf	(___ftmul@f2+2)^0,c
  3216  007196  EC7B  F035         	call	___ftmul	;wreg free
  3217  00719A  C013  F022         	movff	?___ftmul,?_fround
  3218  00719E  C014  F023         	movff	?___ftmul+1,?_fround+1
  3219  0071A2  C015  F024         	movff	?___ftmul+2,?_fround+2
  3220  0071A6  0012               	return	
  3221  0071A8                     l2777:
  3222                           
  3223                           ;doprnt.c: 425: return 0.5 * _npowers_[prec];
  3224  0071A8  502B               	movf	fround@prec^0,w,c
  3225  0071AA  0D03               	mullw	3
  3226  0071AC  0E2C               	movlw	low __npowers_
  3227  0071AE  24F3               	addwf	243,w,c
  3228  0071B0  6EF6               	movwf	tblptrl,c
  3229  0071B2  0E10               	movlw	high __npowers_
  3230  0071B4  20F4               	addwfc	244,w,c
  3231  0071B6  6EF7               	movwf	tblptrh,c
  3232  0071B8                     	if	0	;There are less than 3 active tblptr bytes
  3233  0071B8                     	endif
  3234  0071B8  0009               	tblrd		*+
  3235  0071BA  CFF5 F013          	movff	tablat,___ftmul@f1
  3236  0071BE  0009               	tblrd		*+
  3237  0071C0  CFF5 F014          	movff	tablat,___ftmul@f1+1
  3238  0071C4  000A               	tblrd		*-
  3239  0071C6  CFF5 F015          	movff	tablat,___ftmul@f1+2
  3240  0071CA  0E00               	movlw	0
  3241  0071CC  6E16               	movwf	___ftmul@f2^0,c
  3242  0071CE  0E00               	movlw	0
  3243  0071D0  6E17               	movwf	(___ftmul@f2+1)^0,c
  3244  0071D2  0E3F               	movlw	63
  3245  0071D4  6E18               	movwf	(___ftmul@f2+2)^0,c
  3246  0071D6  EC7B  F035         	call	___ftmul	;wreg free
  3247  0071DA  C013  F022         	movff	?___ftmul,?_fround
  3248  0071DE  C014  F023         	movff	?___ftmul+1,?_fround+1
  3249  0071E2  C015  F024         	movff	?___ftmul+2,?_fround+2
  3250  0071E6  0012               	return		;funcret
  3251  0071E8                     __end_of_fround:
  3252                           	opt callstack 0
  3253                           
  3254 ;; *************** function ___wmul *****************
  3255 ;; Defined at:
  3256 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul16.c"
  3257 ;; Parameters:    Size  Location     Type
  3258 ;;  multiplier      2   12[COMRAM] unsigned int 
  3259 ;;  multiplicand    2   14[COMRAM] unsigned int 
  3260 ;; Auto vars:     Size  Location     Type
  3261 ;;  product         2   16[COMRAM] unsigned int 
  3262 ;; Return value:  Size  Location     Type
  3263 ;;                  2   12[COMRAM] unsigned int 
  3264 ;; Registers used:
  3265 ;;		wreg, status,2, status,0, prodl, prodh
  3266 ;; Tracked objects:
  3267 ;;		On entry : 0/0
  3268 ;;		On exit  : 0/0
  3269 ;;		Unchanged: 0/0
  3270 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3271 ;;      Params:         4       0       0       0       0       0       0       0       0
  3272 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3273 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3274 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3275 ;;Total ram usage:        6 bytes
  3276 ;; Hardware stack levels used:    1
  3277 ;; This function calls:
  3278 ;;		Nothing
  3279 ;; This function is called by:
  3280 ;;		_fround
  3281 ;;		_sprintf
  3282 ;; This function uses a non-reentrant model
  3283 ;;
  3284                           
  3285                           	psect	text7
  3286  006250                     __ptext7:
  3287                           	opt callstack 0
  3288  006250                     ___wmul:
  3289                           	opt callstack 28
  3290                           
  3291                           ;incstack = 0
  3292  006250  500D               	movf	___wmul@multiplier^0,w,c
  3293  006252  020F               	mulwf	___wmul@multiplicand^0,c
  3294  006254  CFF3 F011          	movff	prodl,___wmul@product
  3295  006258  CFF4 F012          	movff	prodh,___wmul@product+1
  3296  00625C  500D               	movf	___wmul@multiplier^0,w,c
  3297  00625E  0210               	mulwf	(___wmul@multiplicand+1)^0,c
  3298  006260  50F3               	movf	243,w,c
  3299  006262  2612               	addwf	(___wmul@product+1)^0,f,c
  3300  006264  500E               	movf	(___wmul@multiplier+1)^0,w,c
  3301  006266  020F               	mulwf	___wmul@multiplicand^0,c
  3302  006268  50F3               	movf	243,w,c
  3303  00626A  2612               	addwf	(___wmul@product+1)^0,f,c
  3304  00626C  C011  F00D         	movff	___wmul@product,?___wmul
  3305  006270  C012  F00E         	movff	___wmul@product+1,?___wmul+1
  3306  006274  0012               	return		;funcret
  3307  006276                     __end_of___wmul:
  3308                           	opt callstack 0
  3309                           
  3310 ;; *************** function ___lwmod *****************
  3311 ;; Defined at:
  3312 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lwmod.c"
  3313 ;; Parameters:    Size  Location     Type
  3314 ;;  dividend        2    0[COMRAM] unsigned int 
  3315 ;;  divisor         2    2[COMRAM] unsigned int 
  3316 ;; Auto vars:     Size  Location     Type
  3317 ;;  counter         1    4[COMRAM] unsigned char 
  3318 ;; Return value:  Size  Location     Type
  3319 ;;                  2    0[COMRAM] unsigned int 
  3320 ;; Registers used:
  3321 ;;		wreg, status,2, status,0
  3322 ;; Tracked objects:
  3323 ;;		On entry : 0/0
  3324 ;;		On exit  : 0/0
  3325 ;;		Unchanged: 0/0
  3326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3327 ;;      Params:         4       0       0       0       0       0       0       0       0
  3328 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3329 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3330 ;;      Totals:         5       0       0       0       0       0       0       0       0
  3331 ;;Total ram usage:        5 bytes
  3332 ;; Hardware stack levels used:    1
  3333 ;; This function calls:
  3334 ;;		Nothing
  3335 ;; This function is called by:
  3336 ;;		_fround
  3337 ;; This function uses a non-reentrant model
  3338 ;;
  3339                           
  3340                           	psect	text8
  3341  006404                     __ptext8:
  3342                           	opt callstack 0
  3343  006404                     ___lwmod:
  3344                           	opt callstack 28
  3345                           
  3346                           ;incstack = 0
  3347  006404  5003               	movf	___lwmod@divisor^0,w,c
  3348  006406  1004               	iorwf	(___lwmod@divisor+1)^0,w,c
  3349  006408  B4D8               	btfsc	status,2,c
  3350  00640A  D018               	goto	l830
  3351  00640C  0E01               	movlw	1
  3352  00640E  6E05               	movwf	___lwmod@counter^0,c
  3353  006410  D004               	goto	l2661
  3354  006412                     l2659:
  3355  006412  90D8               	bcf	status,0,c
  3356  006414  3603               	rlcf	___lwmod@divisor^0,f,c
  3357  006416  3604               	rlcf	(___lwmod@divisor+1)^0,f,c
  3358  006418  2A05               	incf	___lwmod@counter^0,f,c
  3359  00641A                     l2661:
  3360  00641A  AE04               	btfss	(___lwmod@divisor+1)^0,7,c
  3361  00641C  D7FA               	goto	l2659
  3362  00641E                     u2060:
  3363  00641E  5003               	movf	___lwmod@divisor^0,w,c
  3364  006420  5C01               	subwf	___lwmod@dividend^0,w,c
  3365  006422  5004               	movf	(___lwmod@divisor+1)^0,w,c
  3366  006424  5802               	subwfb	(___lwmod@dividend+1)^0,w,c
  3367  006426  A0D8               	btfss	status,0,c
  3368  006428  D004               	goto	l2667
  3369  00642A  5003               	movf	___lwmod@divisor^0,w,c
  3370  00642C  5E01               	subwf	___lwmod@dividend^0,f,c
  3371  00642E  5004               	movf	(___lwmod@divisor+1)^0,w,c
  3372  006430  5A02               	subwfb	(___lwmod@dividend+1)^0,f,c
  3373  006432                     l2667:
  3374  006432  90D8               	bcf	status,0,c
  3375  006434  3204               	rrcf	(___lwmod@divisor+1)^0,f,c
  3376  006436  3203               	rrcf	___lwmod@divisor^0,f,c
  3377  006438  2E05               	decfsz	___lwmod@counter^0,f,c
  3378  00643A  D7F1               	goto	u2060
  3379  00643C                     l830:
  3380  00643C  C001  F001         	movff	___lwmod@dividend,?___lwmod
  3381  006440  C002  F002         	movff	___lwmod@dividend+1,?___lwmod+1
  3382  006444  0012               	return		;funcret
  3383  006446                     __end_of___lwmod:
  3384                           	opt callstack 0
  3385                           
  3386 ;; *************** function ___lwdiv *****************
  3387 ;; Defined at:
  3388 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lwdiv.c"
  3389 ;; Parameters:    Size  Location     Type
  3390 ;;  dividend        2    5[COMRAM] unsigned int 
  3391 ;;  divisor         2    7[COMRAM] unsigned int 
  3392 ;; Auto vars:     Size  Location     Type
  3393 ;;  quotient        2    9[COMRAM] unsigned int 
  3394 ;;  counter         1   11[COMRAM] unsigned char 
  3395 ;; Return value:  Size  Location     Type
  3396 ;;                  2    5[COMRAM] unsigned int 
  3397 ;; Registers used:
  3398 ;;		wreg, status,2, status,0
  3399 ;; Tracked objects:
  3400 ;;		On entry : 0/0
  3401 ;;		On exit  : 0/0
  3402 ;;		Unchanged: 0/0
  3403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3404 ;;      Params:         4       0       0       0       0       0       0       0       0
  3405 ;;      Locals:         3       0       0       0       0       0       0       0       0
  3406 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3407 ;;      Totals:         7       0       0       0       0       0       0       0       0
  3408 ;;Total ram usage:        7 bytes
  3409 ;; Hardware stack levels used:    1
  3410 ;; This function calls:
  3411 ;;		Nothing
  3412 ;; This function is called by:
  3413 ;;		_fround
  3414 ;; This function uses a non-reentrant model
  3415 ;;
  3416                           
  3417                           	psect	text9
  3418  006446                     __ptext9:
  3419                           	opt callstack 0
  3420  006446                     ___lwdiv:
  3421                           	opt callstack 28
  3422                           
  3423                           ;incstack = 0
  3424  006446  0E00               	movlw	0
  3425  006448  6E0B               	movwf	(___lwdiv@quotient+1)^0,c
  3426  00644A  0E00               	movlw	0
  3427  00644C  6E0A               	movwf	___lwdiv@quotient^0,c
  3428  00644E  5008               	movf	___lwdiv@divisor^0,w,c
  3429  006450  1009               	iorwf	(___lwdiv@divisor+1)^0,w,c
  3430  006452  B4D8               	btfsc	status,2,c
  3431  006454  D01C               	goto	l820
  3432  006456  0E01               	movlw	1
  3433  006458  6E0C               	movwf	___lwdiv@counter^0,c
  3434  00645A  D004               	goto	l2641
  3435  00645C                     l2639:
  3436  00645C  90D8               	bcf	status,0,c
  3437  00645E  3608               	rlcf	___lwdiv@divisor^0,f,c
  3438  006460  3609               	rlcf	(___lwdiv@divisor+1)^0,f,c
  3439  006462  2A0C               	incf	___lwdiv@counter^0,f,c
  3440  006464                     l2641:
  3441  006464  AE09               	btfss	(___lwdiv@divisor+1)^0,7,c
  3442  006466  D7FA               	goto	l2639
  3443  006468                     u2030:
  3444  006468  90D8               	bcf	status,0,c
  3445  00646A  360A               	rlcf	___lwdiv@quotient^0,f,c
  3446  00646C  360B               	rlcf	(___lwdiv@quotient+1)^0,f,c
  3447  00646E  5008               	movf	___lwdiv@divisor^0,w,c
  3448  006470  5C06               	subwf	___lwdiv@dividend^0,w,c
  3449  006472  5009               	movf	(___lwdiv@divisor+1)^0,w,c
  3450  006474  5807               	subwfb	(___lwdiv@dividend+1)^0,w,c
  3451  006476  A0D8               	btfss	status,0,c
  3452  006478  D005               	goto	l2651
  3453  00647A  5008               	movf	___lwdiv@divisor^0,w,c
  3454  00647C  5E06               	subwf	___lwdiv@dividend^0,f,c
  3455  00647E  5009               	movf	(___lwdiv@divisor+1)^0,w,c
  3456  006480  5A07               	subwfb	(___lwdiv@dividend+1)^0,f,c
  3457  006482  800A               	bsf	___lwdiv@quotient^0,0,c
  3458  006484                     l2651:
  3459  006484  90D8               	bcf	status,0,c
  3460  006486  3209               	rrcf	(___lwdiv@divisor+1)^0,f,c
  3461  006488  3208               	rrcf	___lwdiv@divisor^0,f,c
  3462  00648A  2E0C               	decfsz	___lwdiv@counter^0,f,c
  3463  00648C  D7ED               	goto	u2030
  3464  00648E                     l820:
  3465  00648E  C00A  F006         	movff	___lwdiv@quotient,?___lwdiv
  3466  006492  C00B  F007         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3467  006496  0012               	return		;funcret
  3468  006498                     __end_of___lwdiv:
  3469                           	opt callstack 0
  3470                           
  3471 ;; *************** function ___ftmul *****************
  3472 ;; Defined at:
  3473 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\ftmul.c"
  3474 ;; Parameters:    Size  Location     Type
  3475 ;;  f1              3   18[COMRAM] float 
  3476 ;;  f2              3   21[COMRAM] float 
  3477 ;; Auto vars:     Size  Location     Type
  3478 ;;  f3_as_produc    3   28[COMRAM] unsigned um
  3479 ;;  sign            1   32[COMRAM] unsigned char 
  3480 ;;  cntr            1   31[COMRAM] unsigned char 
  3481 ;;  exp             1   27[COMRAM] unsigned char 
  3482 ;; Return value:  Size  Location     Type
  3483 ;;                  3   18[COMRAM] float 
  3484 ;; Registers used:
  3485 ;;		wreg, status,2, status,0, cstack
  3486 ;; Tracked objects:
  3487 ;;		On entry : 0/0
  3488 ;;		On exit  : 0/0
  3489 ;;		Unchanged: 0/0
  3490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3491 ;;      Params:         6       0       0       0       0       0       0       0       0
  3492 ;;      Locals:         6       0       0       0       0       0       0       0       0
  3493 ;;      Temps:          3       0       0       0       0       0       0       0       0
  3494 ;;      Totals:        15       0       0       0       0       0       0       0       0
  3495 ;;Total ram usage:       15 bytes
  3496 ;; Hardware stack levels used:    1
  3497 ;; Hardware stack levels required when called:    1
  3498 ;; This function calls:
  3499 ;;		___ftpack
  3500 ;; This function is called by:
  3501 ;;		_main
  3502 ;;		_fround
  3503 ;;		_scale
  3504 ;;		_sprintf
  3505 ;; This function uses a non-reentrant model
  3506 ;;
  3507                           
  3508                           	psect	text10
  3509  006AF6                     __ptext10:
  3510                           	opt callstack 0
  3511  006AF6                     ___ftmul:
  3512                           	opt callstack 27
  3513                           
  3514                           ;incstack = 0
  3515  006AF6  C015  F019         	movff	___ftmul@f1+2,??___ftmul
  3516  006AFA  6A1A               	clrf	(??___ftmul+1)^0,c
  3517  006AFC  6A1B               	clrf	(??___ftmul+2)^0,c
  3518  006AFE  3414               	rlcf	(___ftmul@f1+1)^0,w,c
  3519  006B00  3619               	rlcf	??___ftmul^0,f,c
  3520  006B02  E301               	bnc	u1841
  3521  006B04  801A               	bsf	(??___ftmul+1)^0,0,c
  3522  006B06                     u1841:
  3523  006B06  5019               	movf	??___ftmul^0,w,c
  3524  006B08  6E1C               	movwf	___ftmul@exp^0,c
  3525  006B0A  501C               	movf	___ftmul@exp^0,w,c
  3526  006B0C  A4D8               	btfss	status,2,c
  3527  006B0E  D007               	goto	l2511
  3528  006B10  0E00               	movlw	0
  3529  006B12  6E13               	movwf	?___ftmul^0,c
  3530  006B14  0E00               	movlw	0
  3531  006B16  6E14               	movwf	(?___ftmul+1)^0,c
  3532  006B18  0E00               	movlw	0
  3533  006B1A  6E15               	movwf	(?___ftmul+2)^0,c
  3534  006B1C  0012               	return	
  3535  006B1E                     l2511:
  3536  006B1E  C018  F019         	movff	___ftmul@f2+2,??___ftmul
  3537  006B22  6A1A               	clrf	(??___ftmul+1)^0,c
  3538  006B24  6A1B               	clrf	(??___ftmul+2)^0,c
  3539  006B26  3417               	rlcf	(___ftmul@f2+1)^0,w,c
  3540  006B28  3619               	rlcf	??___ftmul^0,f,c
  3541  006B2A  E301               	bnc	u1861
  3542  006B2C  801A               	bsf	(??___ftmul+1)^0,0,c
  3543  006B2E                     u1861:
  3544  006B2E  5019               	movf	??___ftmul^0,w,c
  3545  006B30  6E21               	movwf	___ftmul@sign^0,c
  3546  006B32  5021               	movf	___ftmul@sign^0,w,c
  3547  006B34  A4D8               	btfss	status,2,c
  3548  006B36  D007               	goto	l2517
  3549  006B38  0E00               	movlw	0
  3550  006B3A  6E13               	movwf	?___ftmul^0,c
  3551  006B3C  0E00               	movlw	0
  3552  006B3E  6E14               	movwf	(?___ftmul+1)^0,c
  3553  006B40  0E00               	movlw	0
  3554  006B42  6E15               	movwf	(?___ftmul+2)^0,c
  3555  006B44  0012               	return	
  3556  006B46                     l2517:
  3557  006B46  5021               	movf	___ftmul@sign^0,w,c
  3558  006B48  0F7B               	addlw	123
  3559  006B4A  261C               	addwf	___ftmul@exp^0,f,c
  3560  006B4C  C015  F021         	movff	___ftmul@f1+2,___ftmul@sign
  3561  006B50  5018               	movf	(___ftmul@f2+2)^0,w,c
  3562  006B52  1A21               	xorwf	___ftmul@sign^0,f,c
  3563  006B54  0E80               	movlw	128
  3564  006B56  1621               	andwf	___ftmul@sign^0,f,c
  3565  006B58  8E14               	bsf	(___ftmul@f1+1)^0,7,c
  3566  006B5A  8E17               	bsf	(___ftmul@f2+1)^0,7,c
  3567  006B5C  0EFF               	movlw	255
  3568  006B5E  1616               	andwf	___ftmul@f2^0,f,c
  3569  006B60  0EFF               	movlw	255
  3570  006B62  1617               	andwf	(___ftmul@f2+1)^0,f,c
  3571  006B64  0E00               	movlw	0
  3572  006B66  1618               	andwf	(___ftmul@f2+2)^0,f,c
  3573  006B68  0E00               	movlw	0
  3574  006B6A  6E1D               	movwf	___ftmul@f3_as_product^0,c
  3575  006B6C  0E00               	movlw	0
  3576  006B6E  6E1E               	movwf	(___ftmul@f3_as_product+1)^0,c
  3577  006B70  0E00               	movlw	0
  3578  006B72  6E1F               	movwf	(___ftmul@f3_as_product+2)^0,c
  3579  006B74  0E07               	movlw	7
  3580  006B76  6E20               	movwf	___ftmul@cntr^0,c
  3581  006B78                     l2531:
  3582  006B78  A013               	btfss	___ftmul@f1^0,0,c
  3583  006B7A  D006               	goto	l2535
  3584  006B7C  5016               	movf	___ftmul@f2^0,w,c
  3585  006B7E  261D               	addwf	___ftmul@f3_as_product^0,f,c
  3586  006B80  5017               	movf	(___ftmul@f2+1)^0,w,c
  3587  006B82  221E               	addwfc	(___ftmul@f3_as_product+1)^0,f,c
  3588  006B84  5018               	movf	(___ftmul@f2+2)^0,w,c
  3589  006B86  221F               	addwfc	(___ftmul@f3_as_product+2)^0,f,c
  3590  006B88                     l2535:
  3591  006B88  90D8               	bcf	status,0,c
  3592  006B8A  3215               	rrcf	(___ftmul@f1+2)^0,f,c
  3593  006B8C  3214               	rrcf	(___ftmul@f1+1)^0,f,c
  3594  006B8E  3213               	rrcf	___ftmul@f1^0,f,c
  3595  006B90  90D8               	bcf	status,0,c
  3596  006B92  3616               	rlcf	___ftmul@f2^0,f,c
  3597  006B94  3617               	rlcf	(___ftmul@f2+1)^0,f,c
  3598  006B96  3618               	rlcf	(___ftmul@f2+2)^0,f,c
  3599  006B98  2E20               	decfsz	___ftmul@cntr^0,f,c
  3600  006B9A  D7EE               	goto	l2531
  3601  006B9C  0E09               	movlw	9
  3602  006B9E  6E20               	movwf	___ftmul@cntr^0,c
  3603  006BA0                     l2541:
  3604  006BA0  A013               	btfss	___ftmul@f1^0,0,c
  3605  006BA2  D006               	goto	l2545
  3606  006BA4  5016               	movf	___ftmul@f2^0,w,c
  3607  006BA6  261D               	addwf	___ftmul@f3_as_product^0,f,c
  3608  006BA8  5017               	movf	(___ftmul@f2+1)^0,w,c
  3609  006BAA  221E               	addwfc	(___ftmul@f3_as_product+1)^0,f,c
  3610  006BAC  5018               	movf	(___ftmul@f2+2)^0,w,c
  3611  006BAE  221F               	addwfc	(___ftmul@f3_as_product+2)^0,f,c
  3612  006BB0                     l2545:
  3613  006BB0  90D8               	bcf	status,0,c
  3614  006BB2  3215               	rrcf	(___ftmul@f1+2)^0,f,c
  3615  006BB4  3214               	rrcf	(___ftmul@f1+1)^0,f,c
  3616  006BB6  3213               	rrcf	___ftmul@f1^0,f,c
  3617  006BB8  90D8               	bcf	status,0,c
  3618  006BBA  321F               	rrcf	(___ftmul@f3_as_product+2)^0,f,c
  3619  006BBC  321E               	rrcf	(___ftmul@f3_as_product+1)^0,f,c
  3620  006BBE  321D               	rrcf	___ftmul@f3_as_product^0,f,c
  3621  006BC0  2E20               	decfsz	___ftmul@cntr^0,f,c
  3622  006BC2  D7EE               	goto	l2541
  3623  006BC4  C01D  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  3624  006BC8  C01E  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  3625  006BCC  C01F  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  3626  006BD0  C01C  F004         	movff	___ftmul@exp,___ftpack@exp
  3627  006BD4  C021  F005         	movff	___ftmul@sign,___ftpack@sign
  3628  006BD8  ECCE  F033         	call	___ftpack	;wreg free
  3629  006BDC  C001  F013         	movff	?___ftpack,?___ftmul
  3630  006BE0  C002  F014         	movff	?___ftpack+1,?___ftmul+1
  3631  006BE4  C003  F015         	movff	?___ftpack+2,?___ftmul+2
  3632  006BE8  0012               	return		;funcret
  3633  006BEA                     __end_of___ftmul:
  3634                           	opt callstack 0
  3635                           
  3636 ;; *************** function __tdiv_to_l_ *****************
  3637 ;; Defined at:
  3638 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\ftdivl.c"
  3639 ;; Parameters:    Size  Location     Type
  3640 ;;  f1              3    0[COMRAM] float 
  3641 ;;  f2              3    3[COMRAM] float 
  3642 ;; Auto vars:     Size  Location     Type
  3643 ;;  quot            4    9[COMRAM] unsigned long 
  3644 ;;  exp1            1   14[COMRAM] unsigned char 
  3645 ;;  cntr            1   13[COMRAM] unsigned char 
  3646 ;; Return value:  Size  Location     Type
  3647 ;;                  4    0[COMRAM] unsigned long 
  3648 ;; Registers used:
  3649 ;;		wreg, status,2, status,0
  3650 ;; Tracked objects:
  3651 ;;		On entry : 0/0
  3652 ;;		On exit  : 0/0
  3653 ;;		Unchanged: 0/0
  3654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3655 ;;      Params:         6       0       0       0       0       0       0       0       0
  3656 ;;      Locals:         6       0       0       0       0       0       0       0       0
  3657 ;;      Temps:          3       0       0       0       0       0       0       0       0
  3658 ;;      Totals:        15       0       0       0       0       0       0       0       0
  3659 ;;Total ram usage:       15 bytes
  3660 ;; Hardware stack levels used:    1
  3661 ;; This function calls:
  3662 ;;		Nothing
  3663 ;; This function is called by:
  3664 ;;		_sprintf
  3665 ;; This function uses a non-reentrant model
  3666 ;;
  3667                           
  3668                           	psect	text11
  3669  006CE4                     __ptext11:
  3670                           	opt callstack 0
  3671  006CE4                     __tdiv_to_l_:
  3672                           	opt callstack 29
  3673                           
  3674                           ;incstack = 0
  3675  006CE4  C003  F007         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  3676  006CE8  6A08               	clrf	(??__tdiv_to_l_+1)^0,c
  3677  006CEA  6A09               	clrf	(??__tdiv_to_l_+2)^0,c
  3678  006CEC  3402               	rlcf	(__tdiv_to_l_@f1+1)^0,w,c
  3679  006CEE  3607               	rlcf	??__tdiv_to_l_^0,f,c
  3680  006CF0  E301               	bnc	u2241
  3681  006CF2  8008               	bsf	(??__tdiv_to_l_+1)^0,0,c
  3682  006CF4                     u2241:
  3683  006CF4  5007               	movf	??__tdiv_to_l_^0,w,c
  3684  006CF6  6E0F               	movwf	__tdiv_to_l_@exp1^0,c
  3685  006CF8  500F               	movf	__tdiv_to_l_@exp1^0,w,c
  3686  006CFA  A4D8               	btfss	status,2,c
  3687  006CFC  D009               	goto	l2837
  3688  006CFE                     u2250:
  3689  006CFE  0E00               	movlw	0
  3690  006D00  6E01               	movwf	?__tdiv_to_l_^0,c
  3691  006D02  0E00               	movlw	0
  3692  006D04  6E02               	movwf	(?__tdiv_to_l_+1)^0,c
  3693  006D06  0E00               	movlw	0
  3694  006D08  6E03               	movwf	(?__tdiv_to_l_+2)^0,c
  3695  006D0A  0E00               	movlw	0
  3696  006D0C  6E04               	movwf	(?__tdiv_to_l_+3)^0,c
  3697  006D0E  0012               	return	
  3698  006D10                     l2837:
  3699  006D10  C006  F007         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  3700  006D14  6A08               	clrf	(??__tdiv_to_l_+1)^0,c
  3701  006D16  6A09               	clrf	(??__tdiv_to_l_+2)^0,c
  3702  006D18  3405               	rlcf	(__tdiv_to_l_@f2+1)^0,w,c
  3703  006D1A  3607               	rlcf	??__tdiv_to_l_^0,f,c
  3704  006D1C  E301               	bnc	u2261
  3705  006D1E  8008               	bsf	(??__tdiv_to_l_+1)^0,0,c
  3706  006D20                     u2261:
  3707  006D20  5007               	movf	??__tdiv_to_l_^0,w,c
  3708  006D22  6E0E               	movwf	__tdiv_to_l_@cntr^0,c
  3709  006D24  500E               	movf	__tdiv_to_l_@cntr^0,w,c
  3710  006D26  B4D8               	btfsc	status,2,c
  3711  006D28  D7EA               	goto	u2250
  3712  006D2A  8E02               	bsf	(__tdiv_to_l_@f1+1)^0,7,c
  3713  006D2C  0EFF               	movlw	255
  3714  006D2E  1601               	andwf	__tdiv_to_l_@f1^0,f,c
  3715  006D30  0EFF               	movlw	255
  3716  006D32  1602               	andwf	(__tdiv_to_l_@f1+1)^0,f,c
  3717  006D34  0E00               	movlw	0
  3718  006D36  1603               	andwf	(__tdiv_to_l_@f1+2)^0,f,c
  3719  006D38  8E05               	bsf	(__tdiv_to_l_@f2+1)^0,7,c
  3720  006D3A  0EFF               	movlw	255
  3721  006D3C  1604               	andwf	__tdiv_to_l_@f2^0,f,c
  3722  006D3E  0EFF               	movlw	255
  3723  006D40  1605               	andwf	(__tdiv_to_l_@f2+1)^0,f,c
  3724  006D42  0E00               	movlw	0
  3725  006D44  1606               	andwf	(__tdiv_to_l_@f2+2)^0,f,c
  3726  006D46  0E00               	movlw	0
  3727  006D48  6E0A               	movwf	__tdiv_to_l_@quot^0,c
  3728  006D4A  0E00               	movlw	0
  3729  006D4C  6E0B               	movwf	(__tdiv_to_l_@quot+1)^0,c
  3730  006D4E  0E00               	movlw	0
  3731  006D50  6E0C               	movwf	(__tdiv_to_l_@quot+2)^0,c
  3732  006D52  0E00               	movlw	0
  3733  006D54  6E0D               	movwf	(__tdiv_to_l_@quot+3)^0,c
  3734  006D56  0E7F               	movlw	127
  3735  006D58  5E0F               	subwf	__tdiv_to_l_@exp1^0,f,c
  3736  006D5A  500E               	movf	__tdiv_to_l_@cntr^0,w,c
  3737  006D5C  0F98               	addlw	152
  3738  006D5E  5E0F               	subwf	__tdiv_to_l_@exp1^0,f,c
  3739  006D60  0E18               	movlw	24
  3740  006D62  6E0E               	movwf	__tdiv_to_l_@cntr^0,c
  3741  006D64                     l672:
  3742  006D64  90D8               	bcf	status,0,c
  3743  006D66  360A               	rlcf	__tdiv_to_l_@quot^0,f,c
  3744  006D68  360B               	rlcf	(__tdiv_to_l_@quot+1)^0,f,c
  3745  006D6A  360C               	rlcf	(__tdiv_to_l_@quot+2)^0,f,c
  3746  006D6C  360D               	rlcf	(__tdiv_to_l_@quot+3)^0,f,c
  3747  006D6E  5004               	movf	__tdiv_to_l_@f2^0,w,c
  3748  006D70  5C01               	subwf	__tdiv_to_l_@f1^0,w,c
  3749  006D72  5005               	movf	(__tdiv_to_l_@f2+1)^0,w,c
  3750  006D74  5802               	subwfb	(__tdiv_to_l_@f1+1)^0,w,c
  3751  006D76  5006               	movf	(__tdiv_to_l_@f2+2)^0,w,c
  3752  006D78  5803               	subwfb	(__tdiv_to_l_@f1+2)^0,w,c
  3753  006D7A  A0D8               	btfss	status,0,c
  3754  006D7C  D007               	goto	l673
  3755  006D7E  5004               	movf	__tdiv_to_l_@f2^0,w,c
  3756  006D80  5E01               	subwf	__tdiv_to_l_@f1^0,f,c
  3757  006D82  5005               	movf	(__tdiv_to_l_@f2+1)^0,w,c
  3758  006D84  5A02               	subwfb	(__tdiv_to_l_@f1+1)^0,f,c
  3759  006D86  5006               	movf	(__tdiv_to_l_@f2+2)^0,w,c
  3760  006D88  5A03               	subwfb	(__tdiv_to_l_@f1+2)^0,f,c
  3761  006D8A  800A               	bsf	__tdiv_to_l_@quot^0,0,c
  3762  006D8C                     l673:
  3763  006D8C  90D8               	bcf	status,0,c
  3764  006D8E  3601               	rlcf	__tdiv_to_l_@f1^0,f,c
  3765  006D90  3602               	rlcf	(__tdiv_to_l_@f1+1)^0,f,c
  3766  006D92  3603               	rlcf	(__tdiv_to_l_@f1+2)^0,f,c
  3767  006D94  2E0E               	decfsz	__tdiv_to_l_@cntr^0,f,c
  3768  006D96  D7E6               	goto	l672
  3769  006D98  AE0F               	btfss	__tdiv_to_l_@exp1^0,7,c
  3770  006D9A  D00D               	goto	l2877
  3771  006D9C  500F               	movf	__tdiv_to_l_@exp1^0,w,c
  3772  006D9E  0A80               	xorlw	128
  3773  006DA0  0F97               	addlw	151
  3774  006DA2  A0D8               	btfss	status,0,c
  3775  006DA4  D7AC               	goto	u2250
  3776  006DA6                     l2873:
  3777  006DA6  90D8               	bcf	status,0,c
  3778  006DA8  320D               	rrcf	(__tdiv_to_l_@quot+3)^0,f,c
  3779  006DAA  320C               	rrcf	(__tdiv_to_l_@quot+2)^0,f,c
  3780  006DAC  320B               	rrcf	(__tdiv_to_l_@quot+1)^0,f,c
  3781  006DAE  320A               	rrcf	__tdiv_to_l_@quot^0,f,c
  3782  006DB0  3E0F               	incfsz	__tdiv_to_l_@exp1^0,f,c
  3783  006DB2  D7F9               	goto	l2873
  3784  006DB4  D00D               	goto	u2320
  3785  006DB6                     l2877:
  3786  006DB6  0E17               	movlw	23
  3787  006DB8  640F               	cpfsgt	__tdiv_to_l_@exp1^0,c
  3788  006DBA  D007               	goto	l2885
  3789  006DBC  D7A0               	goto	u2250
  3790  006DBE                     l2883:
  3791  006DBE  90D8               	bcf	status,0,c
  3792  006DC0  360A               	rlcf	__tdiv_to_l_@quot^0,f,c
  3793  006DC2  360B               	rlcf	(__tdiv_to_l_@quot+1)^0,f,c
  3794  006DC4  360C               	rlcf	(__tdiv_to_l_@quot+2)^0,f,c
  3795  006DC6  360D               	rlcf	(__tdiv_to_l_@quot+3)^0,f,c
  3796  006DC8  060F               	decf	__tdiv_to_l_@exp1^0,f,c
  3797  006DCA                     l2885:
  3798  006DCA  500F               	movf	__tdiv_to_l_@exp1^0,w,c
  3799  006DCC  A4D8               	btfss	status,2,c
  3800  006DCE  D7F7               	goto	l2883
  3801  006DD0                     u2320:
  3802  006DD0  C00A  F001         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  3803  006DD4  C00B  F002         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  3804  006DD8  C00C  F003         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  3805  006DDC  C00D  F004         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  3806  006DE0  0012               	return		;funcret
  3807  006DE2                     __end_of__tdiv_to_l_:
  3808                           	opt callstack 0
  3809                           
  3810 ;; *************** function __div_to_l_ *****************
  3811 ;; Defined at:
  3812 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\fldivl.c"
  3813 ;; Parameters:    Size  Location     Type
  3814 ;;  f1              3    0[COMRAM] unsigned long 
  3815 ;;  f2              3    3[COMRAM] unsigned long 
  3816 ;; Auto vars:     Size  Location     Type
  3817 ;;  quot            4    6[COMRAM] unsigned long 
  3818 ;;  exp1            1   11[COMRAM] unsigned char 
  3819 ;;  cntr            1   10[COMRAM] unsigned char 
  3820 ;; Return value:  Size  Location     Type
  3821 ;;                  4    0[COMRAM] unsigned long 
  3822 ;; Registers used:
  3823 ;;		wreg, status,2, status,0
  3824 ;; Tracked objects:
  3825 ;;		On entry : 0/0
  3826 ;;		On exit  : 0/0
  3827 ;;		Unchanged: 0/0
  3828 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3829 ;;      Params:         6       0       0       0       0       0       0       0       0
  3830 ;;      Locals:         6       0       0       0       0       0       0       0       0
  3831 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3832 ;;      Totals:        12       0       0       0       0       0       0       0       0
  3833 ;;Total ram usage:       12 bytes
  3834 ;; Hardware stack levels used:    1
  3835 ;; This function calls:
  3836 ;;		Nothing
  3837 ;; This function is called by:
  3838 ;;		_sprintf
  3839 ;; This function uses a non-reentrant model
  3840 ;;
  3841                           
  3842                           	psect	text12
  3843  006A02                     __ptext12:
  3844                           	opt callstack 0
  3845  006A02                     __div_to_l_:
  3846                           	opt callstack 29
  3847                           
  3848                           ;incstack = 0
  3849  006A02  3403               	rlcf	(__div_to_l_@f1+2)^0,w,c
  3850  006A04  3404               	rlcf	(__div_to_l_@f1+3)^0,w,c
  3851  006A06  6E0C               	movwf	__div_to_l_@exp1^0,c
  3852  006A08  500C               	movf	__div_to_l_@exp1^0,w,c
  3853  006A0A  A4D8               	btfss	status,2,c
  3854  006A0C  D009               	goto	l2893
  3855  006A0E                     u2330:
  3856  006A0E  0E00               	movlw	0
  3857  006A10  6E01               	movwf	?__div_to_l_^0,c
  3858  006A12  0E00               	movlw	0
  3859  006A14  6E02               	movwf	(?__div_to_l_+1)^0,c
  3860  006A16  0E00               	movlw	0
  3861  006A18  6E03               	movwf	(?__div_to_l_+2)^0,c
  3862  006A1A  0E00               	movlw	0
  3863  006A1C  6E04               	movwf	(?__div_to_l_+3)^0,c
  3864  006A1E  0012               	return	
  3865  006A20                     l2893:
  3866  006A20  3406               	rlcf	(__div_to_l_@f2+2)^0,w,c
  3867  006A22  3407               	rlcf	(__div_to_l_@f2+3)^0,w,c
  3868  006A24  6E0B               	movwf	__div_to_l_@cntr^0,c
  3869  006A26  500B               	movf	__div_to_l_@cntr^0,w,c
  3870  006A28  B4D8               	btfsc	status,2,c
  3871  006A2A  D7F1               	goto	u2330
  3872  006A2C  8E03               	bsf	(__div_to_l_@f1+2)^0,7,c
  3873  006A2E  0EFF               	movlw	255
  3874  006A30  1601               	andwf	__div_to_l_@f1^0,f,c
  3875  006A32  0EFF               	movlw	255
  3876  006A34  1602               	andwf	(__div_to_l_@f1+1)^0,f,c
  3877  006A36  0EFF               	movlw	255
  3878  006A38  1603               	andwf	(__div_to_l_@f1+2)^0,f,c
  3879  006A3A  0E00               	movlw	0
  3880  006A3C  1604               	andwf	(__div_to_l_@f1+3)^0,f,c
  3881  006A3E  8E06               	bsf	(__div_to_l_@f2+2)^0,7,c
  3882  006A40  0EFF               	movlw	255
  3883  006A42  1604               	andwf	__div_to_l_@f2^0,f,c
  3884  006A44  0EFF               	movlw	255
  3885  006A46  1605               	andwf	(__div_to_l_@f2+1)^0,f,c
  3886  006A48  0EFF               	movlw	255
  3887  006A4A  1606               	andwf	(__div_to_l_@f2+2)^0,f,c
  3888  006A4C  0E00               	movlw	0
  3889  006A4E  1607               	andwf	(__div_to_l_@f2+3)^0,f,c
  3890  006A50  0E00               	movlw	0
  3891  006A52  6E07               	movwf	__div_to_l_@quot^0,c
  3892  006A54  0E00               	movlw	0
  3893  006A56  6E08               	movwf	(__div_to_l_@quot+1)^0,c
  3894  006A58  0E00               	movlw	0
  3895  006A5A  6E09               	movwf	(__div_to_l_@quot+2)^0,c
  3896  006A5C  0E00               	movlw	0
  3897  006A5E  6E0A               	movwf	(__div_to_l_@quot+3)^0,c
  3898  006A60  0E7F               	movlw	127
  3899  006A62  5E0C               	subwf	__div_to_l_@exp1^0,f,c
  3900  006A64  500B               	movf	__div_to_l_@cntr^0,w,c
  3901  006A66  0FA0               	addlw	160
  3902  006A68  5E0C               	subwf	__div_to_l_@exp1^0,f,c
  3903  006A6A  0E20               	movlw	32
  3904  006A6C  6E0B               	movwf	__div_to_l_@cntr^0,c
  3905  006A6E                     l2913:
  3906  006A6E  90D8               	bcf	status,0,c
  3907  006A70  3607               	rlcf	__div_to_l_@quot^0,f,c
  3908  006A72  3608               	rlcf	(__div_to_l_@quot+1)^0,f,c
  3909  006A74  3609               	rlcf	(__div_to_l_@quot+2)^0,f,c
  3910  006A76  360A               	rlcf	(__div_to_l_@quot+3)^0,f,c
  3911  006A78  5004               	movf	__div_to_l_@f2^0,w,c
  3912  006A7A  5C01               	subwf	__div_to_l_@f1^0,w,c
  3913  006A7C  5005               	movf	(__div_to_l_@f2+1)^0,w,c
  3914  006A7E  5802               	subwfb	(__div_to_l_@f1+1)^0,w,c
  3915  006A80  5006               	movf	(__div_to_l_@f2+2)^0,w,c
  3916  006A82  5803               	subwfb	(__div_to_l_@f1+2)^0,w,c
  3917  006A84  5007               	movf	(__div_to_l_@f2+3)^0,w,c
  3918  006A86  5804               	subwfb	(__div_to_l_@f1+3)^0,w,c
  3919  006A88  A0D8               	btfss	status,0,c
  3920  006A8A  D009               	goto	l2921
  3921  006A8C  5004               	movf	__div_to_l_@f2^0,w,c
  3922  006A8E  5E01               	subwf	__div_to_l_@f1^0,f,c
  3923  006A90  5005               	movf	(__div_to_l_@f2+1)^0,w,c
  3924  006A92  5A02               	subwfb	(__div_to_l_@f1+1)^0,f,c
  3925  006A94  5006               	movf	(__div_to_l_@f2+2)^0,w,c
  3926  006A96  5A03               	subwfb	(__div_to_l_@f1+2)^0,f,c
  3927  006A98  5007               	movf	(__div_to_l_@f2+3)^0,w,c
  3928  006A9A  5A04               	subwfb	(__div_to_l_@f1+3)^0,f,c
  3929  006A9C  8007               	bsf	__div_to_l_@quot^0,0,c
  3930  006A9E                     l2921:
  3931  006A9E  90D8               	bcf	status,0,c
  3932  006AA0  3601               	rlcf	__div_to_l_@f1^0,f,c
  3933  006AA2  3602               	rlcf	(__div_to_l_@f1+1)^0,f,c
  3934  006AA4  3603               	rlcf	(__div_to_l_@f1+2)^0,f,c
  3935  006AA6  3604               	rlcf	(__div_to_l_@f1+3)^0,f,c
  3936  006AA8  2E0B               	decfsz	__div_to_l_@cntr^0,f,c
  3937  006AAA  D7E1               	goto	l2913
  3938  006AAC  AE0C               	btfss	__div_to_l_@exp1^0,7,c
  3939  006AAE  D00D               	goto	l2937
  3940  006AB0  500C               	movf	__div_to_l_@exp1^0,w,c
  3941  006AB2  0A80               	xorlw	128
  3942  006AB4  0F9F               	addlw	159
  3943  006AB6  A0D8               	btfss	status,0,c
  3944  006AB8  D7AA               	goto	u2330
  3945  006ABA                     l2933:
  3946  006ABA  90D8               	bcf	status,0,c
  3947  006ABC  320A               	rrcf	(__div_to_l_@quot+3)^0,f,c
  3948  006ABE  3209               	rrcf	(__div_to_l_@quot+2)^0,f,c
  3949  006AC0  3208               	rrcf	(__div_to_l_@quot+1)^0,f,c
  3950  006AC2  3207               	rrcf	__div_to_l_@quot^0,f,c
  3951  006AC4  3E0C               	incfsz	__div_to_l_@exp1^0,f,c
  3952  006AC6  D7F9               	goto	l2933
  3953  006AC8  D00D               	goto	u2390
  3954  006ACA                     l2937:
  3955  006ACA  0E1F               	movlw	31
  3956  006ACC  640C               	cpfsgt	__div_to_l_@exp1^0,c
  3957  006ACE  D007               	goto	l2945
  3958  006AD0  D79E               	goto	u2330
  3959  006AD2                     l2943:
  3960  006AD2  90D8               	bcf	status,0,c
  3961  006AD4  3607               	rlcf	__div_to_l_@quot^0,f,c
  3962  006AD6  3608               	rlcf	(__div_to_l_@quot+1)^0,f,c
  3963  006AD8  3609               	rlcf	(__div_to_l_@quot+2)^0,f,c
  3964  006ADA  360A               	rlcf	(__div_to_l_@quot+3)^0,f,c
  3965  006ADC  060C               	decf	__div_to_l_@exp1^0,f,c
  3966  006ADE                     l2945:
  3967  006ADE  500C               	movf	__div_to_l_@exp1^0,w,c
  3968  006AE0  A4D8               	btfss	status,2,c
  3969  006AE2  D7F7               	goto	l2943
  3970  006AE4                     u2390:
  3971  006AE4  C007  F001         	movff	__div_to_l_@quot,?__div_to_l_
  3972  006AE8  C008  F002         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  3973  006AEC  C009  F003         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  3974  006AF0  C00A  F004         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  3975  006AF4  0012               	return		;funcret
  3976  006AF6                     __end_of__div_to_l_:
  3977                           	opt callstack 0
  3978                           
  3979 ;; *************** function ___lltoft *****************
  3980 ;; Defined at:
  3981 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lltoft.c"
  3982 ;; Parameters:    Size  Location     Type
  3983 ;;  c               4    8[COMRAM] unsigned long 
  3984 ;; Auto vars:     Size  Location     Type
  3985 ;;  exp             1   16[COMRAM] unsigned char 
  3986 ;; Return value:  Size  Location     Type
  3987 ;;                  3    8[COMRAM] float 
  3988 ;; Registers used:
  3989 ;;		wreg, status,2, status,0, cstack
  3990 ;; Tracked objects:
  3991 ;;		On entry : 0/0
  3992 ;;		On exit  : 0/0
  3993 ;;		Unchanged: 0/0
  3994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3995 ;;      Params:         4       0       0       0       0       0       0       0       0
  3996 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3997 ;;      Temps:          4       0       0       0       0       0       0       0       0
  3998 ;;      Totals:         9       0       0       0       0       0       0       0       0
  3999 ;;Total ram usage:        9 bytes
  4000 ;; Hardware stack levels used:    1
  4001 ;; Hardware stack levels required when called:    1
  4002 ;; This function calls:
  4003 ;;		___ftpack
  4004 ;; This function is called by:
  4005 ;;		_sprintf
  4006 ;; This function uses a non-reentrant model
  4007 ;;
  4008                           
  4009                           	psect	text13
  4010  0064F0                     __ptext13:
  4011                           	opt callstack 0
  4012  0064F0                     ___lltoft:
  4013                           	opt callstack 28
  4014                           
  4015                           ;incstack = 0
  4016  0064F0  0E8E               	movlw	142
  4017  0064F2  6E11               	movwf	___lltoft@exp^0,c
  4018  0064F4  D006               	goto	l3065
  4019  0064F6                     l3063:
  4020  0064F6  90D8               	bcf	status,0,c
  4021  0064F8  320C               	rrcf	(___lltoft@c+3)^0,f,c
  4022  0064FA  320B               	rrcf	(___lltoft@c+2)^0,f,c
  4023  0064FC  320A               	rrcf	(___lltoft@c+1)^0,f,c
  4024  0064FE  3209               	rrcf	___lltoft@c^0,f,c
  4025  006500  2A11               	incf	___lltoft@exp^0,f,c
  4026  006502                     l3065:
  4027  006502  0E00               	movlw	0
  4028  006504  1409               	andwf	___lltoft@c^0,w,c
  4029  006506  6E0D               	movwf	??___lltoft^0,c
  4030  006508  0E00               	movlw	0
  4031  00650A  140A               	andwf	(___lltoft@c+1)^0,w,c
  4032  00650C  6E0E               	movwf	(??___lltoft+1)^0,c
  4033  00650E  0E00               	movlw	0
  4034  006510  140B               	andwf	(___lltoft@c+2)^0,w,c
  4035  006512  6E0F               	movwf	(??___lltoft+2)^0,c
  4036  006514  0EFF               	movlw	255
  4037  006516  140C               	andwf	(___lltoft@c+3)^0,w,c
  4038  006518  6E10               	movwf	(??___lltoft+3)^0,c
  4039  00651A  500D               	movf	??___lltoft^0,w,c
  4040  00651C  100E               	iorwf	(??___lltoft+1)^0,w,c
  4041  00651E  100F               	iorwf	(??___lltoft+2)^0,w,c
  4042  006520  1010               	iorwf	(??___lltoft+3)^0,w,c
  4043  006522  A4D8               	btfss	status,2,c
  4044  006524  D7E8               	goto	l3063
  4045  006526  C009  F001         	movff	___lltoft@c,___ftpack@arg
  4046  00652A  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  4047  00652E  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  4048  006532  C011  F004         	movff	___lltoft@exp,___ftpack@exp
  4049  006536  0E00               	movlw	0
  4050  006538  6E05               	movwf	___ftpack@sign^0,c
  4051  00653A  ECCE  F033         	call	___ftpack	;wreg free
  4052  00653E  C001  F009         	movff	?___ftpack,?___lltoft
  4053  006542  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  4054  006546  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  4055  00654A  0012               	return		;funcret
  4056  00654C                     __end_of___lltoft:
  4057                           	opt callstack 0
  4058                           
  4059 ;; *************** function ___llmod *****************
  4060 ;; Defined at:
  4061 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\llmod.c"
  4062 ;; Parameters:    Size  Location     Type
  4063 ;;  dividend        4    0[COMRAM] unsigned long 
  4064 ;;  divisor         4    4[COMRAM] unsigned long 
  4065 ;; Auto vars:     Size  Location     Type
  4066 ;;  counter         1    8[COMRAM] unsigned char 
  4067 ;; Return value:  Size  Location     Type
  4068 ;;                  4    0[COMRAM] unsigned long 
  4069 ;; Registers used:
  4070 ;;		wreg, status,2, status,0
  4071 ;; Tracked objects:
  4072 ;;		On entry : 0/0
  4073 ;;		On exit  : 0/0
  4074 ;;		Unchanged: 0/0
  4075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4076 ;;      Params:         8       0       0       0       0       0       0       0       0
  4077 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4078 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4079 ;;      Totals:         9       0       0       0       0       0       0       0       0
  4080 ;;Total ram usage:        9 bytes
  4081 ;; Hardware stack levels used:    1
  4082 ;; This function calls:
  4083 ;;		Nothing
  4084 ;; This function is called by:
  4085 ;;		_sprintf
  4086 ;; This function uses a non-reentrant model
  4087 ;;
  4088                           
  4089                           	psect	text14
  4090  00654C                     __ptext14:
  4091                           	opt callstack 0
  4092  00654C                     ___llmod:
  4093                           	opt callstack 29
  4094                           
  4095                           ;incstack = 0
  4096  00654C  5005               	movf	___llmod@divisor^0,w,c
  4097  00654E  1006               	iorwf	(___llmod@divisor+1)^0,w,c
  4098  006550  1007               	iorwf	(___llmod@divisor+2)^0,w,c
  4099  006552  1008               	iorwf	(___llmod@divisor+3)^0,w,c
  4100  006554  B4D8               	btfsc	status,2,c
  4101  006556  D024               	goto	l749
  4102  006558  0E01               	movlw	1
  4103  00655A  6E09               	movwf	___llmod@counter^0,c
  4104  00655C  D006               	goto	l3051
  4105  00655E                     l3049:
  4106  00655E  90D8               	bcf	status,0,c
  4107  006560  3605               	rlcf	___llmod@divisor^0,f,c
  4108  006562  3606               	rlcf	(___llmod@divisor+1)^0,f,c
  4109  006564  3607               	rlcf	(___llmod@divisor+2)^0,f,c
  4110  006566  3608               	rlcf	(___llmod@divisor+3)^0,f,c
  4111  006568  2A09               	incf	___llmod@counter^0,f,c
  4112  00656A                     l3051:
  4113  00656A  AE08               	btfss	(___llmod@divisor+3)^0,7,c
  4114  00656C  D7F8               	goto	l3049
  4115  00656E                     u2570:
  4116  00656E  5005               	movf	___llmod@divisor^0,w,c
  4117  006570  5C01               	subwf	___llmod@dividend^0,w,c
  4118  006572  5006               	movf	(___llmod@divisor+1)^0,w,c
  4119  006574  5802               	subwfb	(___llmod@dividend+1)^0,w,c
  4120  006576  5007               	movf	(___llmod@divisor+2)^0,w,c
  4121  006578  5803               	subwfb	(___llmod@dividend+2)^0,w,c
  4122  00657A  5008               	movf	(___llmod@divisor+3)^0,w,c
  4123  00657C  5804               	subwfb	(___llmod@dividend+3)^0,w,c
  4124  00657E  A0D8               	btfss	status,0,c
  4125  006580  D008               	goto	l3057
  4126  006582  5005               	movf	___llmod@divisor^0,w,c
  4127  006584  5E01               	subwf	___llmod@dividend^0,f,c
  4128  006586  5006               	movf	(___llmod@divisor+1)^0,w,c
  4129  006588  5A02               	subwfb	(___llmod@dividend+1)^0,f,c
  4130  00658A  5007               	movf	(___llmod@divisor+2)^0,w,c
  4131  00658C  5A03               	subwfb	(___llmod@dividend+2)^0,f,c
  4132  00658E  5008               	movf	(___llmod@divisor+3)^0,w,c
  4133  006590  5A04               	subwfb	(___llmod@dividend+3)^0,f,c
  4134  006592                     l3057:
  4135  006592  90D8               	bcf	status,0,c
  4136  006594  3208               	rrcf	(___llmod@divisor+3)^0,f,c
  4137  006596  3207               	rrcf	(___llmod@divisor+2)^0,f,c
  4138  006598  3206               	rrcf	(___llmod@divisor+1)^0,f,c
  4139  00659A  3205               	rrcf	___llmod@divisor^0,f,c
  4140  00659C  2E09               	decfsz	___llmod@counter^0,f,c
  4141  00659E  D7E7               	goto	u2570
  4142  0065A0                     l749:
  4143  0065A0  C001  F001         	movff	___llmod@dividend,?___llmod
  4144  0065A4  C002  F002         	movff	___llmod@dividend+1,?___llmod+1
  4145  0065A8  C003  F003         	movff	___llmod@dividend+2,?___llmod+2
  4146  0065AC  C004  F004         	movff	___llmod@dividend+3,?___llmod+3
  4147  0065B0  0012               	return		;funcret
  4148  0065B2                     __end_of___llmod:
  4149                           	opt callstack 0
  4150                           
  4151 ;; *************** function ___lldiv *****************
  4152 ;; Defined at:
  4153 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\__lldiv.c"
  4154 ;; Parameters:    Size  Location     Type
  4155 ;;  dividend        4    0[COMRAM] unsigned long 
  4156 ;;  divisor         4    4[COMRAM] unsigned long 
  4157 ;; Auto vars:     Size  Location     Type
  4158 ;;  quotient        4    8[COMRAM] unsigned long 
  4159 ;;  counter         1   12[COMRAM] unsigned char 
  4160 ;; Return value:  Size  Location     Type
  4161 ;;                  4    0[COMRAM] unsigned long 
  4162 ;; Registers used:
  4163 ;;		wreg, status,2, status,0
  4164 ;; Tracked objects:
  4165 ;;		On entry : 0/0
  4166 ;;		On exit  : 0/0
  4167 ;;		Unchanged: 0/0
  4168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4169 ;;      Params:         8       0       0       0       0       0       0       0       0
  4170 ;;      Locals:         5       0       0       0       0       0       0       0       0
  4171 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4172 ;;      Totals:        13       0       0       0       0       0       0       0       0
  4173 ;;Total ram usage:       13 bytes
  4174 ;; Hardware stack levels used:    1
  4175 ;; This function calls:
  4176 ;;		Nothing
  4177 ;; This function is called by:
  4178 ;;		_sprintf
  4179 ;; This function uses a non-reentrant model
  4180 ;;
  4181                           
  4182                           	psect	text15
  4183  006696                     __ptext15:
  4184                           	opt callstack 0
  4185  006696                     ___lldiv:
  4186                           	opt callstack 29
  4187                           
  4188                           ;incstack = 0
  4189  006696  0E00               	movlw	0
  4190  006698  6E09               	movwf	___lldiv@quotient^0,c
  4191  00669A  0E00               	movlw	0
  4192  00669C  6E0A               	movwf	(___lldiv@quotient+1)^0,c
  4193  00669E  0E00               	movlw	0
  4194  0066A0  6E0B               	movwf	(___lldiv@quotient+2)^0,c
  4195  0066A2  0E00               	movlw	0
  4196  0066A4  6E0C               	movwf	(___lldiv@quotient+3)^0,c
  4197  0066A6  5005               	movf	___lldiv@divisor^0,w,c
  4198  0066A8  1006               	iorwf	(___lldiv@divisor+1)^0,w,c
  4199  0066AA  1007               	iorwf	(___lldiv@divisor+2)^0,w,c
  4200  0066AC  1008               	iorwf	(___lldiv@divisor+3)^0,w,c
  4201  0066AE  B4D8               	btfsc	status,2,c
  4202  0066B0  D02A               	goto	l334
  4203  0066B2  0E01               	movlw	1
  4204  0066B4  6E0D               	movwf	___lldiv@counter^0,c
  4205  0066B6  D006               	goto	l2955
  4206  0066B8                     l2953:
  4207  0066B8  90D8               	bcf	status,0,c
  4208  0066BA  3605               	rlcf	___lldiv@divisor^0,f,c
  4209  0066BC  3606               	rlcf	(___lldiv@divisor+1)^0,f,c
  4210  0066BE  3607               	rlcf	(___lldiv@divisor+2)^0,f,c
  4211  0066C0  3608               	rlcf	(___lldiv@divisor+3)^0,f,c
  4212  0066C2  2A0D               	incf	___lldiv@counter^0,f,c
  4213  0066C4                     l2955:
  4214  0066C4  AE08               	btfss	(___lldiv@divisor+3)^0,7,c
  4215  0066C6  D7F8               	goto	l2953
  4216  0066C8                     u2410:
  4217  0066C8  90D8               	bcf	status,0,c
  4218  0066CA  3609               	rlcf	___lldiv@quotient^0,f,c
  4219  0066CC  360A               	rlcf	(___lldiv@quotient+1)^0,f,c
  4220  0066CE  360B               	rlcf	(___lldiv@quotient+2)^0,f,c
  4221  0066D0  360C               	rlcf	(___lldiv@quotient+3)^0,f,c
  4222  0066D2  5005               	movf	___lldiv@divisor^0,w,c
  4223  0066D4  5C01               	subwf	___lldiv@dividend^0,w,c
  4224  0066D6  5006               	movf	(___lldiv@divisor+1)^0,w,c
  4225  0066D8  5802               	subwfb	(___lldiv@dividend+1)^0,w,c
  4226  0066DA  5007               	movf	(___lldiv@divisor+2)^0,w,c
  4227  0066DC  5803               	subwfb	(___lldiv@dividend+2)^0,w,c
  4228  0066DE  5008               	movf	(___lldiv@divisor+3)^0,w,c
  4229  0066E0  5804               	subwfb	(___lldiv@dividend+3)^0,w,c
  4230  0066E2  A0D8               	btfss	status,0,c
  4231  0066E4  D009               	goto	l2965
  4232  0066E6  5005               	movf	___lldiv@divisor^0,w,c
  4233  0066E8  5E01               	subwf	___lldiv@dividend^0,f,c
  4234  0066EA  5006               	movf	(___lldiv@divisor+1)^0,w,c
  4235  0066EC  5A02               	subwfb	(___lldiv@dividend+1)^0,f,c
  4236  0066EE  5007               	movf	(___lldiv@divisor+2)^0,w,c
  4237  0066F0  5A03               	subwfb	(___lldiv@dividend+2)^0,f,c
  4238  0066F2  5008               	movf	(___lldiv@divisor+3)^0,w,c
  4239  0066F4  5A04               	subwfb	(___lldiv@dividend+3)^0,f,c
  4240  0066F6  8009               	bsf	___lldiv@quotient^0,0,c
  4241  0066F8                     l2965:
  4242  0066F8  90D8               	bcf	status,0,c
  4243  0066FA  3208               	rrcf	(___lldiv@divisor+3)^0,f,c
  4244  0066FC  3207               	rrcf	(___lldiv@divisor+2)^0,f,c
  4245  0066FE  3206               	rrcf	(___lldiv@divisor+1)^0,f,c
  4246  006700  3205               	rrcf	___lldiv@divisor^0,f,c
  4247  006702  2E0D               	decfsz	___lldiv@counter^0,f,c
  4248  006704  D7E1               	goto	u2410
  4249  006706                     l334:
  4250  006706  C009  F001         	movff	___lldiv@quotient,?___lldiv
  4251  00670A  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  4252  00670E  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  4253  006712  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  4254  006716  0012               	return		;funcret
  4255  006718                     __end_of___lldiv:
  4256                           	opt callstack 0
  4257                           
  4258 ;; *************** function ___fttol *****************
  4259 ;; Defined at:
  4260 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\fttol.c"
  4261 ;; Parameters:    Size  Location     Type
  4262 ;;  f1              3   40[COMRAM] float 
  4263 ;; Auto vars:     Size  Location     Type
  4264 ;;  lval            4   50[COMRAM] unsigned long 
  4265 ;;  exp1            1   54[COMRAM] unsigned char 
  4266 ;;  sign1           1   49[COMRAM] unsigned char 
  4267 ;; Return value:  Size  Location     Type
  4268 ;;                  4   40[COMRAM] long 
  4269 ;; Registers used:
  4270 ;;		wreg, status,2, status,0
  4271 ;; Tracked objects:
  4272 ;;		On entry : 0/0
  4273 ;;		On exit  : 0/0
  4274 ;;		Unchanged: 0/0
  4275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4276 ;;      Params:         4       0       0       0       0       0       0       0       0
  4277 ;;      Locals:         6       0       0       0       0       0       0       0       0
  4278 ;;      Temps:          5       0       0       0       0       0       0       0       0
  4279 ;;      Totals:        15       0       0       0       0       0       0       0       0
  4280 ;;Total ram usage:       15 bytes
  4281 ;; Hardware stack levels used:    1
  4282 ;; This function calls:
  4283 ;;		Nothing
  4284 ;; This function is called by:
  4285 ;;		_sprintf
  4286 ;; This function uses a non-reentrant model
  4287 ;;
  4288                           
  4289                           	psect	text16
  4290  00684A                     __ptext16:
  4291                           	opt callstack 0
  4292  00684A                     ___fttol:
  4293                           	opt callstack 29
  4294                           
  4295                           ;incstack = 0
  4296  00684A  C02B  F02D         	movff	___fttol@f1+2,??___fttol
  4297  00684E  6A2E               	clrf	(??___fttol+1)^0,c
  4298  006850  6A2F               	clrf	(??___fttol+2)^0,c
  4299  006852  342A               	rlcf	(___fttol@f1+1)^0,w,c
  4300  006854  362D               	rlcf	??___fttol^0,f,c
  4301  006856  E301               	bnc	u2481
  4302  006858  802E               	bsf	(??___fttol+1)^0,0,c
  4303  00685A                     u2481:
  4304  00685A  502D               	movf	??___fttol^0,w,c
  4305  00685C  6E37               	movwf	___fttol@exp1^0,c
  4306  00685E  5037               	movf	___fttol@exp1^0,w,c
  4307  006860  A4D8               	btfss	status,2,c
  4308  006862  D009               	goto	l3005
  4309  006864                     u2490:
  4310  006864  0E00               	movlw	0
  4311  006866  6E29               	movwf	?___fttol^0,c
  4312  006868  0E00               	movlw	0
  4313  00686A  6E2A               	movwf	(?___fttol+1)^0,c
  4314  00686C  0E00               	movlw	0
  4315  00686E  6E2B               	movwf	(?___fttol+2)^0,c
  4316  006870  0E00               	movlw	0
  4317  006872  6E2C               	movwf	(?___fttol+3)^0,c
  4318  006874  0012               	return	
  4319  006876                     l3005:
  4320  006876  0E17               	movlw	23
  4321  006878  6E2D               	movwf	??___fttol^0,c
  4322  00687A  C029  F02E         	movff	___fttol@f1,??___fttol+1
  4323  00687E  C02A  F02F         	movff	___fttol@f1+1,??___fttol+2
  4324  006882  C02B  F030         	movff	___fttol@f1+2,??___fttol+3
  4325  006886  282D               	incf	??___fttol^0,w,c
  4326  006888  6E31               	movwf	(??___fttol+4)^0,c
  4327  00688A  D004               	goto	u2500
  4328  00688C                     u2505:
  4329  00688C  90D8               	bcf	status,0,c
  4330  00688E  3230               	rrcf	(??___fttol+3)^0,f,c
  4331  006890  322F               	rrcf	(??___fttol+2)^0,f,c
  4332  006892  322E               	rrcf	(??___fttol+1)^0,f,c
  4333  006894                     u2500:
  4334  006894  2E31               	decfsz	(??___fttol+4)^0,f,c
  4335  006896  D7FA               	goto	u2505
  4336  006898  502E               	movf	(??___fttol+1)^0,w,c
  4337  00689A  6E32               	movwf	___fttol@sign1^0,c
  4338  00689C  8E2A               	bsf	(___fttol@f1+1)^0,7,c
  4339  00689E  0EFF               	movlw	255
  4340  0068A0  1629               	andwf	___fttol@f1^0,f,c
  4341  0068A2  0EFF               	movlw	255
  4342  0068A4  162A               	andwf	(___fttol@f1+1)^0,f,c
  4343  0068A6  0E00               	movlw	0
  4344  0068A8  162B               	andwf	(___fttol@f1+2)^0,f,c
  4345  0068AA  5029               	movf	___fttol@f1^0,w,c
  4346  0068AC  6E33               	movwf	___fttol@lval^0,c
  4347  0068AE  502A               	movf	(___fttol@f1+1)^0,w,c
  4348  0068B0  6E34               	movwf	(___fttol@lval+1)^0,c
  4349  0068B2  502B               	movf	(___fttol@f1+2)^0,w,c
  4350  0068B4  6E35               	movwf	(___fttol@lval+2)^0,c
  4351  0068B6  6A36               	clrf	(___fttol@lval+3)^0,c
  4352  0068B8  0E8E               	movlw	142
  4353  0068BA  5E37               	subwf	___fttol@exp1^0,f,c
  4354  0068BC  AE37               	btfss	___fttol@exp1^0,7,c
  4355  0068BE  D00D               	goto	l3027
  4356  0068C0  5037               	movf	___fttol@exp1^0,w,c
  4357  0068C2  0A80               	xorlw	128
  4358  0068C4  0F8F               	addlw	143
  4359  0068C6  A0D8               	btfss	status,0,c
  4360  0068C8  D7CD               	goto	u2490
  4361  0068CA                     l3023:
  4362  0068CA  90D8               	bcf	status,0,c
  4363  0068CC  3236               	rrcf	(___fttol@lval+3)^0,f,c
  4364  0068CE  3235               	rrcf	(___fttol@lval+2)^0,f,c
  4365  0068D0  3234               	rrcf	(___fttol@lval+1)^0,f,c
  4366  0068D2  3233               	rrcf	___fttol@lval^0,f,c
  4367  0068D4  3E37               	incfsz	___fttol@exp1^0,f,c
  4368  0068D6  D7F9               	goto	l3023
  4369  0068D8  D00D               	goto	u2540
  4370  0068DA                     l3027:
  4371  0068DA  0E17               	movlw	23
  4372  0068DC  6437               	cpfsgt	___fttol@exp1^0,c
  4373  0068DE  D007               	goto	l3035
  4374  0068E0  D7C1               	goto	u2490
  4375  0068E2                     l3033:
  4376  0068E2  90D8               	bcf	status,0,c
  4377  0068E4  3633               	rlcf	___fttol@lval^0,f,c
  4378  0068E6  3634               	rlcf	(___fttol@lval+1)^0,f,c
  4379  0068E8  3635               	rlcf	(___fttol@lval+2)^0,f,c
  4380  0068EA  3636               	rlcf	(___fttol@lval+3)^0,f,c
  4381  0068EC  0637               	decf	___fttol@exp1^0,f,c
  4382  0068EE                     l3035:
  4383  0068EE  5037               	movf	___fttol@exp1^0,w,c
  4384  0068F0  A4D8               	btfss	status,2,c
  4385  0068F2  D7F7               	goto	l3033
  4386  0068F4                     u2540:
  4387  0068F4  5032               	movf	___fttol@sign1^0,w,c
  4388  0068F6  B4D8               	btfsc	status,2,c
  4389  0068F8  D008               	goto	l3041
  4390  0068FA  1E36               	comf	(___fttol@lval+3)^0,f,c
  4391  0068FC  1E35               	comf	(___fttol@lval+2)^0,f,c
  4392  0068FE  1E34               	comf	(___fttol@lval+1)^0,f,c
  4393  006900  6C33               	negf	___fttol@lval^0,c
  4394  006902  0E00               	movlw	0
  4395  006904  2234               	addwfc	(___fttol@lval+1)^0,f,c
  4396  006906  2235               	addwfc	(___fttol@lval+2)^0,f,c
  4397  006908  2236               	addwfc	(___fttol@lval+3)^0,f,c
  4398  00690A                     l3041:
  4399  00690A  C033  F029         	movff	___fttol@lval,?___fttol
  4400  00690E  C034  F02A         	movff	___fttol@lval+1,?___fttol+1
  4401  006912  C035  F02B         	movff	___fttol@lval+2,?___fttol+2
  4402  006916  C036  F02C         	movff	___fttol@lval+3,?___fttol+3
  4403  00691A  0012               	return		;funcret
  4404  00691C                     __end_of___fttol:
  4405                           	opt callstack 0
  4406                           
  4407 ;; *************** function ___ftsub *****************
  4408 ;; Defined at:
  4409 ;;		line 19 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\ftsub.c"
  4410 ;; Parameters:    Size  Location     Type
  4411 ;;  f1              3   55[COMRAM] float 
  4412 ;;  f2              3   58[COMRAM] float 
  4413 ;; Auto vars:     Size  Location     Type
  4414 ;;		None
  4415 ;; Return value:  Size  Location     Type
  4416 ;;                  3   55[COMRAM] float 
  4417 ;; Registers used:
  4418 ;;		wreg, status,2, status,0, cstack
  4419 ;; Tracked objects:
  4420 ;;		On entry : 0/0
  4421 ;;		On exit  : 0/0
  4422 ;;		Unchanged: 0/0
  4423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4424 ;;      Params:         6       0       0       0       0       0       0       0       0
  4425 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4426 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4427 ;;      Totals:         6       0       0       0       0       0       0       0       0
  4428 ;;Total ram usage:        6 bytes
  4429 ;; Hardware stack levels used:    1
  4430 ;; Hardware stack levels required when called:    2
  4431 ;; This function calls:
  4432 ;;		___ftadd
  4433 ;; This function is called by:
  4434 ;;		_main
  4435 ;;		_sprintf
  4436 ;; This function uses a non-reentrant model
  4437 ;;
  4438                           
  4439                           	psect	text17
  4440  0063C4                     __ptext17:
  4441                           	opt callstack 0
  4442  0063C4                     ___ftsub:
  4443                           	opt callstack 27
  4444                           
  4445                           ;incstack = 0
  4446  0063C4  503B               	movf	___ftsub@f2^0,w,c
  4447  0063C6  103C               	iorwf	(___ftsub@f2+1)^0,w,c
  4448  0063C8  103D               	iorwf	(___ftsub@f2+2)^0,w,c
  4449  0063CA  B4D8               	btfsc	status,2,c
  4450  0063CC  D006               	goto	l2973
  4451  0063CE  0E00               	movlw	0
  4452  0063D0  1A3B               	xorwf	___ftsub@f2^0,f,c
  4453  0063D2  0E00               	movlw	0
  4454  0063D4  1A3C               	xorwf	(___ftsub@f2+1)^0,f,c
  4455  0063D6  0E80               	movlw	128
  4456  0063D8  1A3D               	xorwf	(___ftsub@f2+2)^0,f,c
  4457  0063DA                     l2973:
  4458  0063DA  C038  F02C         	movff	___ftsub@f1,___ftadd@f1
  4459  0063DE  C039  F02D         	movff	___ftsub@f1+1,___ftadd@f1+1
  4460  0063E2  C03A  F02E         	movff	___ftsub@f1+2,___ftadd@f1+2
  4461  0063E6  C03B  F02F         	movff	___ftsub@f2,___ftadd@f2
  4462  0063EA  C03C  F030         	movff	___ftsub@f2+1,___ftadd@f2+1
  4463  0063EE  C03D  F031         	movff	___ftsub@f2+2,___ftadd@f2+2
  4464  0063F2  ECF1  F036         	call	___ftadd	;wreg free
  4465  0063F6  C02C  F038         	movff	?___ftadd,?___ftsub
  4466  0063FA  C02D  F039         	movff	?___ftadd+1,?___ftsub+1
  4467  0063FE  C02E  F03A         	movff	?___ftadd+2,?___ftsub+2
  4468  006402  0012               	return		;funcret
  4469  006404                     __end_of___ftsub:
  4470                           	opt callstack 0
  4471                           
  4472 ;; *************** function ___ftadd *****************
  4473 ;; Defined at:
  4474 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\ftadd.c"
  4475 ;; Parameters:    Size  Location     Type
  4476 ;;  f1              3   43[COMRAM] float 
  4477 ;;  f2              3   46[COMRAM] float 
  4478 ;; Auto vars:     Size  Location     Type
  4479 ;;  exp1            1   54[COMRAM] unsigned char 
  4480 ;;  exp2            1   53[COMRAM] unsigned char 
  4481 ;;  sign            1   52[COMRAM] unsigned char 
  4482 ;; Return value:  Size  Location     Type
  4483 ;;                  3   43[COMRAM] float 
  4484 ;; Registers used:
  4485 ;;		wreg, status,2, status,0, cstack
  4486 ;; Tracked objects:
  4487 ;;		On entry : 0/0
  4488 ;;		On exit  : 0/0
  4489 ;;		Unchanged: 0/0
  4490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4491 ;;      Params:         6       0       0       0       0       0       0       0       0
  4492 ;;      Locals:         3       0       0       0       0       0       0       0       0
  4493 ;;      Temps:          3       0       0       0       0       0       0       0       0
  4494 ;;      Totals:        12       0       0       0       0       0       0       0       0
  4495 ;;Total ram usage:       12 bytes
  4496 ;; Hardware stack levels used:    1
  4497 ;; Hardware stack levels required when called:    1
  4498 ;; This function calls:
  4499 ;;		___ftpack
  4500 ;; This function is called by:
  4501 ;;		_main
  4502 ;;		_sprintf
  4503 ;;		___ftsub
  4504 ;; This function uses a non-reentrant model
  4505 ;;
  4506                           
  4507                           	psect	text18
  4508  006DE2                     __ptext18:
  4509                           	opt callstack 0
  4510  006DE2                     ___ftadd:
  4511                           	opt callstack 27
  4512                           
  4513                           ;incstack = 0
  4514  006DE2  C02E  F032         	movff	___ftadd@f1+2,??___ftadd
  4515  006DE6  6A33               	clrf	(??___ftadd+1)^0,c
  4516  006DE8  6A34               	clrf	(??___ftadd+2)^0,c
  4517  006DEA  342D               	rlcf	(___ftadd@f1+1)^0,w,c
  4518  006DEC  3632               	rlcf	??___ftadd^0,f,c
  4519  006DEE  E301               	bnc	u1631
  4520  006DF0  8033               	bsf	(??___ftadd+1)^0,0,c
  4521  006DF2                     u1631:
  4522  006DF2  5032               	movf	??___ftadd^0,w,c
  4523  006DF4  6E37               	movwf	___ftadd@exp1^0,c
  4524  006DF6  C031  F032         	movff	___ftadd@f2+2,??___ftadd
  4525  006DFA  6A33               	clrf	(??___ftadd+1)^0,c
  4526  006DFC  6A34               	clrf	(??___ftadd+2)^0,c
  4527  006DFE  3430               	rlcf	(___ftadd@f2+1)^0,w,c
  4528  006E00  3632               	rlcf	??___ftadd^0,f,c
  4529  006E02  E301               	bnc	u1641
  4530  006E04  8033               	bsf	(??___ftadd+1)^0,0,c
  4531  006E06                     u1641:
  4532  006E06  5032               	movf	??___ftadd^0,w,c
  4533  006E08  6E36               	movwf	___ftadd@exp2^0,c
  4534  006E0A  5037               	movf	___ftadd@exp1^0,w,c
  4535  006E0C  B4D8               	btfsc	status,2,c
  4536  006E0E  D00A               	goto	u1670
  4537  006E10  5036               	movf	___ftadd@exp2^0,w,c
  4538  006E12  5C37               	subwf	___ftadd@exp1^0,w,c
  4539  006E14  B0D8               	btfsc	status,0,c
  4540  006E16  D00D               	goto	l2443
  4541  006E18  5037               	movf	___ftadd@exp1^0,w,c
  4542  006E1A  5C36               	subwf	___ftadd@exp2^0,w,c
  4543  006E1C  6E32               	movwf	??___ftadd^0,c
  4544  006E1E  0E18               	movlw	24
  4545  006E20  6432               	cpfsgt	??___ftadd^0,c
  4546  006E22  D007               	goto	l2443
  4547  006E24                     u1670:
  4548  006E24  C02F  F02C         	movff	___ftadd@f2,?___ftadd
  4549  006E28  C030  F02D         	movff	___ftadd@f2+1,?___ftadd+1
  4550  006E2C  C031  F02E         	movff	___ftadd@f2+2,?___ftadd+2
  4551  006E30  0012               	return	
  4552  006E32                     l2443:
  4553  006E32  5036               	movf	___ftadd@exp2^0,w,c
  4554  006E34  B4D8               	btfsc	status,2,c
  4555  006E36  D00A               	goto	u1700
  4556  006E38  5037               	movf	___ftadd@exp1^0,w,c
  4557  006E3A  5C36               	subwf	___ftadd@exp2^0,w,c
  4558  006E3C  B0D8               	btfsc	status,0,c
  4559  006E3E  D00D               	goto	l2449
  4560  006E40  5036               	movf	___ftadd@exp2^0,w,c
  4561  006E42  5C37               	subwf	___ftadd@exp1^0,w,c
  4562  006E44  6E32               	movwf	??___ftadd^0,c
  4563  006E46  0E18               	movlw	24
  4564  006E48  6432               	cpfsgt	??___ftadd^0,c
  4565  006E4A  D007               	goto	l2449
  4566  006E4C                     u1700:
  4567  006E4C  C02C  F02C         	movff	___ftadd@f1,?___ftadd
  4568  006E50  C02D  F02D         	movff	___ftadd@f1+1,?___ftadd+1
  4569  006E54  C02E  F02E         	movff	___ftadd@f1+2,?___ftadd+2
  4570  006E58  0012               	return	
  4571  006E5A                     l2449:
  4572  006E5A  0E06               	movlw	6
  4573  006E5C  6E35               	movwf	___ftadd@sign^0,c
  4574  006E5E  BE2E               	btfsc	(___ftadd@f1+2)^0,7,c
  4575  006E60  8E35               	bsf	___ftadd@sign^0,7,c
  4576  006E62  BE31               	btfsc	(___ftadd@f2+2)^0,7,c
  4577  006E64  8C35               	bsf	___ftadd@sign^0,6,c
  4578  006E66  8E2D               	bsf	(___ftadd@f1+1)^0,7,c
  4579  006E68  0EFF               	movlw	255
  4580  006E6A  162C               	andwf	___ftadd@f1^0,f,c
  4581  006E6C  0EFF               	movlw	255
  4582  006E6E  162D               	andwf	(___ftadd@f1+1)^0,f,c
  4583  006E70  0E00               	movlw	0
  4584  006E72  162E               	andwf	(___ftadd@f1+2)^0,f,c
  4585  006E74  8E30               	bsf	(___ftadd@f2+1)^0,7,c
  4586  006E76  0EFF               	movlw	255
  4587  006E78  162F               	andwf	___ftadd@f2^0,f,c
  4588  006E7A  0EFF               	movlw	255
  4589  006E7C  1630               	andwf	(___ftadd@f2+1)^0,f,c
  4590  006E7E  0E00               	movlw	0
  4591  006E80  1631               	andwf	(___ftadd@f2+2)^0,f,c
  4592  006E82  5036               	movf	___ftadd@exp2^0,w,c
  4593  006E84  5C37               	subwf	___ftadd@exp1^0,w,c
  4594  006E86  B0D8               	btfsc	status,0,c
  4595  006E88  D01B               	goto	l2475
  4596  006E8A                     u1730:
  4597  006E8A  90D8               	bcf	status,0,c
  4598  006E8C  362F               	rlcf	___ftadd@f2^0,f,c
  4599  006E8E  3630               	rlcf	(___ftadd@f2+1)^0,f,c
  4600  006E90  3631               	rlcf	(___ftadd@f2+2)^0,f,c
  4601  006E92  0636               	decf	___ftadd@exp2^0,f,c
  4602  006E94  5037               	movf	___ftadd@exp1^0,w,c
  4603  006E96  1836               	xorwf	___ftadd@exp2^0,w,c
  4604  006E98  B4D8               	btfsc	status,2,c
  4605  006E9A  D00D               	goto	l2473
  4606  006E9C  0635               	decf	___ftadd@sign^0,f,c
  4607  006E9E  C035  F032         	movff	___ftadd@sign,??___ftadd
  4608  006EA2  0E07               	movlw	7
  4609  006EA4  1632               	andwf	??___ftadd^0,f,c
  4610  006EA6  B4D8               	btfsc	status,2,c
  4611  006EA8  D006               	goto	l2473
  4612  006EAA  D7EF               	goto	u1730
  4613  006EAC                     l2471:
  4614  006EAC  90D8               	bcf	status,0,c
  4615  006EAE  322E               	rrcf	(___ftadd@f1+2)^0,f,c
  4616  006EB0  322D               	rrcf	(___ftadd@f1+1)^0,f,c
  4617  006EB2  322C               	rrcf	___ftadd@f1^0,f,c
  4618  006EB4  2A37               	incf	___ftadd@exp1^0,f,c
  4619  006EB6                     l2473:
  4620  006EB6  5036               	movf	___ftadd@exp2^0,w,c
  4621  006EB8  1837               	xorwf	___ftadd@exp1^0,w,c
  4622  006EBA  B4D8               	btfsc	status,2,c
  4623  006EBC  D01F               	goto	u1800
  4624  006EBE  D7F6               	goto	l2471
  4625  006EC0                     l2475:
  4626  006EC0  5037               	movf	___ftadd@exp1^0,w,c
  4627  006EC2  5C36               	subwf	___ftadd@exp2^0,w,c
  4628  006EC4  B0D8               	btfsc	status,0,c
  4629  006EC6  D01A               	goto	u1800
  4630  006EC8                     u1770:
  4631  006EC8  90D8               	bcf	status,0,c
  4632  006ECA  362C               	rlcf	___ftadd@f1^0,f,c
  4633  006ECC  362D               	rlcf	(___ftadd@f1+1)^0,f,c
  4634  006ECE  362E               	rlcf	(___ftadd@f1+2)^0,f,c
  4635  006ED0  0637               	decf	___ftadd@exp1^0,f,c
  4636  006ED2  5037               	movf	___ftadd@exp1^0,w,c
  4637  006ED4  1836               	xorwf	___ftadd@exp2^0,w,c
  4638  006ED6  B4D8               	btfsc	status,2,c
  4639  006ED8  D00D               	goto	l2485
  4640  006EDA  0635               	decf	___ftadd@sign^0,f,c
  4641  006EDC  C035  F032         	movff	___ftadd@sign,??___ftadd
  4642  006EE0  0E07               	movlw	7
  4643  006EE2  1632               	andwf	??___ftadd^0,f,c
  4644  006EE4  B4D8               	btfsc	status,2,c
  4645  006EE6  D006               	goto	l2485
  4646  006EE8  D7EF               	goto	u1770
  4647  006EEA                     l2483:
  4648  006EEA  90D8               	bcf	status,0,c
  4649  006EEC  3231               	rrcf	(___ftadd@f2+2)^0,f,c
  4650  006EEE  3230               	rrcf	(___ftadd@f2+1)^0,f,c
  4651  006EF0  322F               	rrcf	___ftadd@f2^0,f,c
  4652  006EF2  2A36               	incf	___ftadd@exp2^0,f,c
  4653  006EF4                     l2485:
  4654  006EF4  5036               	movf	___ftadd@exp2^0,w,c
  4655  006EF6  1837               	xorwf	___ftadd@exp1^0,w,c
  4656  006EF8  A4D8               	btfss	status,2,c
  4657  006EFA  D7F7               	goto	l2483
  4658  006EFC                     u1800:
  4659  006EFC  AE35               	btfss	___ftadd@sign^0,7,c
  4660  006EFE  D00C               	goto	l654
  4661  006F00  0EFF               	movlw	255
  4662  006F02  1A2C               	xorwf	___ftadd@f1^0,f,c
  4663  006F04  0EFF               	movlw	255
  4664  006F06  1A2D               	xorwf	(___ftadd@f1+1)^0,f,c
  4665  006F08  0EFF               	movlw	255
  4666  006F0A  1A2E               	xorwf	(___ftadd@f1+2)^0,f,c
  4667  006F0C  0E01               	movlw	1
  4668  006F0E  262C               	addwf	___ftadd@f1^0,f,c
  4669  006F10  0E00               	movlw	0
  4670  006F12  222D               	addwfc	(___ftadd@f1+1)^0,f,c
  4671  006F14  0E00               	movlw	0
  4672  006F16  222E               	addwfc	(___ftadd@f1+2)^0,f,c
  4673  006F18                     l654:
  4674  006F18  AC35               	btfss	___ftadd@sign^0,6,c
  4675  006F1A  D00C               	goto	l2491
  4676  006F1C  0EFF               	movlw	255
  4677  006F1E  1A2F               	xorwf	___ftadd@f2^0,f,c
  4678  006F20  0EFF               	movlw	255
  4679  006F22  1A30               	xorwf	(___ftadd@f2+1)^0,f,c
  4680  006F24  0EFF               	movlw	255
  4681  006F26  1A31               	xorwf	(___ftadd@f2+2)^0,f,c
  4682  006F28  0E01               	movlw	1
  4683  006F2A  262F               	addwf	___ftadd@f2^0,f,c
  4684  006F2C  0E00               	movlw	0
  4685  006F2E  2230               	addwfc	(___ftadd@f2+1)^0,f,c
  4686  006F30  0E00               	movlw	0
  4687  006F32  2231               	addwfc	(___ftadd@f2+2)^0,f,c
  4688  006F34                     l2491:
  4689  006F34  0E00               	movlw	0
  4690  006F36  6E35               	movwf	___ftadd@sign^0,c
  4691  006F38  502C               	movf	___ftadd@f1^0,w,c
  4692  006F3A  262F               	addwf	___ftadd@f2^0,f,c
  4693  006F3C  502D               	movf	(___ftadd@f1+1)^0,w,c
  4694  006F3E  2230               	addwfc	(___ftadd@f2+1)^0,f,c
  4695  006F40  502E               	movf	(___ftadd@f1+2)^0,w,c
  4696  006F42  2231               	addwfc	(___ftadd@f2+2)^0,f,c
  4697  006F44  AE31               	btfss	(___ftadd@f2+2)^0,7,c
  4698  006F46  D00E               	goto	l2501
  4699  006F48  0EFF               	movlw	255
  4700  006F4A  1A2F               	xorwf	___ftadd@f2^0,f,c
  4701  006F4C  0EFF               	movlw	255
  4702  006F4E  1A30               	xorwf	(___ftadd@f2+1)^0,f,c
  4703  006F50  0EFF               	movlw	255
  4704  006F52  1A31               	xorwf	(___ftadd@f2+2)^0,f,c
  4705  006F54  0E01               	movlw	1
  4706  006F56  262F               	addwf	___ftadd@f2^0,f,c
  4707  006F58  0E00               	movlw	0
  4708  006F5A  2230               	addwfc	(___ftadd@f2+1)^0,f,c
  4709  006F5C  0E00               	movlw	0
  4710  006F5E  2231               	addwfc	(___ftadd@f2+2)^0,f,c
  4711  006F60  0E01               	movlw	1
  4712  006F62  6E35               	movwf	___ftadd@sign^0,c
  4713  006F64                     l2501:
  4714  006F64  C02F  F001         	movff	___ftadd@f2,___ftpack@arg
  4715  006F68  C030  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  4716  006F6C  C031  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  4717  006F70  C037  F004         	movff	___ftadd@exp1,___ftpack@exp
  4718  006F74  C035  F005         	movff	___ftadd@sign,___ftpack@sign
  4719  006F78  ECCE  F033         	call	___ftpack	;wreg free
  4720  006F7C  C001  F02C         	movff	?___ftpack,?___ftadd
  4721  006F80  C002  F02D         	movff	?___ftpack+1,?___ftadd+1
  4722  006F84  C003  F02E         	movff	?___ftpack+2,?___ftadd+2
  4723  006F88  0012               	return		;funcret
  4724  006F8A                     __end_of___ftadd:
  4725                           	opt callstack 0
  4726                           
  4727 ;; *************** function ___ftneg *****************
  4728 ;; Defined at:
  4729 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\ftneg.c"
  4730 ;; Parameters:    Size  Location     Type
  4731 ;;  f1              3    0[COMRAM] float 
  4732 ;; Auto vars:     Size  Location     Type
  4733 ;;		None
  4734 ;; Return value:  Size  Location     Type
  4735 ;;                  3    0[COMRAM] float 
  4736 ;; Registers used:
  4737 ;;		wreg, status,2, status,0
  4738 ;; Tracked objects:
  4739 ;;		On entry : 0/0
  4740 ;;		On exit  : 0/0
  4741 ;;		Unchanged: 0/0
  4742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4743 ;;      Params:         3       0       0       0       0       0       0       0       0
  4744 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4745 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4746 ;;      Totals:         3       0       0       0       0       0       0       0       0
  4747 ;;Total ram usage:        3 bytes
  4748 ;; Hardware stack levels used:    1
  4749 ;; This function calls:
  4750 ;;		Nothing
  4751 ;; This function is called by:
  4752 ;;		_sprintf
  4753 ;; This function uses a non-reentrant model
  4754 ;;
  4755                           
  4756                           	psect	text19
  4757  00622C                     __ptext19:
  4758                           	opt callstack 0
  4759  00622C                     ___ftneg:
  4760                           	opt callstack 29
  4761                           
  4762                           ;incstack = 0
  4763  00622C  5001               	movf	___ftneg@f1^0,w,c
  4764  00622E  1002               	iorwf	(___ftneg@f1+1)^0,w,c
  4765  006230  1003               	iorwf	(___ftneg@f1+2)^0,w,c
  4766  006232  B4D8               	btfsc	status,2,c
  4767  006234  D006               	goto	l704
  4768  006236  0E00               	movlw	0
  4769  006238  1A01               	xorwf	___ftneg@f1^0,f,c
  4770  00623A  0E00               	movlw	0
  4771  00623C  1A02               	xorwf	(___ftneg@f1+1)^0,f,c
  4772  00623E  0E80               	movlw	128
  4773  006240  1A03               	xorwf	(___ftneg@f1+2)^0,f,c
  4774  006242                     l704:
  4775  006242  C001  F001         	movff	___ftneg@f1,?___ftneg
  4776  006246  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
  4777  00624A  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
  4778  00624E  0012               	return		;funcret
  4779  006250                     __end_of___ftneg:
  4780                           	opt callstack 0
  4781                           
  4782 ;; *************** function ___ftge *****************
  4783 ;; Defined at:
  4784 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\ftge.c"
  4785 ;; Parameters:    Size  Location     Type
  4786 ;;  ff1             3    0[COMRAM] float 
  4787 ;;  ff2             3    3[COMRAM] float 
  4788 ;; Auto vars:     Size  Location     Type
  4789 ;;		None
  4790 ;; Return value:  Size  Location     Type
  4791 ;;		None               void
  4792 ;; Registers used:
  4793 ;;		wreg, status,2, status,0
  4794 ;; Tracked objects:
  4795 ;;		On entry : 0/0
  4796 ;;		On exit  : 0/0
  4797 ;;		Unchanged: 0/0
  4798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4799 ;;      Params:         6       0       0       0       0       0       0       0       0
  4800 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4801 ;;      Temps:          3       0       0       0       0       0       0       0       0
  4802 ;;      Totals:         9       0       0       0       0       0       0       0       0
  4803 ;;Total ram usage:        9 bytes
  4804 ;; Hardware stack levels used:    1
  4805 ;; This function calls:
  4806 ;;		Nothing
  4807 ;; This function is called by:
  4808 ;;		_sprintf
  4809 ;; This function uses a non-reentrant model
  4810 ;;
  4811                           
  4812                           	psect	text20
  4813  006622                     __ptext20:
  4814                           	opt callstack 0
  4815  006622                     ___ftge:
  4816                           	opt callstack 29
  4817                           
  4818                           ;incstack = 0
  4819  006622  AE03               	btfss	(___ftge@ff1+2)^0,7,c
  4820  006624  D00F               	goto	l2981
  4821  006626  0E00               	movlw	0
  4822  006628  6E07               	movwf	??___ftge^0,c
  4823  00662A  0E00               	movlw	0
  4824  00662C  6E08               	movwf	(??___ftge+1)^0,c
  4825  00662E  0E80               	movlw	128
  4826  006630  6E09               	movwf	(??___ftge+2)^0,c
  4827  006632  5001               	movf	___ftge@ff1^0,w,c
  4828  006634  5C07               	subwf	??___ftge^0,w,c
  4829  006636  6E01               	movwf	___ftge@ff1^0,c
  4830  006638  5002               	movf	(___ftge@ff1+1)^0,w,c
  4831  00663A  5808               	subwfb	(??___ftge+1)^0,w,c
  4832  00663C  6E02               	movwf	(___ftge@ff1+1)^0,c
  4833  00663E  5003               	movf	(___ftge@ff1+2)^0,w,c
  4834  006640  5809               	subwfb	(??___ftge+2)^0,w,c
  4835  006642  6E03               	movwf	(___ftge@ff1+2)^0,c
  4836  006644                     l2981:
  4837  006644  AE06               	btfss	(___ftge@ff2+2)^0,7,c
  4838  006646  D00F               	goto	l2985
  4839  006648  0E00               	movlw	0
  4840  00664A  6E07               	movwf	??___ftge^0,c
  4841  00664C  0E00               	movlw	0
  4842  00664E  6E08               	movwf	(??___ftge+1)^0,c
  4843  006650  0E80               	movlw	128
  4844  006652  6E09               	movwf	(??___ftge+2)^0,c
  4845  006654  5004               	movf	___ftge@ff2^0,w,c
  4846  006656  5C07               	subwf	??___ftge^0,w,c
  4847  006658  6E04               	movwf	___ftge@ff2^0,c
  4848  00665A  5005               	movf	(___ftge@ff2+1)^0,w,c
  4849  00665C  5808               	subwfb	(??___ftge+1)^0,w,c
  4850  00665E  6E05               	movwf	(___ftge@ff2+1)^0,c
  4851  006660  5006               	movf	(___ftge@ff2+2)^0,w,c
  4852  006662  5809               	subwfb	(??___ftge+2)^0,w,c
  4853  006664  6E06               	movwf	(___ftge@ff2+2)^0,c
  4854  006666                     l2985:
  4855  006666  0E00               	movlw	0
  4856  006668  1A01               	xorwf	___ftge@ff1^0,f,c
  4857  00666A  0E00               	movlw	0
  4858  00666C  1A02               	xorwf	(___ftge@ff1+1)^0,f,c
  4859  00666E  0E80               	movlw	128
  4860  006670  1A03               	xorwf	(___ftge@ff1+2)^0,f,c
  4861  006672  0E00               	movlw	0
  4862  006674  1A04               	xorwf	___ftge@ff2^0,f,c
  4863  006676  0E00               	movlw	0
  4864  006678  1A05               	xorwf	(___ftge@ff2+1)^0,f,c
  4865  00667A  0E80               	movlw	128
  4866  00667C  1A06               	xorwf	(___ftge@ff2+2)^0,f,c
  4867  00667E  5004               	movf	___ftge@ff2^0,w,c
  4868  006680  5C01               	subwf	___ftge@ff1^0,w,c
  4869  006682  5005               	movf	(___ftge@ff2+1)^0,w,c
  4870  006684  5802               	subwfb	(___ftge@ff1+1)^0,w,c
  4871  006686  5006               	movf	(___ftge@ff2+2)^0,w,c
  4872  006688  5803               	subwfb	(___ftge@ff1+2)^0,w,c
  4873  00668A  B0D8               	btfsc	status,0,c
  4874  00668C  D002               	goto	l2991
  4875  00668E  90D8               	bcf	status,0,c
  4876  006690  0012               	return	
  4877  006692                     l2991:
  4878  006692  80D8               	bsf	status,0,c
  4879  006694  0012               	return		;funcret
  4880  006696                     __end_of___ftge:
  4881                           	opt callstack 0
  4882                           
  4883 ;; *************** function _putsXLCD *****************
  4884 ;; Defined at:
  4885 ;;		line 16 in file "XLCD/putsxlcd.c"
  4886 ;; Parameters:    Size  Location     Type
  4887 ;;  buffer          2    1[COMRAM] PTR unsigned char 
  4888 ;;		 -> strResultado(5), 
  4889 ;; Auto vars:     Size  Location     Type
  4890 ;;		None
  4891 ;; Return value:  Size  Location     Type
  4892 ;;                  1    wreg      void 
  4893 ;; Registers used:
  4894 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4895 ;; Tracked objects:
  4896 ;;		On entry : 0/0
  4897 ;;		On exit  : 0/0
  4898 ;;		Unchanged: 0/0
  4899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4900 ;;      Params:         2       0       0       0       0       0       0       0       0
  4901 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4902 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4903 ;;      Totals:         2       0       0       0       0       0       0       0       0
  4904 ;;Total ram usage:        2 bytes
  4905 ;; Hardware stack levels used:    1
  4906 ;; Hardware stack levels required when called:    2
  4907 ;; This function calls:
  4908 ;;		_BusyXLCD
  4909 ;;		_WriteDataXLCD
  4910 ;; This function is called by:
  4911 ;;		_main
  4912 ;; This function uses a non-reentrant model
  4913 ;;
  4914                           
  4915                           	psect	text21
  4916  006276                     __ptext21:
  4917                           	opt callstack 0
  4918  006276                     _putsXLCD:
  4919                           	opt callstack 28
  4920                           
  4921                           ;putsxlcd.c: 18: while(*buffer)
  4922                           
  4923                           ;incstack = 0
  4924  006276  D00E               	goto	l3089
  4925  006278                     l3083:
  4926  006278  EC87  F031         	call	_BusyXLCD	;wreg free
  4927  00627C  0900               	iorlw	0
  4928  00627E  A4D8               	btfss	status,2,c
  4929  006280  D7FB               	goto	l3083
  4930                           
  4931                           ;putsxlcd.c: 21: WriteDataXLCD(*buffer);
  4932  006282  C002  FFD9         	movff	putsXLCD@buffer,fsr2l
  4933  006286  C003  FFDA         	movff	putsXLCD@buffer+1,fsr2h
  4934  00628A  50DF               	movf	indf2,w,c
  4935  00628C  ECC3  F031         	call	_WriteDataXLCD
  4936                           
  4937                           ;putsxlcd.c: 22: buffer++;
  4938  006290  4A02               	infsnz	putsXLCD@buffer^0,f,c
  4939  006292  2A03               	incf	(putsXLCD@buffer+1)^0,f,c
  4940  006294                     l3089:
  4941  006294  C002  FFD9         	movff	putsXLCD@buffer,fsr2l
  4942  006298  C003  FFDA         	movff	putsXLCD@buffer+1,fsr2h
  4943  00629C  50DF               	movf	indf2,w,c
  4944  00629E  B4D8               	btfsc	status,2,c
  4945  0062A0  0012               	return	
  4946  0062A2  D7EA               	goto	l3083
  4947  0062A4                     __end_of_putsXLCD:
  4948                           	opt callstack 0
  4949                           
  4950 ;; *************** function _putrsXLCD *****************
  4951 ;; Defined at:
  4952 ;;		line 16 in file "XLCD/putrxlcd.c"
  4953 ;; Parameters:    Size  Location     Type
  4954 ;;  buffer          2    1[COMRAM] PTR const unsigned char 
  4955 ;;		 -> STR_1(15), 
  4956 ;; Auto vars:     Size  Location     Type
  4957 ;;		None
  4958 ;; Return value:  Size  Location     Type
  4959 ;;                  1    wreg      void 
  4960 ;; Registers used:
  4961 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4962 ;; Tracked objects:
  4963 ;;		On entry : 0/0
  4964 ;;		On exit  : 0/0
  4965 ;;		Unchanged: 0/0
  4966 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4967 ;;      Params:         2       0       0       0       0       0       0       0       0
  4968 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4969 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4970 ;;      Totals:         2       0       0       0       0       0       0       0       0
  4971 ;;Total ram usage:        2 bytes
  4972 ;; Hardware stack levels used:    1
  4973 ;; Hardware stack levels required when called:    2
  4974 ;; This function calls:
  4975 ;;		_BusyXLCD
  4976 ;;		_WriteDataXLCD
  4977 ;; This function is called by:
  4978 ;;		_main
  4979 ;; This function uses a non-reentrant model
  4980 ;;
  4981                           
  4982                           	psect	text22
  4983  0062A4                     __ptext22:
  4984                           	opt callstack 0
  4985  0062A4                     _putrsXLCD:
  4986                           	opt callstack 28
  4987                           
  4988                           ;putrxlcd.c: 18: while(*buffer)
  4989                           
  4990                           ;incstack = 0
  4991  0062A4  D00F               	goto	l3079
  4992  0062A6                     l3073:
  4993  0062A6  EC87  F031         	call	_BusyXLCD	;wreg free
  4994  0062AA  0900               	iorlw	0
  4995  0062AC  A4D8               	btfss	status,2,c
  4996  0062AE  D7FB               	goto	l3073
  4997                           
  4998                           ;putrxlcd.c: 21: WriteDataXLCD(*buffer);
  4999  0062B0  C002  FFF6         	movff	putrsXLCD@buffer,tblptrl
  5000  0062B4  C003  FFF7         	movff	putrsXLCD@buffer+1,tblptrh
  5001  0062B8                     	if	0	;tblptru may be non-zero
  5002  0062B8                     	endif
  5003  0062B8                     	if	0	;tblptru may be non-zero
  5004  0062B8                     	endif
  5005  0062B8  0008               	tblrd		*
  5006  0062BA  50F5               	movf	tablat,w,c
  5007  0062BC  ECC3  F031         	call	_WriteDataXLCD
  5008                           
  5009                           ;putrxlcd.c: 22: buffer++;
  5010  0062C0  4A02               	infsnz	putrsXLCD@buffer^0,f,c
  5011  0062C2  2A03               	incf	(putrsXLCD@buffer+1)^0,f,c
  5012  0062C4                     l3079:
  5013  0062C4  C002  FFF6         	movff	putrsXLCD@buffer,tblptrl
  5014  0062C8  C003  FFF7         	movff	putrsXLCD@buffer+1,tblptrh
  5015  0062CC                     	if	0	;tblptru may be non-zero
  5016  0062CC                     	endif
  5017  0062CC                     	if	0	;tblptru may be non-zero
  5018  0062CC                     	endif
  5019  0062CC  0008               	tblrd		*
  5020  0062CE  50F5               	movf	tablat,w,c
  5021  0062D0  0900               	iorlw	0
  5022  0062D2  B4D8               	btfsc	status,2,c
  5023  0062D4  0012               	return	
  5024  0062D6  D7E7               	goto	l3073
  5025  0062D8                     __end_of_putrsXLCD:
  5026                           	opt callstack 0
  5027                           
  5028 ;; *************** function _WriteDataXLCD *****************
  5029 ;; Defined at:
  5030 ;;		line 16 in file "XLCD/writdata.c"
  5031 ;; Parameters:    Size  Location     Type
  5032 ;;  data            1    wreg     unsigned char 
  5033 ;; Auto vars:     Size  Location     Type
  5034 ;;  data            1    0[COMRAM] unsigned char 
  5035 ;; Return value:  Size  Location     Type
  5036 ;;                  1    wreg      void 
  5037 ;; Registers used:
  5038 ;;		wreg, status,2, status,0, cstack
  5039 ;; Tracked objects:
  5040 ;;		On entry : 0/0
  5041 ;;		On exit  : 0/0
  5042 ;;		Unchanged: 0/0
  5043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5044 ;;      Params:         0       0       0       0       0       0       0       0       0
  5045 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5046 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5047 ;;      Totals:         1       0       0       0       0       0       0       0       0
  5048 ;;Total ram usage:        1 bytes
  5049 ;; Hardware stack levels used:    1
  5050 ;; Hardware stack levels required when called:    1
  5051 ;; This function calls:
  5052 ;;		_DelayFor18TCY
  5053 ;; This function is called by:
  5054 ;;		_putrsXLCD
  5055 ;;		_putsXLCD
  5056 ;; This function uses a non-reentrant model
  5057 ;;
  5058                           
  5059                           	psect	text23
  5060  006386                     __ptext23:
  5061                           	opt callstack 0
  5062  006386                     _WriteDataXLCD:
  5063                           	opt callstack 28
  5064                           
  5065                           ;incstack = 0
  5066                           ;WriteDataXLCD@data stored from wreg
  5067  006386  6E01               	movwf	WriteDataXLCD@data^0,c
  5068                           
  5069                           ;writdata.c: 35: TRISD &= 0xf0;
  5070  006388  0EF0               	movlw	240
  5071  00638A  1695               	andwf	149,f,c	;volatile
  5072                           
  5073                           ;writdata.c: 36: PORTD &= 0xf0;
  5074  00638C  0EF0               	movlw	240
  5075  00638E  1683               	andwf	131,f,c	;volatile
  5076                           
  5077                           ;writdata.c: 37: PORTD |= ((data>>4)&0x0f);
  5078  006390  3801               	swapf	WriteDataXLCD@data^0,w,c
  5079  006392  0B0F               	andlw	15
  5080  006394  0B0F               	andlw	15
  5081  006396  1283               	iorwf	131,f,c	;volatile
  5082                           
  5083                           ;writdata.c: 39: LATEbits.LATE0 = 1;
  5084  006398  808D               	bsf	141,0,c	;volatile
  5085                           
  5086                           ;writdata.c: 40: LATEbits.LATE1 = 0;
  5087  00639A  928D               	bcf	141,1,c	;volatile
  5088                           
  5089                           ;writdata.c: 41: DelayFor18TCY();
  5090  00639C  ECB6  F030         	call	_DelayFor18TCY	;wreg free
  5091                           
  5092                           ;writdata.c: 42: LATEbits.LATE2 = 1;
  5093  0063A0  848D               	bsf	141,2,c	;volatile
  5094                           
  5095                           ;writdata.c: 43: DelayFor18TCY();
  5096  0063A2  ECB6  F030         	call	_DelayFor18TCY	;wreg free
  5097                           
  5098                           ;writdata.c: 44: LATEbits.LATE2 = 0;
  5099  0063A6  948D               	bcf	141,2,c	;volatile
  5100                           
  5101                           ;writdata.c: 49: PORTD &= 0xf0;
  5102  0063A8  0EF0               	movlw	240
  5103  0063AA  1683               	andwf	131,f,c	;volatile
  5104                           
  5105                           ;writdata.c: 50: PORTD |= (data&0x0f);
  5106  0063AC  5001               	movf	WriteDataXLCD@data^0,w,c
  5107  0063AE  0B0F               	andlw	15
  5108  0063B0  1283               	iorwf	131,f,c	;volatile
  5109                           
  5110                           ;writdata.c: 52: DelayFor18TCY();
  5111  0063B2  ECB6  F030         	call	_DelayFor18TCY	;wreg free
  5112                           
  5113                           ;writdata.c: 53: LATEbits.LATE2 = 1;
  5114  0063B6  848D               	bsf	141,2,c	;volatile
  5115                           
  5116                           ;writdata.c: 54: DelayFor18TCY();
  5117  0063B8  ECB6  F030         	call	_DelayFor18TCY	;wreg free
  5118                           
  5119                           ;writdata.c: 55: LATEbits.LATE2 = 0;
  5120  0063BC  948D               	bcf	141,2,c	;volatile
  5121                           
  5122                           ;writdata.c: 59: TRISD |= 0x0f;
  5123  0063BE  0E0F               	movlw	15
  5124  0063C0  1295               	iorwf	149,f,c	;volatile
  5125  0063C2  0012               	return		;funcret
  5126  0063C4                     __end_of_WriteDataXLCD:
  5127                           	opt callstack 0
  5128                           
  5129 ;; *************** function _initADC *****************
  5130 ;; Defined at:
  5131 ;;		line 47 in file "main.c"
  5132 ;; Parameters:    Size  Location     Type
  5133 ;;		None
  5134 ;; Auto vars:     Size  Location     Type
  5135 ;;		None
  5136 ;; Return value:  Size  Location     Type
  5137 ;;                  1    wreg      void 
  5138 ;; Registers used:
  5139 ;;		wreg, status,2
  5140 ;; Tracked objects:
  5141 ;;		On entry : 0/0
  5142 ;;		On exit  : 0/0
  5143 ;;		Unchanged: 0/0
  5144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5145 ;;      Params:         0       0       0       0       0       0       0       0       0
  5146 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5147 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5148 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5149 ;;Total ram usage:        0 bytes
  5150 ;; Hardware stack levels used:    1
  5151 ;; This function calls:
  5152 ;;		Nothing
  5153 ;; This function is called by:
  5154 ;;		_main
  5155 ;; This function uses a non-reentrant model
  5156 ;;
  5157                           
  5158                           	psect	text24
  5159  006174                     __ptext24:
  5160                           	opt callstack 0
  5161  006174                     _initADC:
  5162                           	opt callstack 30
  5163                           
  5164                           ;main.c: 48: ADCON0 = 0b00000001;
  5165                           
  5166                           ;incstack = 0
  5167  006174  0E01               	movlw	1
  5168  006176  6EC2               	movwf	194,c	;volatile
  5169                           
  5170                           ;main.c: 50: ADCON1 = 0b00011110;
  5171  006178  0E1E               	movlw	30
  5172  00617A  6EC1               	movwf	193,c	;volatile
  5173                           
  5174                           ;main.c: 51: ADCON2 = 0b10111100;
  5175  00617C  0EBC               	movlw	188
  5176  00617E  6EC0               	movwf	192,c	;volatile
  5177  006180  0012               	return		;funcret
  5178  006182                     __end_of_initADC:
  5179                           	opt callstack 0
  5180                           
  5181 ;; *************** function _inicializacionLCD *****************
  5182 ;; Defined at:
  5183 ;;		line 40 in file "main.c"
  5184 ;; Parameters:    Size  Location     Type
  5185 ;;		None
  5186 ;; Auto vars:     Size  Location     Type
  5187 ;;		None
  5188 ;; Return value:  Size  Location     Type
  5189 ;;                  1    wreg      void 
  5190 ;; Registers used:
  5191 ;;		wreg, status,2, status,0, cstack
  5192 ;; Tracked objects:
  5193 ;;		On entry : 0/0
  5194 ;;		On exit  : 0/0
  5195 ;;		Unchanged: 0/0
  5196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5197 ;;      Params:         0       0       0       0       0       0       0       0       0
  5198 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5199 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5200 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5201 ;;Total ram usage:        0 bytes
  5202 ;; Hardware stack levels used:    1
  5203 ;; Hardware stack levels required when called:    3
  5204 ;; This function calls:
  5205 ;;		_OpenXLCD
  5206 ;;		_WriteCmdXLCD
  5207 ;; This function is called by:
  5208 ;;		_main
  5209 ;; This function uses a non-reentrant model
  5210 ;;
  5211                           
  5212                           	psect	text25
  5213  0061AE                     __ptext25:
  5214                           	opt callstack 0
  5215  0061AE                     _inicializacionLCD:
  5216                           	opt callstack 27
  5217                           
  5218                           ;main.c: 42: OpenXLCD(0b00101100 & 0b00111000);
  5219                           
  5220                           ;incstack = 0
  5221  0061AE  0E28               	movlw	40
  5222  0061B0  ECF5  F035         	call	_OpenXLCD
  5223                           
  5224                           ;main.c: 43: WriteCmdXLCD(0b00000110);
  5225  0061B4  0E06               	movlw	6
  5226  0061B6  ECA4  F031         	call	_WriteCmdXLCD
  5227                           
  5228                           ;main.c: 44: WriteCmdXLCD(0b00001111);
  5229  0061BA  0E0F               	movlw	15
  5230  0061BC  ECA4  F031         	call	_WriteCmdXLCD
  5231                           
  5232                           ;main.c: 45: WriteCmdXLCD(0b00001110);
  5233  0061C0  0E0E               	movlw	14
  5234  0061C2  ECA4  F031         	call	_WriteCmdXLCD
  5235  0061C6  0012               	return		;funcret
  5236  0061C8                     __end_of_inicializacionLCD:
  5237                           	opt callstack 0
  5238                           
  5239 ;; *************** function _OpenXLCD *****************
  5240 ;; Defined at:
  5241 ;;		line 20 in file "XLCD/openxlcd.c"
  5242 ;; Parameters:    Size  Location     Type
  5243 ;;  lcdtype         1    wreg     unsigned char 
  5244 ;; Auto vars:     Size  Location     Type
  5245 ;;  lcdtype         1    6[COMRAM] unsigned char 
  5246 ;; Return value:  Size  Location     Type
  5247 ;;                  1    wreg      void 
  5248 ;; Registers used:
  5249 ;;		wreg, status,2, status,0, cstack
  5250 ;; Tracked objects:
  5251 ;;		On entry : 0/0
  5252 ;;		On exit  : 0/0
  5253 ;;		Unchanged: 0/0
  5254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5255 ;;      Params:         0       0       0       0       0       0       0       0       0
  5256 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5257 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5258 ;;      Totals:         2       0       0       0       0       0       0       0       0
  5259 ;;Total ram usage:        2 bytes
  5260 ;; Hardware stack levels used:    1
  5261 ;; Hardware stack levels required when called:    2
  5262 ;; This function calls:
  5263 ;;		_BusyXLCD
  5264 ;;		_DelayPORXLCD
  5265 ;;		_SetDDRamAddr
  5266 ;;		_WriteCmdXLCD
  5267 ;; This function is called by:
  5268 ;;		_inicializacionLCD
  5269 ;; This function uses a non-reentrant model
  5270 ;;
  5271                           
  5272                           	psect	text26
  5273  006BEA                     __ptext26:
  5274                           	opt callstack 0
  5275  006BEA                     _OpenXLCD:
  5276                           	opt callstack 27
  5277                           
  5278                           ;incstack = 0
  5279                           ;OpenXLCD@lcdtype stored from wreg
  5280  006BEA  6E07               	movwf	OpenXLCD@lcdtype^0,c
  5281                           
  5282                           ;openxlcd.c: 32: PORTD &= 0xf0;
  5283  006BEC  0EF0               	movlw	240
  5284  006BEE  1683               	andwf	131,f,c	;volatile
  5285                           
  5286                           ;openxlcd.c: 33: TRISD &= 0xF0;
  5287  006BF0  0EF0               	movlw	240
  5288  006BF2  1695               	andwf	149,f,c	;volatile
  5289                           
  5290                           ;openxlcd.c: 36: TRISEbits.TRISE1 = 0;
  5291  006BF4  9296               	bcf	150,1,c	;volatile
  5292                           
  5293                           ;openxlcd.c: 37: TRISEbits.TRISE0 = 0;
  5294  006BF6  9096               	bcf	150,0,c	;volatile
  5295                           
  5296                           ;openxlcd.c: 38: TRISEbits.TRISE2 = 0;
  5297  006BF8  9496               	bcf	150,2,c	;volatile
  5298                           
  5299                           ;openxlcd.c: 39: LATEbits.LATE1 = 0;
  5300  006BFA  928D               	bcf	141,1,c	;volatile
  5301                           
  5302                           ;openxlcd.c: 40: LATEbits.LATE0 = 0;
  5303  006BFC  908D               	bcf	141,0,c	;volatile
  5304                           
  5305                           ;openxlcd.c: 41: LATEbits.LATE2 = 0;
  5306  006BFE  948D               	bcf	141,2,c	;volatile
  5307                           
  5308                           ;openxlcd.c: 44: DelayPORXLCD();
  5309  006C00  ECC1  F030         	call	_DelayPORXLCD	;wreg free
  5310                           
  5311                           ;openxlcd.c: 46: WriteCmdXLCD(0x30);
  5312  006C04  0E30               	movlw	48
  5313  006C06  ECA4  F031         	call	_WriteCmdXLCD
  5314                           
  5315                           ;openxlcd.c: 49: _delay(10000);
  5316  006C0A  0E0D               	movlw	13
  5317  006C0C  6E06               	movwf	??_OpenXLCD^0,c
  5318  006C0E  0EFC               	movlw	252
  5319  006C10                     u3037:
  5320  006C10  2EE8               	decfsz	wreg,f,c
  5321  006C12  D7FE               	bra	u3037
  5322  006C14  2E06               	decfsz	??_OpenXLCD^0,f,c
  5323  006C16  D7FC               	bra	u3037
  5324                           
  5325                           ;openxlcd.c: 50: _delay(10000);
  5326  006C18  0E0D               	movlw	13
  5327  006C1A  6E06               	movwf	??_OpenXLCD^0,c
  5328  006C1C  0EFC               	movlw	252
  5329  006C1E                     u3047:
  5330  006C1E  2EE8               	decfsz	wreg,f,c
  5331  006C20  D7FE               	bra	u3047
  5332  006C22  2E06               	decfsz	??_OpenXLCD^0,f,c
  5333  006C24  D7FC               	bra	u3047
  5334                           
  5335                           ;openxlcd.c: 51: _delay(10000);
  5336  006C26  0E0D               	movlw	13
  5337  006C28  6E06               	movwf	??_OpenXLCD^0,c
  5338  006C2A  0EFC               	movlw	252
  5339  006C2C                     u3057:
  5340  006C2C  2EE8               	decfsz	wreg,f,c
  5341  006C2E  D7FE               	bra	u3057
  5342  006C30  2E06               	decfsz	??_OpenXLCD^0,f,c
  5343  006C32  D7FC               	bra	u3057
  5344                           
  5345                           ;openxlcd.c: 52: _delay(10000);
  5346  006C34  0E0D               	movlw	13
  5347  006C36  6E06               	movwf	??_OpenXLCD^0,c
  5348  006C38  0EFC               	movlw	252
  5349  006C3A                     u3067:
  5350  006C3A  2EE8               	decfsz	wreg,f,c
  5351  006C3C  D7FE               	bra	u3067
  5352  006C3E  2E06               	decfsz	??_OpenXLCD^0,f,c
  5353  006C40  D7FC               	bra	u3067
  5354                           
  5355                           ;openxlcd.c: 53: _delay(10000);
  5356  006C42  0E0D               	movlw	13
  5357  006C44  6E06               	movwf	??_OpenXLCD^0,c
  5358  006C46  0EFC               	movlw	252
  5359  006C48                     u3077:
  5360  006C48  2EE8               	decfsz	wreg,f,c
  5361  006C4A  D7FE               	bra	u3077
  5362  006C4C  2E06               	decfsz	??_OpenXLCD^0,f,c
  5363  006C4E  D7FC               	bra	u3077
  5364                           
  5365                           ;openxlcd.c: 54: _delay(10000);
  5366  006C50  0E0D               	movlw	13
  5367  006C52  6E06               	movwf	??_OpenXLCD^0,c
  5368  006C54  0EFC               	movlw	252
  5369  006C56                     u3087:
  5370  006C56  2EE8               	decfsz	wreg,f,c
  5371  006C58  D7FE               	bra	u3087
  5372  006C5A  2E06               	decfsz	??_OpenXLCD^0,f,c
  5373  006C5C  D7FC               	bra	u3087
  5374                           
  5375                           ;openxlcd.c: 57: WriteCmdXLCD(0x30);
  5376  006C5E  0E30               	movlw	48
  5377  006C60  ECA4  F031         	call	_WriteCmdXLCD
  5378                           
  5379                           ;openxlcd.c: 59: _delay(10000);
  5380  006C64  0E0D               	movlw	13
  5381  006C66  6E06               	movwf	??_OpenXLCD^0,c
  5382  006C68  0EFC               	movlw	252
  5383  006C6A                     u3097:
  5384  006C6A  2EE8               	decfsz	wreg,f,c
  5385  006C6C  D7FE               	bra	u3097
  5386  006C6E  2E06               	decfsz	??_OpenXLCD^0,f,c
  5387  006C70  D7FC               	bra	u3097
  5388                           
  5389                           ;openxlcd.c: 62: WriteCmdXLCD(0x32);
  5390  006C72  0E32               	movlw	50
  5391  006C74  ECA4  F031         	call	_WriteCmdXLCD
  5392  006C78                     l2707:
  5393  006C78  EC87  F031         	call	_BusyXLCD	;wreg free
  5394  006C7C  0900               	iorlw	0
  5395  006C7E  A4D8               	btfss	status,2,c
  5396  006C80  D7FB               	goto	l2707
  5397  006C82                     u2080:
  5398  006C82  EC87  F031         	call	_BusyXLCD	;wreg free
  5399  006C86  0900               	iorlw	0
  5400  006C88  A4D8               	btfss	status,2,c
  5401  006C8A  D7FB               	goto	u2080
  5402                           
  5403                           ;openxlcd.c: 69: WriteCmdXLCD(lcdtype);
  5404  006C8C  5007               	movf	OpenXLCD@lcdtype^0,w,c
  5405  006C8E  ECA4  F031         	call	_WriteCmdXLCD
  5406  006C92                     l2713:
  5407  006C92  EC87  F031         	call	_BusyXLCD	;wreg free
  5408  006C96  0900               	iorlw	0
  5409  006C98  A4D8               	btfss	status,2,c
  5410  006C9A  D7FB               	goto	l2713
  5411                           
  5412                           ;openxlcd.c: 73: WriteCmdXLCD(0b00001011&0b00001101&0b00001110);
  5413  006C9C  0E08               	movlw	8
  5414  006C9E  ECA4  F031         	call	_WriteCmdXLCD
  5415  006CA2                     l2717:
  5416  006CA2  EC87  F031         	call	_BusyXLCD	;wreg free
  5417  006CA6  0900               	iorlw	0
  5418  006CA8  A4D8               	btfss	status,2,c
  5419  006CAA  D7FB               	goto	l2717
  5420                           
  5421                           ;openxlcd.c: 75: WriteCmdXLCD(0b00001111&0b00001111&0b00001111);
  5422  006CAC  0E0F               	movlw	15
  5423  006CAE  ECA4  F031         	call	_WriteCmdXLCD
  5424  006CB2                     l2721:
  5425  006CB2  EC87  F031         	call	_BusyXLCD	;wreg free
  5426  006CB6  0900               	iorlw	0
  5427  006CB8  A4D8               	btfss	status,2,c
  5428  006CBA  D7FB               	goto	l2721
  5429                           
  5430                           ;openxlcd.c: 79: WriteCmdXLCD(0x01);
  5431  006CBC  0E01               	movlw	1
  5432  006CBE  ECA4  F031         	call	_WriteCmdXLCD
  5433  006CC2                     l2725:
  5434  006CC2  EC87  F031         	call	_BusyXLCD	;wreg free
  5435  006CC6  0900               	iorlw	0
  5436  006CC8  A4D8               	btfss	status,2,c
  5437  006CCA  D7FB               	goto	l2725
  5438                           
  5439                           ;openxlcd.c: 83: WriteCmdXLCD(0b00000100);
  5440  006CCC  0E04               	movlw	4
  5441  006CCE  ECA4  F031         	call	_WriteCmdXLCD
  5442  006CD2                     l2729:
  5443  006CD2  EC87  F031         	call	_BusyXLCD	;wreg free
  5444  006CD6  0900               	iorlw	0
  5445  006CD8  A4D8               	btfss	status,2,c
  5446  006CDA  D7FB               	goto	l2729
  5447                           
  5448                           ;openxlcd.c: 87: SetDDRamAddr(0x80);
  5449  006CDC  0E80               	movlw	128
  5450  006CDE  EC4C  F032         	call	_SetDDRamAddr
  5451  006CE2  0012               	return		;funcret
  5452  006CE4                     __end_of_OpenXLCD:
  5453                           	opt callstack 0
  5454                           
  5455 ;; *************** function _WriteCmdXLCD *****************
  5456 ;; Defined at:
  5457 ;;		line 13 in file "XLCD/wcmdxlcd.c"
  5458 ;; Parameters:    Size  Location     Type
  5459 ;;  cmd             1    wreg     unsigned char 
  5460 ;; Auto vars:     Size  Location     Type
  5461 ;;  cmd             1    0[COMRAM] unsigned char 
  5462 ;; Return value:  Size  Location     Type
  5463 ;;                  1    wreg      void 
  5464 ;; Registers used:
  5465 ;;		wreg, status,2, status,0, cstack
  5466 ;; Tracked objects:
  5467 ;;		On entry : 0/0
  5468 ;;		On exit  : 0/0
  5469 ;;		Unchanged: 0/0
  5470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5471 ;;      Params:         0       0       0       0       0       0       0       0       0
  5472 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5473 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5474 ;;      Totals:         1       0       0       0       0       0       0       0       0
  5475 ;;Total ram usage:        1 bytes
  5476 ;; Hardware stack levels used:    1
  5477 ;; Hardware stack levels required when called:    1
  5478 ;; This function calls:
  5479 ;;		_DelayFor18TCY
  5480 ;; This function is called by:
  5481 ;;		_OpenXLCD
  5482 ;;		_main
  5483 ;;		_inicializacionLCD
  5484 ;; This function uses a non-reentrant model
  5485 ;;
  5486                           
  5487                           	psect	text27
  5488  006348                     __ptext27:
  5489                           	opt callstack 0
  5490  006348                     _WriteCmdXLCD:
  5491                           	opt callstack 28
  5492                           
  5493                           ;incstack = 0
  5494                           ;WriteCmdXLCD@cmd stored from wreg
  5495  006348  6E01               	movwf	WriteCmdXLCD@cmd^0,c
  5496                           
  5497                           ;wcmdxlcd.c: 32: TRISD &= 0xf0;
  5498  00634A  0EF0               	movlw	240
  5499  00634C  1695               	andwf	149,f,c	;volatile
  5500                           
  5501                           ;wcmdxlcd.c: 33: PORTD &= 0xf0;
  5502  00634E  0EF0               	movlw	240
  5503  006350  1683               	andwf	131,f,c	;volatile
  5504                           
  5505                           ;wcmdxlcd.c: 34: PORTD |= (cmd>>4)&0x0f;
  5506  006352  3801               	swapf	WriteCmdXLCD@cmd^0,w,c
  5507  006354  0B0F               	andlw	15
  5508  006356  0B0F               	andlw	15
  5509  006358  1283               	iorwf	131,f,c	;volatile
  5510                           
  5511                           ;wcmdxlcd.c: 36: LATEbits.LATE1 = 0;
  5512  00635A  928D               	bcf	141,1,c	;volatile
  5513                           
  5514                           ;wcmdxlcd.c: 37: LATEbits.LATE0 = 0;
  5515  00635C  908D               	bcf	141,0,c	;volatile
  5516                           
  5517                           ;wcmdxlcd.c: 38: DelayFor18TCY();
  5518  00635E  ECB6  F030         	call	_DelayFor18TCY	;wreg free
  5519                           
  5520                           ;wcmdxlcd.c: 39: LATEbits.LATE2 = 1;
  5521  006362  848D               	bsf	141,2,c	;volatile
  5522                           
  5523                           ;wcmdxlcd.c: 40: DelayFor18TCY();
  5524  006364  ECB6  F030         	call	_DelayFor18TCY	;wreg free
  5525                           
  5526                           ;wcmdxlcd.c: 41: LATEbits.LATE2 = 0;
  5527  006368  948D               	bcf	141,2,c	;volatile
  5528                           
  5529                           ;wcmdxlcd.c: 46: PORTD &= 0xf0;
  5530  00636A  0EF0               	movlw	240
  5531  00636C  1683               	andwf	131,f,c	;volatile
  5532                           
  5533                           ;wcmdxlcd.c: 47: PORTD |= cmd&0x0f;
  5534  00636E  5001               	movf	WriteCmdXLCD@cmd^0,w,c
  5535  006370  0B0F               	andlw	15
  5536  006372  1283               	iorwf	131,f,c	;volatile
  5537                           
  5538                           ;wcmdxlcd.c: 49: DelayFor18TCY();
  5539  006374  ECB6  F030         	call	_DelayFor18TCY	;wreg free
  5540                           
  5541                           ;wcmdxlcd.c: 50: LATEbits.LATE2 = 1;
  5542  006378  848D               	bsf	141,2,c	;volatile
  5543                           
  5544                           ;wcmdxlcd.c: 51: DelayFor18TCY();
  5545  00637A  ECB6  F030         	call	_DelayFor18TCY	;wreg free
  5546                           
  5547                           ;wcmdxlcd.c: 52: LATEbits.LATE2 = 0;
  5548  00637E  948D               	bcf	141,2,c	;volatile
  5549                           
  5550                           ;wcmdxlcd.c: 56: TRISD |= 0x0f;
  5551  006380  0E0F               	movlw	15
  5552  006382  1295               	iorwf	149,f,c	;volatile
  5553  006384  0012               	return		;funcret
  5554  006386                     __end_of_WriteCmdXLCD:
  5555                           	opt callstack 0
  5556                           
  5557 ;; *************** function _SetDDRamAddr *****************
  5558 ;; Defined at:
  5559 ;;		line 13 in file "XLCD/setddram.c"
  5560 ;; Parameters:    Size  Location     Type
  5561 ;;  DDaddr          1    wreg     unsigned char 
  5562 ;; Auto vars:     Size  Location     Type
  5563 ;;  DDaddr          1    3[COMRAM] unsigned char 
  5564 ;; Return value:  Size  Location     Type
  5565 ;;                  1    wreg      void 
  5566 ;; Registers used:
  5567 ;;		wreg, status,2, status,0, cstack
  5568 ;; Tracked objects:
  5569 ;;		On entry : 0/0
  5570 ;;		On exit  : 0/0
  5571 ;;		Unchanged: 0/0
  5572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5573 ;;      Params:         0       0       0       0       0       0       0       0       0
  5574 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5575 ;;      Temps:          3       0       0       0       0       0       0       0       0
  5576 ;;      Totals:         4       0       0       0       0       0       0       0       0
  5577 ;;Total ram usage:        4 bytes
  5578 ;; Hardware stack levels used:    1
  5579 ;; Hardware stack levels required when called:    1
  5580 ;; This function calls:
  5581 ;;		_DelayFor18TCY
  5582 ;; This function is called by:
  5583 ;;		_OpenXLCD
  5584 ;; This function uses a non-reentrant model
  5585 ;;
  5586                           
  5587                           	psect	text28
  5588  006498                     __ptext28:
  5589                           	opt callstack 0
  5590  006498                     _SetDDRamAddr:
  5591                           	opt callstack 27
  5592                           
  5593                           ;incstack = 0
  5594                           ;SetDDRamAddr@DDaddr stored from wreg
  5595  006498  6E04               	movwf	SetDDRamAddr@DDaddr^0,c
  5596                           
  5597                           ;setddram.c: 32: TRISD &= 0xf0;
  5598  00649A  0EF0               	movlw	240
  5599  00649C  1695               	andwf	149,f,c	;volatile
  5600                           
  5601                           ;setddram.c: 33: PORTD &= 0xf0;
  5602  00649E  0EF0               	movlw	240
  5603  0064A0  1683               	andwf	131,f,c	;volatile
  5604                           
  5605                           ;setddram.c: 34: PORTD |= (((DDaddr | 0b10000000)>>4) & 0x0f);
  5606  0064A2  5004               	movf	SetDDRamAddr@DDaddr^0,w,c
  5607  0064A4  6E01               	movwf	??_SetDDRamAddr^0,c
  5608  0064A6  6A02               	clrf	(??_SetDDRamAddr+1)^0,c
  5609  0064A8  0E80               	movlw	128
  5610  0064AA  1201               	iorwf	??_SetDDRamAddr^0,f,c
  5611  0064AC  0E00               	movlw	0
  5612  0064AE  1202               	iorwf	(??_SetDDRamAddr+1)^0,f,c
  5613  0064B0  0E04               	movlw	4
  5614  0064B2  6E03               	movwf	(??_SetDDRamAddr+2)^0,c
  5615  0064B4                     u1625:
  5616  0064B4  3402               	rlcf	(??_SetDDRamAddr+1)^0,w,c
  5617  0064B6  3202               	rrcf	(??_SetDDRamAddr+1)^0,f,c
  5618  0064B8  3201               	rrcf	??_SetDDRamAddr^0,f,c
  5619  0064BA  2E03               	decfsz	(??_SetDDRamAddr+2)^0,f,c
  5620  0064BC  D7FB               	goto	u1625
  5621  0064BE  5001               	movf	??_SetDDRamAddr^0,w,c
  5622  0064C0  0B0F               	andlw	15
  5623  0064C2  1283               	iorwf	131,f,c	;volatile
  5624                           
  5625                           ;setddram.c: 36: LATEbits.LATE1 = 0;
  5626  0064C4  928D               	bcf	141,1,c	;volatile
  5627                           
  5628                           ;setddram.c: 37: LATEbits.LATE0 = 0;
  5629  0064C6  908D               	bcf	141,0,c	;volatile
  5630                           
  5631                           ;setddram.c: 38: DelayFor18TCY();
  5632  0064C8  ECB6  F030         	call	_DelayFor18TCY	;wreg free
  5633                           
  5634                           ;setddram.c: 39: LATEbits.LATE2 = 1;
  5635  0064CC  848D               	bsf	141,2,c	;volatile
  5636                           
  5637                           ;setddram.c: 40: DelayFor18TCY();
  5638  0064CE  ECB6  F030         	call	_DelayFor18TCY	;wreg free
  5639                           
  5640                           ;setddram.c: 41: LATEbits.LATE2 = 0;
  5641  0064D2  948D               	bcf	141,2,c	;volatile
  5642                           
  5643                           ;setddram.c: 46: PORTD &= 0xf0;
  5644  0064D4  0EF0               	movlw	240
  5645  0064D6  1683               	andwf	131,f,c	;volatile
  5646                           
  5647                           ;setddram.c: 47: PORTD |= (DDaddr&0x0f);
  5648  0064D8  5004               	movf	SetDDRamAddr@DDaddr^0,w,c
  5649  0064DA  0B0F               	andlw	15
  5650  0064DC  1283               	iorwf	131,f,c	;volatile
  5651                           
  5652                           ;setddram.c: 49: DelayFor18TCY();
  5653  0064DE  ECB6  F030         	call	_DelayFor18TCY	;wreg free
  5654                           
  5655                           ;setddram.c: 50: LATEbits.LATE2 = 1;
  5656  0064E2  848D               	bsf	141,2,c	;volatile
  5657                           
  5658                           ;setddram.c: 51: DelayFor18TCY();
  5659  0064E4  ECB6  F030         	call	_DelayFor18TCY	;wreg free
  5660                           
  5661                           ;setddram.c: 52: LATEbits.LATE2 = 0;
  5662  0064E8  948D               	bcf	141,2,c	;volatile
  5663                           
  5664                           ;setddram.c: 56: TRISD |= 0x0f;
  5665  0064EA  0E0F               	movlw	15
  5666  0064EC  1295               	iorwf	149,f,c	;volatile
  5667  0064EE  0012               	return		;funcret
  5668  0064F0                     __end_of_SetDDRamAddr:
  5669                           	opt callstack 0
  5670                           
  5671 ;; *************** function _DelayPORXLCD *****************
  5672 ;; Defined at:
  5673 ;;		line 66 in file "main.c"
  5674 ;; Parameters:    Size  Location     Type
  5675 ;;		None
  5676 ;; Auto vars:     Size  Location     Type
  5677 ;;		None
  5678 ;; Return value:  Size  Location     Type
  5679 ;;                  1    wreg      void 
  5680 ;; Registers used:
  5681 ;;		wreg, status,2, status,0, cstack
  5682 ;; Tracked objects:
  5683 ;;		On entry : 0/0
  5684 ;;		On exit  : 0/0
  5685 ;;		Unchanged: 0/0
  5686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5687 ;;      Params:         0       0       0       0       0       0       0       0       0
  5688 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5689 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5690 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5691 ;;Total ram usage:        0 bytes
  5692 ;; Hardware stack levels used:    1
  5693 ;; Hardware stack levels required when called:    1
  5694 ;; This function calls:
  5695 ;;		_delay_ms
  5696 ;; This function is called by:
  5697 ;;		_OpenXLCD
  5698 ;; This function uses a non-reentrant model
  5699 ;;
  5700                           
  5701                           	psect	text29
  5702  006182                     __ptext29:
  5703                           	opt callstack 0
  5704  006182                     _DelayPORXLCD:
  5705                           	opt callstack 27
  5706                           
  5707                           ;main.c: 67: delay_ms(15);
  5708                           
  5709                           ;incstack = 0
  5710  006182  0E0F               	movlw	15
  5711  006184  6E01               	movwf	delay_ms@n^0,c
  5712  006186  0E00               	movlw	0
  5713  006188  6E02               	movwf	(delay_ms@n+1)^0,c
  5714  00618A  0E00               	movlw	0
  5715  00618C  6E03               	movwf	(delay_ms@n+2)^0,c
  5716  00618E  0E00               	movlw	0
  5717  006190  6E04               	movwf	(delay_ms@n+3)^0,c
  5718  006192  EC6C  F031         	call	_delay_ms	;wreg free
  5719  006196  0012               	return		;funcret
  5720  006198                     __end_of_DelayPORXLCD:
  5721                           	opt callstack 0
  5722                           
  5723 ;; *************** function _delay_ms *****************
  5724 ;; Defined at:
  5725 ;;		line 157 in file "Alteri.h"
  5726 ;; Parameters:    Size  Location     Type
  5727 ;;  n               4    0[COMRAM] long 
  5728 ;; Auto vars:     Size  Location     Type
  5729 ;;		None
  5730 ;; Return value:  Size  Location     Type
  5731 ;;                  1    wreg      void 
  5732 ;; Registers used:
  5733 ;;		wreg, status,2, status,0
  5734 ;; Tracked objects:
  5735 ;;		On entry : 0/0
  5736 ;;		On exit  : 0/0
  5737 ;;		Unchanged: 0/0
  5738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5739 ;;      Params:         4       0       0       0       0       0       0       0       0
  5740 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5741 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5742 ;;      Totals:         5       0       0       0       0       0       0       0       0
  5743 ;;Total ram usage:        5 bytes
  5744 ;; Hardware stack levels used:    1
  5745 ;; This function calls:
  5746 ;;		Nothing
  5747 ;; This function is called by:
  5748 ;;		_main
  5749 ;;		_DelayPORXLCD
  5750 ;;		_DelayXLCD
  5751 ;; This function uses a non-reentrant model
  5752 ;;
  5753                           
  5754                           	psect	text30
  5755  0062D8                     __ptext30:
  5756                           	opt callstack 0
  5757  0062D8                     _delay_ms:
  5758                           	opt callstack 27
  5759                           
  5760                           ;Alteri.h: 159: while(n-- !=0){
  5761                           
  5762                           ;incstack = 0
  5763  0062D8  D008               	goto	l2305
  5764  0062DA                     l2303:
  5765                           
  5766                           ;Alteri.h: 160: _delay((unsigned long)((1)*(48000000/4000.0)));
  5767  0062DA  0E10               	movlw	16
  5768  0062DC  6E05               	movwf	??_delay_ms^0,c
  5769  0062DE  0E94               	movlw	148
  5770  0062E0                     u3107:
  5771  0062E0  2EE8               	decfsz	wreg,f,c
  5772  0062E2  D7FE               	bra	u3107
  5773  0062E4  2E05               	decfsz	??_delay_ms^0,f,c
  5774  0062E6  D7FC               	bra	u3107
  5775  0062E8  D000               	nop2	
  5776  0062EA                     l2305:
  5777  0062EA  0EFF               	movlw	255
  5778  0062EC  2601               	addwf	delay_ms@n^0,f,c
  5779  0062EE  0EFF               	movlw	255
  5780  0062F0  2202               	addwfc	(delay_ms@n+1)^0,f,c
  5781  0062F2  0EFF               	movlw	255
  5782  0062F4  2203               	addwfc	(delay_ms@n+2)^0,f,c
  5783  0062F6  0EFF               	movlw	255
  5784  0062F8  2204               	addwfc	(delay_ms@n+3)^0,f,c
  5785  0062FA  2801               	incf	delay_ms@n^0,w,c
  5786  0062FC  E1EE               	bnz	l2303
  5787  0062FE  2802               	incf	(delay_ms@n+1)^0,w,c
  5788  006300  E1EC               	bnz	l2303
  5789  006302  2803               	incf	(delay_ms@n+2)^0,w,c
  5790  006304  E1EA               	bnz	l2303
  5791  006306  2804               	incf	(delay_ms@n+3)^0,w,c
  5792  006308  B4D8               	btfsc	status,2,c
  5793  00630A  0012               	return	
  5794  00630C  D7E6               	goto	l2303
  5795  00630E                     __end_of_delay_ms:
  5796                           	opt callstack 0
  5797                           
  5798 ;; *************** function _BusyXLCD *****************
  5799 ;; Defined at:
  5800 ;;		line 11 in file "XLCD/busyxlcd.c"
  5801 ;; Parameters:    Size  Location     Type
  5802 ;;		None
  5803 ;; Auto vars:     Size  Location     Type
  5804 ;;		None
  5805 ;; Return value:  Size  Location     Type
  5806 ;;                  1    wreg      unsigned char 
  5807 ;; Registers used:
  5808 ;;		wreg, cstack
  5809 ;; Tracked objects:
  5810 ;;		On entry : 0/0
  5811 ;;		On exit  : 0/0
  5812 ;;		Unchanged: 0/0
  5813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5814 ;;      Params:         0       0       0       0       0       0       0       0       0
  5815 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5816 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5817 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5818 ;;Total ram usage:        0 bytes
  5819 ;; Hardware stack levels used:    1
  5820 ;; Hardware stack levels required when called:    1
  5821 ;; This function calls:
  5822 ;;		_DelayFor18TCY
  5823 ;; This function is called by:
  5824 ;;		_OpenXLCD
  5825 ;;		_putrsXLCD
  5826 ;;		_putsXLCD
  5827 ;; This function uses a non-reentrant model
  5828 ;;
  5829                           
  5830                           	psect	text31
  5831  00630E                     __ptext31:
  5832                           	opt callstack 0
  5833  00630E                     _BusyXLCD:
  5834                           	opt callstack 28
  5835                           
  5836                           ;busyxlcd.c: 13: LATEbits.LATE1 = 1;
  5837                           
  5838                           ;incstack = 0
  5839  00630E  828D               	bsf	141,1,c	;volatile
  5840                           
  5841                           ;busyxlcd.c: 14: LATEbits.LATE0 = 0;
  5842  006310  908D               	bcf	141,0,c	;volatile
  5843                           
  5844                           ;busyxlcd.c: 15: DelayFor18TCY();
  5845  006312  ECB6  F030         	call	_DelayFor18TCY	;wreg free
  5846                           
  5847                           ;busyxlcd.c: 16: LATEbits.LATE2 = 1;
  5848  006316  848D               	bsf	141,2,c	;volatile
  5849                           
  5850                           ;busyxlcd.c: 17: DelayFor18TCY();
  5851  006318  ECB6  F030         	call	_DelayFor18TCY	;wreg free
  5852                           
  5853                           ;busyxlcd.c: 35: if(PORTD&0x08)
  5854  00631C  A683               	btfss	131,3,c	;volatile
  5855  00631E  D00A               	goto	l9
  5856                           
  5857                           ;busyxlcd.c: 37: {;busyxlcd.c: 38: LATEbits.LATE2 = 0;
  5858  006320  948D               	bcf	141,2,c	;volatile
  5859                           
  5860                           ;busyxlcd.c: 39: DelayFor18TCY();
  5861  006322  ECB6  F030         	call	_DelayFor18TCY	;wreg free
  5862                           
  5863                           ;busyxlcd.c: 40: LATEbits.LATE2 = 1;
  5864  006326  848D               	bsf	141,2,c	;volatile
  5865                           
  5866                           ;busyxlcd.c: 41: DelayFor18TCY();
  5867  006328  ECB6  F030         	call	_DelayFor18TCY	;wreg free
  5868                           
  5869                           ;busyxlcd.c: 42: LATEbits.LATE2 = 0;
  5870  00632C  948D               	bcf	141,2,c	;volatile
  5871                           
  5872                           ;busyxlcd.c: 43: LATEbits.LATE1 = 0;
  5873  00632E  928D               	bcf	141,1,c	;volatile
  5874                           
  5875                           ;busyxlcd.c: 44: return 1;
  5876  006330  0E01               	movlw	1
  5877  006332  0012               	return	
  5878  006334                     l9:
  5879                           
  5880                           ;busyxlcd.c: 46: else;busyxlcd.c: 47: {;busyxlcd.c: 48: LATEbits.LATE2 = 0;
  5881  006334  948D               	bcf	141,2,c	;volatile
  5882                           
  5883                           ;busyxlcd.c: 49: DelayFor18TCY();
  5884  006336  ECB6  F030         	call	_DelayFor18TCY	;wreg free
  5885                           
  5886                           ;busyxlcd.c: 50: LATEbits.LATE2 = 1;
  5887  00633A  848D               	bsf	141,2,c	;volatile
  5888                           
  5889                           ;busyxlcd.c: 51: DelayFor18TCY();
  5890  00633C  ECB6  F030         	call	_DelayFor18TCY	;wreg free
  5891                           
  5892                           ;busyxlcd.c: 52: LATEbits.LATE2 = 0;
  5893  006340  948D               	bcf	141,2,c	;volatile
  5894                           
  5895                           ;busyxlcd.c: 53: LATEbits.LATE1 = 0;
  5896  006342  928D               	bcf	141,1,c	;volatile
  5897                           
  5898                           ;busyxlcd.c: 54: return 0;
  5899  006344  0E00               	movlw	0
  5900  006346  0012               	return		;funcret
  5901  006348                     __end_of_BusyXLCD:
  5902                           	opt callstack 0
  5903                           
  5904 ;; *************** function _DelayFor18TCY *****************
  5905 ;; Defined at:
  5906 ;;		line 63 in file "main.c"
  5907 ;; Parameters:    Size  Location     Type
  5908 ;;		None
  5909 ;; Auto vars:     Size  Location     Type
  5910 ;;		None
  5911 ;; Return value:  Size  Location     Type
  5912 ;;                  1    wreg      void 
  5913 ;; Registers used:
  5914 ;;		wreg
  5915 ;; Tracked objects:
  5916 ;;		On entry : 0/0
  5917 ;;		On exit  : 0/0
  5918 ;;		Unchanged: 0/0
  5919 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5920 ;;      Params:         0       0       0       0       0       0       0       0       0
  5921 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5922 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5923 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5924 ;;Total ram usage:        0 bytes
  5925 ;; Hardware stack levels used:    1
  5926 ;; This function calls:
  5927 ;;		Nothing
  5928 ;; This function is called by:
  5929 ;;		_BusyXLCD
  5930 ;;		_SetDDRamAddr
  5931 ;;		_WriteCmdXLCD
  5932 ;;		_WriteDataXLCD
  5933 ;;		_ReadAddrXLCD
  5934 ;;		_ReadDataXLCD
  5935 ;;		_SetCGRamAddr
  5936 ;; This function uses a non-reentrant model
  5937 ;;
  5938                           
  5939                           	psect	text32
  5940  00616C                     __ptext32:
  5941                           	opt callstack 0
  5942  00616C                     _DelayFor18TCY:
  5943                           	opt callstack 28
  5944                           
  5945                           ;main.c: 64: _delay(240);
  5946                           
  5947                           ;incstack = 0
  5948  00616C  0E50               	movlw	80
  5949  00616E                     u3117:
  5950  00616E  2EE8               	decfsz	wreg,f,c
  5951  006170  D7FE               	bra	u3117
  5952  006172  0012               	return		;funcret
  5953  006174                     __end_of_DelayFor18TCY:
  5954                           	opt callstack 0
  5955                           
  5956 ;; *************** function _conversionADC *****************
  5957 ;; Defined at:
  5958 ;;		line 54 in file "main.c"
  5959 ;; Parameters:    Size  Location     Type
  5960 ;;		None
  5961 ;; Auto vars:     Size  Location     Type
  5962 ;;  resultado       2    4[COMRAM] unsigned int 
  5963 ;; Return value:  Size  Location     Type
  5964 ;;                  2    0[COMRAM] unsigned int 
  5965 ;; Registers used:
  5966 ;;		wreg, status,2, status,0
  5967 ;; Tracked objects:
  5968 ;;		On entry : 0/0
  5969 ;;		On exit  : 0/0
  5970 ;;		Unchanged: 0/0
  5971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5972 ;;      Params:         2       0       0       0       0       0       0       0       0
  5973 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5974 ;;      Temps:          2       0       0       0       0       0       0       0       0
  5975 ;;      Totals:         6       0       0       0       0       0       0       0       0
  5976 ;;Total ram usage:        6 bytes
  5977 ;; Hardware stack levels used:    1
  5978 ;; This function calls:
  5979 ;;		Nothing
  5980 ;; This function is called by:
  5981 ;;		_main
  5982 ;; This function uses a non-reentrant model
  5983 ;;
  5984                           
  5985                           	psect	text33
  5986  0061E6                     __ptext33:
  5987                           	opt callstack 0
  5988  0061E6                     _conversionADC:
  5989                           	opt callstack 30
  5990                           
  5991                           ;main.c: 55: unsigned int resultado;;main.c: 56: ADCON0bits.GO_DONE = 1;
  5992                           
  5993                           ;incstack = 0
  5994  0061E6  82C2               	bsf	194,1,c	;volatile
  5995  0061E8                     l199:
  5996  0061E8  B2C2               	btfsc	194,1,c	;volatile
  5997  0061EA  D7FE               	goto	l199
  5998                           
  5999                           ;main.c: 58: resultado = (ADRESH<<8) + ADRESL;
  6000  0061EC  50C4               	movf	196,w,c	;volatile
  6001  0061EE  6E04               	movwf	(??_conversionADC+1)^0,c
  6002  0061F0  6A03               	clrf	??_conversionADC^0,c
  6003  0061F2  50C3               	movf	195,w,c	;volatile
  6004  0061F4  2403               	addwf	??_conversionADC^0,w,c
  6005  0061F6  6E05               	movwf	conversionADC@resultado^0,c
  6006  0061F8  0E00               	movlw	0
  6007  0061FA  2004               	addwfc	(??_conversionADC+1)^0,w,c
  6008  0061FC  6E06               	movwf	(conversionADC@resultado+1)^0,c
  6009                           
  6010                           ;main.c: 59: return resultado;
  6011  0061FE  C005  F001         	movff	conversionADC@resultado,?_conversionADC
  6012  006202  C006  F002         	movff	conversionADC@resultado+1,?_conversionADC+1
  6013  006206  0012               	return		;funcret
  6014  006208                     __end_of_conversionADC:
  6015                           	opt callstack 0
  6016                           
  6017 ;; *************** function ___lwtoft *****************
  6018 ;; Defined at:
  6019 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lwtoft.c"
  6020 ;; Parameters:    Size  Location     Type
  6021 ;;  c               2    8[COMRAM] unsigned int 
  6022 ;; Auto vars:     Size  Location     Type
  6023 ;;		None
  6024 ;; Return value:  Size  Location     Type
  6025 ;;                  3    8[COMRAM] float 
  6026 ;; Registers used:
  6027 ;;		wreg, status,2, status,0, cstack
  6028 ;; Tracked objects:
  6029 ;;		On entry : 0/0
  6030 ;;		On exit  : 0/0
  6031 ;;		Unchanged: 0/0
  6032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6033 ;;      Params:         3       0       0       0       0       0       0       0       0
  6034 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6035 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6036 ;;      Totals:         3       0       0       0       0       0       0       0       0
  6037 ;;Total ram usage:        3 bytes
  6038 ;; Hardware stack levels used:    1
  6039 ;; Hardware stack levels required when called:    1
  6040 ;; This function calls:
  6041 ;;		___ftpack
  6042 ;; This function is called by:
  6043 ;;		_main
  6044 ;; This function uses a non-reentrant model
  6045 ;;
  6046                           
  6047                           	psect	text34
  6048  006208                     __ptext34:
  6049                           	opt callstack 0
  6050  006208                     ___lwtoft:
  6051                           	opt callstack 29
  6052                           
  6053                           ;incstack = 0
  6054  006208  C009  F001         	movff	___lwtoft@c,___ftpack@arg
  6055  00620C  C00A  F002         	movff	___lwtoft@c+1,___ftpack@arg+1
  6056  006210  6A03               	clrf	(___ftpack@arg+2)^0,c
  6057  006212  0E8E               	movlw	142
  6058  006214  6E04               	movwf	___ftpack@exp^0,c
  6059  006216  0E00               	movlw	0
  6060  006218  6E05               	movwf	___ftpack@sign^0,c
  6061  00621A  ECCE  F033         	call	___ftpack	;wreg free
  6062  00621E  C001  F009         	movff	?___ftpack,?___lwtoft
  6063  006222  C002  F00A         	movff	?___ftpack+1,?___lwtoft+1
  6064  006226  C003  F00B         	movff	?___ftpack+2,?___lwtoft+2
  6065  00622A  0012               	return		;funcret
  6066  00622C                     __end_of___lwtoft:
  6067                           	opt callstack 0
  6068                           
  6069 ;; *************** function ___ftdiv *****************
  6070 ;; Defined at:
  6071 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\ftdiv.c"
  6072 ;; Parameters:    Size  Location     Type
  6073 ;;  f1              3   33[COMRAM] float 
  6074 ;;  f2              3   36[COMRAM] float 
  6075 ;; Auto vars:     Size  Location     Type
  6076 ;;  f3              3   43[COMRAM] float 
  6077 ;;  sign            1   47[COMRAM] unsigned char 
  6078 ;;  exp             1   46[COMRAM] unsigned char 
  6079 ;;  cntr            1   42[COMRAM] unsigned char 
  6080 ;; Return value:  Size  Location     Type
  6081 ;;                  3   33[COMRAM] float 
  6082 ;; Registers used:
  6083 ;;		wreg, status,2, status,0, cstack
  6084 ;; Tracked objects:
  6085 ;;		On entry : 0/0
  6086 ;;		On exit  : 0/0
  6087 ;;		Unchanged: 0/0
  6088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6089 ;;      Params:         6       0       0       0       0       0       0       0       0
  6090 ;;      Locals:         6       0       0       0       0       0       0       0       0
  6091 ;;      Temps:          3       0       0       0       0       0       0       0       0
  6092 ;;      Totals:        15       0       0       0       0       0       0       0       0
  6093 ;;Total ram usage:       15 bytes
  6094 ;; Hardware stack levels used:    1
  6095 ;; Hardware stack levels required when called:    1
  6096 ;; This function calls:
  6097 ;;		___ftpack
  6098 ;; This function is called by:
  6099 ;;		_main
  6100 ;; This function uses a non-reentrant model
  6101 ;;
  6102                           
  6103                           	psect	text35
  6104  00691C                     __ptext35:
  6105                           	opt callstack 0
  6106  00691C                     ___ftdiv:
  6107                           	opt callstack 29
  6108                           
  6109                           ;incstack = 0
  6110  00691C  C024  F028         	movff	___ftdiv@f1+2,??___ftdiv
  6111  006920  6A29               	clrf	(??___ftdiv+1)^0,c
  6112  006922  6A2A               	clrf	(??___ftdiv+2)^0,c
  6113  006924  3423               	rlcf	(___ftdiv@f1+1)^0,w,c
  6114  006926  3628               	rlcf	??___ftdiv^0,f,c
  6115  006928  E301               	bnc	u2971
  6116  00692A  8029               	bsf	(??___ftdiv+1)^0,0,c
  6117  00692C                     u2971:
  6118  00692C  5028               	movf	??___ftdiv^0,w,c
  6119  00692E  6E2F               	movwf	___ftdiv@exp^0,c
  6120  006930  502F               	movf	___ftdiv@exp^0,w,c
  6121  006932  A4D8               	btfss	status,2,c
  6122  006934  D007               	goto	l3317
  6123  006936  0E00               	movlw	0
  6124  006938  6E22               	movwf	?___ftdiv^0,c
  6125  00693A  0E00               	movlw	0
  6126  00693C  6E23               	movwf	(?___ftdiv+1)^0,c
  6127  00693E  0E00               	movlw	0
  6128  006940  6E24               	movwf	(?___ftdiv+2)^0,c
  6129  006942  0012               	return	
  6130  006944                     l3317:
  6131  006944  C027  F028         	movff	___ftdiv@f2+2,??___ftdiv
  6132  006948  6A29               	clrf	(??___ftdiv+1)^0,c
  6133  00694A  6A2A               	clrf	(??___ftdiv+2)^0,c
  6134  00694C  3426               	rlcf	(___ftdiv@f2+1)^0,w,c
  6135  00694E  3628               	rlcf	??___ftdiv^0,f,c
  6136  006950  E301               	bnc	u2991
  6137  006952  8029               	bsf	(??___ftdiv+1)^0,0,c
  6138  006954                     u2991:
  6139  006954  5028               	movf	??___ftdiv^0,w,c
  6140  006956  6E30               	movwf	___ftdiv@sign^0,c
  6141  006958  5030               	movf	___ftdiv@sign^0,w,c
  6142  00695A  A4D8               	btfss	status,2,c
  6143  00695C  D007               	goto	l3323
  6144  00695E  0E00               	movlw	0
  6145  006960  6E22               	movwf	?___ftdiv^0,c
  6146  006962  0E00               	movlw	0
  6147  006964  6E23               	movwf	(?___ftdiv+1)^0,c
  6148  006966  0E00               	movlw	0
  6149  006968  6E24               	movwf	(?___ftdiv+2)^0,c
  6150  00696A  0012               	return	
  6151  00696C                     l3323:
  6152  00696C  0E00               	movlw	0
  6153  00696E  6E2C               	movwf	___ftdiv@f3^0,c
  6154  006970  0E00               	movlw	0
  6155  006972  6E2D               	movwf	(___ftdiv@f3+1)^0,c
  6156  006974  0E00               	movlw	0
  6157  006976  6E2E               	movwf	(___ftdiv@f3+2)^0,c
  6158  006978  5030               	movf	___ftdiv@sign^0,w,c
  6159  00697A  0F89               	addlw	137
  6160  00697C  5E2F               	subwf	___ftdiv@exp^0,f,c
  6161  00697E  C024  F030         	movff	___ftdiv@f1+2,___ftdiv@sign
  6162  006982  5027               	movf	(___ftdiv@f2+2)^0,w,c
  6163  006984  1A30               	xorwf	___ftdiv@sign^0,f,c
  6164  006986  0E80               	movlw	128
  6165  006988  1630               	andwf	___ftdiv@sign^0,f,c
  6166  00698A  8E23               	bsf	(___ftdiv@f1+1)^0,7,c
  6167  00698C  0EFF               	movlw	255
  6168  00698E  1622               	andwf	___ftdiv@f1^0,f,c
  6169  006990  0EFF               	movlw	255
  6170  006992  1623               	andwf	(___ftdiv@f1+1)^0,f,c
  6171  006994  0E00               	movlw	0
  6172  006996  1624               	andwf	(___ftdiv@f1+2)^0,f,c
  6173  006998  8E26               	bsf	(___ftdiv@f2+1)^0,7,c
  6174  00699A  0EFF               	movlw	255
  6175  00699C  1625               	andwf	___ftdiv@f2^0,f,c
  6176  00699E  0EFF               	movlw	255
  6177  0069A0  1626               	andwf	(___ftdiv@f2+1)^0,f,c
  6178  0069A2  0E00               	movlw	0
  6179  0069A4  1627               	andwf	(___ftdiv@f2+2)^0,f,c
  6180  0069A6  0E18               	movlw	24
  6181  0069A8  6E2B               	movwf	___ftdiv@cntr^0,c
  6182  0069AA                     l3343:
  6183  0069AA  90D8               	bcf	status,0,c
  6184  0069AC  362C               	rlcf	___ftdiv@f3^0,f,c
  6185  0069AE  362D               	rlcf	(___ftdiv@f3+1)^0,f,c
  6186  0069B0  362E               	rlcf	(___ftdiv@f3+2)^0,f,c
  6187  0069B2  5025               	movf	___ftdiv@f2^0,w,c
  6188  0069B4  5C22               	subwf	___ftdiv@f1^0,w,c
  6189  0069B6  5026               	movf	(___ftdiv@f2+1)^0,w,c
  6190  0069B8  5823               	subwfb	(___ftdiv@f1+1)^0,w,c
  6191  0069BA  5027               	movf	(___ftdiv@f2+2)^0,w,c
  6192  0069BC  5824               	subwfb	(___ftdiv@f1+2)^0,w,c
  6193  0069BE  A0D8               	btfss	status,0,c
  6194  0069C0  D007               	goto	l665
  6195  0069C2  5025               	movf	___ftdiv@f2^0,w,c
  6196  0069C4  5E22               	subwf	___ftdiv@f1^0,f,c
  6197  0069C6  5026               	movf	(___ftdiv@f2+1)^0,w,c
  6198  0069C8  5A23               	subwfb	(___ftdiv@f1+1)^0,f,c
  6199  0069CA  5027               	movf	(___ftdiv@f2+2)^0,w,c
  6200  0069CC  5A24               	subwfb	(___ftdiv@f1+2)^0,f,c
  6201  0069CE  802C               	bsf	___ftdiv@f3^0,0,c
  6202  0069D0                     l665:
  6203  0069D0  90D8               	bcf	status,0,c
  6204  0069D2  3622               	rlcf	___ftdiv@f1^0,f,c
  6205  0069D4  3623               	rlcf	(___ftdiv@f1+1)^0,f,c
  6206  0069D6  3624               	rlcf	(___ftdiv@f1+2)^0,f,c
  6207  0069D8  2E2B               	decfsz	___ftdiv@cntr^0,f,c
  6208  0069DA  D7E7               	goto	l3343
  6209  0069DC  C02C  F001         	movff	___ftdiv@f3,___ftpack@arg
  6210  0069E0  C02D  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  6211  0069E4  C02E  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  6212  0069E8  C02F  F004         	movff	___ftdiv@exp,___ftpack@exp
  6213  0069EC  C030  F005         	movff	___ftdiv@sign,___ftpack@sign
  6214  0069F0  ECCE  F033         	call	___ftpack	;wreg free
  6215  0069F4  C001  F022         	movff	?___ftpack,?___ftdiv
  6216  0069F8  C002  F023         	movff	?___ftpack+1,?___ftdiv+1
  6217  0069FC  C003  F024         	movff	?___ftpack+2,?___ftdiv+2
  6218  006A00  0012               	return		;funcret
  6219  006A02                     __end_of___ftdiv:
  6220                           	opt callstack 0
  6221                           
  6222 ;; *************** function ___ftpack *****************
  6223 ;; Defined at:
  6224 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\float.c"
  6225 ;; Parameters:    Size  Location     Type
  6226 ;;  arg             3    0[COMRAM] unsigned um
  6227 ;;  exp             1    3[COMRAM] unsigned char 
  6228 ;;  sign            1    4[COMRAM] unsigned char 
  6229 ;; Auto vars:     Size  Location     Type
  6230 ;;		None
  6231 ;; Return value:  Size  Location     Type
  6232 ;;                  3    0[COMRAM] float 
  6233 ;; Registers used:
  6234 ;;		wreg, status,2, status,0
  6235 ;; Tracked objects:
  6236 ;;		On entry : 0/0
  6237 ;;		On exit  : 0/0
  6238 ;;		Unchanged: 0/0
  6239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6240 ;;      Params:         5       0       0       0       0       0       0       0       0
  6241 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6242 ;;      Temps:          3       0       0       0       0       0       0       0       0
  6243 ;;      Totals:         8       0       0       0       0       0       0       0       0
  6244 ;;Total ram usage:        8 bytes
  6245 ;; Hardware stack levels used:    1
  6246 ;; This function calls:
  6247 ;;		Nothing
  6248 ;; This function is called by:
  6249 ;;		___ftadd
  6250 ;;		___ftdiv
  6251 ;;		___ftmul
  6252 ;;		___lltoft
  6253 ;;		___lwtoft
  6254 ;; This function uses a non-reentrant model
  6255 ;;
  6256                           
  6257                           	psect	text36
  6258  00679C                     __ptext36:
  6259                           	opt callstack 0
  6260  00679C                     ___ftpack:
  6261                           	opt callstack 27
  6262                           
  6263                           ;incstack = 0
  6264  00679C  5004               	movf	___ftpack@exp^0,w,c
  6265  00679E  B4D8               	btfsc	status,2,c
  6266  0067A0  D005               	goto	u1540
  6267  0067A2  5001               	movf	___ftpack@arg^0,w,c
  6268  0067A4  1002               	iorwf	(___ftpack@arg+1)^0,w,c
  6269  0067A6  1003               	iorwf	(___ftpack@arg+2)^0,w,c
  6270  0067A8  A4D8               	btfss	status,2,c
  6271  0067AA  D00C               	goto	l2317
  6272  0067AC                     u1540:
  6273  0067AC  0E00               	movlw	0
  6274  0067AE  6E01               	movwf	?___ftpack^0,c
  6275  0067B0  0E00               	movlw	0
  6276  0067B2  6E02               	movwf	(?___ftpack+1)^0,c
  6277  0067B4  0E00               	movlw	0
  6278  0067B6  6E03               	movwf	(?___ftpack+2)^0,c
  6279  0067B8  0012               	return	
  6280  0067BA                     l2315:
  6281  0067BA  2A04               	incf	___ftpack@exp^0,f,c
  6282  0067BC  90D8               	bcf	status,0,c
  6283  0067BE  3203               	rrcf	(___ftpack@arg+2)^0,f,c
  6284  0067C0  3202               	rrcf	(___ftpack@arg+1)^0,f,c
  6285  0067C2  3201               	rrcf	___ftpack@arg^0,f,c
  6286  0067C4                     l2317:
  6287  0067C4  0E00               	movlw	0
  6288  0067C6  1401               	andwf	___ftpack@arg^0,w,c
  6289  0067C8  6E06               	movwf	??___ftpack^0,c
  6290  0067CA  0E00               	movlw	0
  6291  0067CC  1402               	andwf	(___ftpack@arg+1)^0,w,c
  6292  0067CE  6E07               	movwf	(??___ftpack+1)^0,c
  6293  0067D0  0EFE               	movlw	254
  6294  0067D2  1403               	andwf	(___ftpack@arg+2)^0,w,c
  6295  0067D4  6E08               	movwf	(??___ftpack+2)^0,c
  6296  0067D6  5006               	movf	??___ftpack^0,w,c
  6297  0067D8  1007               	iorwf	(??___ftpack+1)^0,w,c
  6298  0067DA  1008               	iorwf	(??___ftpack+2)^0,w,c
  6299  0067DC  B4D8               	btfsc	status,2,c
  6300  0067DE  D00C               	goto	l2323
  6301  0067E0  D7EC               	goto	l2315
  6302  0067E2                     l2319:
  6303  0067E2  2A04               	incf	___ftpack@exp^0,f,c
  6304  0067E4  0E01               	movlw	1
  6305  0067E6  2601               	addwf	___ftpack@arg^0,f,c
  6306  0067E8  0E00               	movlw	0
  6307  0067EA  2202               	addwfc	(___ftpack@arg+1)^0,f,c
  6308  0067EC  0E00               	movlw	0
  6309  0067EE  2203               	addwfc	(___ftpack@arg+2)^0,f,c
  6310  0067F0  90D8               	bcf	status,0,c
  6311  0067F2  3203               	rrcf	(___ftpack@arg+2)^0,f,c
  6312  0067F4  3202               	rrcf	(___ftpack@arg+1)^0,f,c
  6313  0067F6  3201               	rrcf	___ftpack@arg^0,f,c
  6314  0067F8                     l2323:
  6315  0067F8  0E00               	movlw	0
  6316  0067FA  1401               	andwf	___ftpack@arg^0,w,c
  6317  0067FC  6E06               	movwf	??___ftpack^0,c
  6318  0067FE  0E00               	movlw	0
  6319  006800  1402               	andwf	(___ftpack@arg+1)^0,w,c
  6320  006802  6E07               	movwf	(??___ftpack+1)^0,c
  6321  006804  0EFF               	movlw	255
  6322  006806  1403               	andwf	(___ftpack@arg+2)^0,w,c
  6323  006808  6E08               	movwf	(??___ftpack+2)^0,c
  6324  00680A  5006               	movf	??___ftpack^0,w,c
  6325  00680C  1007               	iorwf	(??___ftpack+1)^0,w,c
  6326  00680E  1008               	iorwf	(??___ftpack+2)^0,w,c
  6327  006810  B4D8               	btfsc	status,2,c
  6328  006812  D006               	goto	l2327
  6329  006814  D7E6               	goto	l2319
  6330  006816                     l2325:
  6331  006816  0604               	decf	___ftpack@exp^0,f,c
  6332  006818  90D8               	bcf	status,0,c
  6333  00681A  3601               	rlcf	___ftpack@arg^0,f,c
  6334  00681C  3602               	rlcf	(___ftpack@arg+1)^0,f,c
  6335  00681E  3603               	rlcf	(___ftpack@arg+2)^0,f,c
  6336  006820                     l2327:
  6337  006820  BE02               	btfsc	(___ftpack@arg+1)^0,7,c
  6338  006822  D003               	goto	u1580
  6339  006824  0E02               	movlw	2
  6340  006826  6004               	cpfslt	___ftpack@exp^0,c
  6341  006828  D7F6               	goto	l2325
  6342  00682A                     u1580:
  6343  00682A  A004               	btfss	___ftpack@exp^0,0,c
  6344  00682C  9E02               	bcf	(___ftpack@arg+1)^0,7,c
  6345  00682E  90D8               	bcf	status,0,c
  6346  006830  3204               	rrcf	___ftpack@exp^0,f,c
  6347  006832  5004               	movf	___ftpack@exp^0,w,c
  6348  006834  1203               	iorwf	(___ftpack@arg+2)^0,f,c
  6349  006836  5005               	movf	___ftpack@sign^0,w,c
  6350  006838  A4D8               	btfss	status,2,c
  6351  00683A  8E03               	bsf	(___ftpack@arg+2)^0,7,c
  6352  00683C  C001  F001         	movff	___ftpack@arg,?___ftpack
  6353  006840  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  6354  006844  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  6355  006848  0012               	return		;funcret
  6356  00684A                     __end_of___ftpack:
  6357                           	opt callstack 0
  6358                           
  6359                           	psect	rparam
  6360  0000                     tosu	equ	0xFFF
  6361                           tosh	equ	0xFFE
  6362                           tosl	equ	0xFFD
  6363                           stkptr	equ	0xFFC
  6364                           pclatu	equ	0xFFB
  6365                           pclath	equ	0xFFA
  6366                           pcl	equ	0xFF9
  6367                           tblptru	equ	0xFF8
  6368                           tblptrh	equ	0xFF7
  6369                           tblptrl	equ	0xFF6
  6370                           tablat	equ	0xFF5
  6371                           prodh	equ	0xFF4
  6372                           prodl	equ	0xFF3
  6373                           indf0	equ	0xFEF
  6374                           postinc0	equ	0xFEE
  6375                           postdec0	equ	0xFED
  6376                           preinc0	equ	0xFEC
  6377                           plusw0	equ	0xFEB
  6378                           fsr0h	equ	0xFEA
  6379                           fsr0l	equ	0xFE9
  6380                           wreg	equ	0xFE8
  6381                           indf1	equ	0xFE7
  6382                           postinc1	equ	0xFE6
  6383                           postdec1	equ	0xFE5
  6384                           preinc1	equ	0xFE4
  6385                           plusw1	equ	0xFE3
  6386                           fsr1h	equ	0xFE2
  6387                           fsr1l	equ	0xFE1
  6388                           bsr	equ	0xFE0
  6389                           indf2	equ	0xFDF
  6390                           postinc2	equ	0xFDE
  6391                           postdec2	equ	0xFDD
  6392                           preinc2	equ	0xFDC
  6393                           plusw2	equ	0xFDB
  6394                           fsr2h	equ	0xFDA
  6395                           fsr2l	equ	0xFD9
  6396                           status	equ	0xFD8


Data Sizes:
    Strings     23
    Constant    118
    Data        0
    BSS         5
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     74      74
    BANK0           160     73      78
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_2(CODE[8]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 5
		 -> strResultado(BANK0[5]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    putsXLCD@buffer	PTR unsigned char  size(2) Largest target is 5
		 -> strResultado(BANK0[5]), 

    putrsXLCD@buffer	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_1(CODE[15]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->___ftsub
    _scale->___ftmul
    ___awdiv->___awmod
    _fround->___ftmul
    ___wmul->___lwdiv
    ___lwdiv->___lwmod
    ___ftmul->___wmul
    ___lltoft->___ftpack
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround
    _putsXLCD->_WriteDataXLCD
    _putrsXLCD->_WriteDataXLCD
    _inicializacionLCD->_OpenXLCD
    _DelayPORXLCD->_delay_ms
    ___lwtoft->___ftpack
    ___ftdiv->___ftmul

Critical Paths under _main in BANK0

    _main->_sprintf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                54    54      0   76277
                                             23 BANK0     50    50      0
                       _WriteCmdXLCD
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftsub
                           ___lwtoft
                      _conversionADC
                           _delay_ms
                  _inicializacionLCD
                            _initADC
                          _putrsXLCD
                           _putsXLCD
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             44    37      7   50320
                                             61 COMRAM    13     6      7
                                              0 BANK0     23    23      0
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                                7     4      3   10910
                                             33 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1208
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1364
                                              6 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              10     7      3   10596
                                             33 COMRAM    10     7      3
                            ___ftmul
                            ___lwdiv
                            ___lwmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    1223
                                             12 COMRAM     6     2      4
                            ___lwdiv (ARG)
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     615
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     618
                                              5 COMRAM     7     3      4
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    7895
                                             18 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                            ___lwdiv (ARG)
                            ___lwmod (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     455
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     598
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    3028
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     615
                                              0 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     466
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     480
                                             40 COMRAM    15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    5258
                                             55 COMRAM     6     0      6
                            ___ftadd
                            ___ftmul (ARG)
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    4609
                                             43 COMRAM    12     6      6
                            ___ftmul (ARG)
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     121
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     592
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) _putsXLCD                                             2     0      2     165
                                              1 COMRAM     2     0      2
                           _BusyXLCD
                      _WriteDataXLCD
 ---------------------------------------------------------------------------------
 (1) _putrsXLCD                                            2     0      2     165
                                              1 COMRAM     2     0      2
                           _BusyXLCD
                      _WriteDataXLCD
 ---------------------------------------------------------------------------------
 (2) _WriteDataXLCD                                        1     1      0      44
                                              0 COMRAM     1     1      0
                      _DelayFor18TCY
 ---------------------------------------------------------------------------------
 (1) _initADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _inicializacionLCD                                    0     0      0     404
                           _OpenXLCD
                       _WriteCmdXLCD
 ---------------------------------------------------------------------------------
 (2) _OpenXLCD                                             2     2      0     360
                                              5 COMRAM     2     2      0
                           _BusyXLCD
                       _DelayPORXLCD
                       _SetDDRamAddr
                       _WriteCmdXLCD
 ---------------------------------------------------------------------------------
 (2) _WriteCmdXLCD                                         1     1      0      44
                                              0 COMRAM     1     1      0
                      _DelayFor18TCY
 ---------------------------------------------------------------------------------
 (3) _SetDDRamAddr                                         4     4      0      44
                                              0 COMRAM     4     4      0
                      _DelayFor18TCY
 ---------------------------------------------------------------------------------
 (3) _DelayPORXLCD                                         0     0      0     250
                           _delay_ms
 ---------------------------------------------------------------------------------
 (4) _delay_ms                                             5     1      4     250
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (2) _BusyXLCD                                             0     0      0       0
                      _DelayFor18TCY
 ---------------------------------------------------------------------------------
 (3) _DelayFor18TCY                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _conversionADC                                        6     4      2      23
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) ___lwtoft                                             3     0      3    2981
                                              8 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) ___ftdiv                                             15     9      6    3441
                                             33 COMRAM    15     9      6
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2883
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _WriteCmdXLCD
     _DelayFor18TCY
   ___ftadd
     ___ftmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___lwdiv (ARG)
         ___lwmod (ARG)
       ___lwmod (ARG)
       ___wmul (ARG)
         ___lwdiv (ARG)
           ___lwmod (ARG)
         ___lwmod (ARG)
     ___ftpack (ARG)
     _fround (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lwdiv (ARG)
           ___lwmod (ARG)
         ___lwmod (ARG)
         ___wmul (ARG)
           ___lwdiv (ARG)
             ___lwmod (ARG)
           ___lwmod (ARG)
       ___lwdiv
         ___lwmod (ARG)
       ___lwmod
       ___wmul
         ___lwdiv (ARG)
           ___lwmod (ARG)
         ___lwmod (ARG)
   ___ftdiv
     ___ftmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___lwdiv (ARG)
         ___lwmod (ARG)
       ___lwmod (ARG)
       ___wmul (ARG)
         ___lwdiv (ARG)
           ___lwmod (ARG)
         ___lwmod (ARG)
     ___ftpack (ARG)
   ___ftmul
     ___awdiv (ARG)
       ___awmod (ARG)
     ___awmod (ARG)
     ___ftpack (ARG)
     ___lwdiv (ARG)
       ___lwmod (ARG)
     ___lwmod (ARG)
     ___wmul (ARG)
       ___lwdiv (ARG)
         ___lwmod (ARG)
       ___lwmod (ARG)
   ___ftsub
     ___ftadd
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lwdiv (ARG)
           ___lwmod (ARG)
         ___lwmod (ARG)
         ___wmul (ARG)
           ___lwdiv (ARG)
             ___lwmod (ARG)
           ___lwmod (ARG)
       ___ftpack (ARG)
       _fround (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lwdiv (ARG)
             ___lwmod (ARG)
           ___lwmod (ARG)
           ___wmul (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
         ___lwdiv
           ___lwmod (ARG)
         ___lwmod
         ___wmul
           ___lwdiv (ARG)
             ___lwmod (ARG)
           ___lwmod (ARG)
     ___ftmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___lwdiv (ARG)
         ___lwmod (ARG)
       ___lwmod (ARG)
       ___wmul (ARG)
         ___lwdiv (ARG)
           ___lwmod (ARG)
         ___lwmod (ARG)
     ___lltoft (ARG)
       ___ftpack
   ___lwtoft
     ___ftpack
   _conversionADC
   _delay_ms
   _inicializacionLCD
     _OpenXLCD
       _BusyXLCD
         _DelayFor18TCY
       _DelayPORXLCD
         _delay_ms
       _SetDDRamAddr
         _DelayFor18TCY
       _WriteCmdXLCD
         _DelayFor18TCY
     _WriteCmdXLCD
       _DelayFor18TCY
   _initADC
   _putrsXLCD
     _BusyXLCD
       _DelayFor18TCY
     _WriteDataXLCD
       _DelayFor18TCY
   _putsXLCD
     _BusyXLCD
       _DelayFor18TCY
     _WriteDataXLCD
       _DelayFor18TCY
   _sprintf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lwdiv (ARG)
           ___lwmod (ARG)
         ___lwmod (ARG)
         ___wmul (ARG)
           ___lwdiv (ARG)
             ___lwmod (ARG)
           ___lwmod (ARG)
       ___ftpack (ARG)
       _fround (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lwdiv (ARG)
             ___lwmod (ARG)
           ___lwmod (ARG)
           ___wmul (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
         ___lwdiv
           ___lwmod (ARG)
         ___lwmod
         ___wmul
           ___lwdiv (ARG)
             ___lwmod (ARG)
           ___lwmod (ARG)
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___lwdiv (ARG)
         ___lwmod (ARG)
       ___lwmod (ARG)
       ___wmul (ARG)
         ___lwdiv (ARG)
           ___lwmod (ARG)
         ___lwmod (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lwdiv (ARG)
             ___lwmod (ARG)
           ___lwmod (ARG)
           ___wmul (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
             ___wmul (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
           ___lwdiv
             ___lwmod (ARG)
           ___lwmod
           ___wmul
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lwdiv (ARG)
           ___lwmod (ARG)
         ___lwmod (ARG)
         ___wmul (ARG)
           ___lwdiv (ARG)
             ___lwmod (ARG)
           ___lwmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lwdiv (ARG)
           ___lwmod (ARG)
         ___lwmod (ARG)
         ___wmul (ARG)
           ___lwdiv (ARG)
             ___lwmod (ARG)
           ___lwmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lwdiv (ARG)
             ___lwmod (ARG)
           ___lwmod (ARG)
           ___wmul (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
     ___lldiv
     ___llmod
     ___lltoft
       ___ftpack
     ___wmul
       ___lwdiv (ARG)
         ___lwmod (ARG)
       ___lwmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lwdiv (ARG)
           ___lwmod (ARG)
         ___lwmod (ARG)
         ___wmul (ARG)
           ___lwdiv (ARG)
             ___lwmod (ARG)
           ___lwmod (ARG)
       ___lwdiv
         ___lwmod (ARG)
       ___lwmod
       ___wmul
         ___lwdiv (ARG)
           ___lwmod (ARG)
         ___lwmod (ARG)
     _isdigit
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lwdiv (ARG)
           ___lwmod (ARG)
         ___lwmod (ARG)
         ___wmul (ARG)
           ___lwdiv (ARG)
             ___lwmod (ARG)
           ___lwmod (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     49      4E       5       48.8%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     4A      4A       1       77.9%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      98      20        0.0%
DATA                 0      0      98       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Mon May 18 16:03:41 2020

                         l9 6334                ___awdiv@sign 000C                 __CFG_BOR$ON 000000  
       ___wmul@multiplicand 000F                 __CFG_BORV$3 000000                __CFG_CP0$OFF 000000  
              __CFG_CP1$OFF 000000                ___ftadd@exp1 0037                ___ftadd@exp2 0036  
              ___ftadd@sign 0035                         l334 6706                         l199 61E8  
                       l704 6242                         l289 7DF2                         l820 648E  
                       l654 6F18                         l830 643C                         l672 6D64  
                       l665 69D0                         l673 6D8C                         l749 65A0  
              __CFG_CPB$OFF 000000       __size_of_WriteCmdXLCD 003E                ___awmod@sign 0006  
                       wreg 000FE8                __CFG_LVP$OFF 000000                ___ftdiv@cntr 002B  
              ___ftdiv@sign 0030                __CFG_WDT$OFF 000000                        l3005 6876  
                      l2303 62DA                        l3023 68CA                        l3111 791E  
                      l2305 62EA                        l3041 690A                        l3033 68E2  
                      l3105 7904                        l2323 67F8                        l2315 67BA  
                      l3035 68EE                        l3027 68DA                        l3051 656A  
                      l3211 7CBE                        l3131 79B4                        l2325 6816  
                      l2317 67C4                        l2501 6F64                        l3125 7992  
                      l3109 7918                        l2327 6820                        l2319 67E2  
                      l3063 64F6                        l2511 6B1E                        l3231 7D1E  
                      l3207 7C58                        l3143 79F0                        l3135 79B8  
                      l3119 7948                        l3127 79A8                        l3073 62A6  
                      l3057 6592                        l3049 655E                        l3065 6502  
                      l3241 7DB8                        l3217 7CC2                        l3153 7A32  
                      l3137 79DC                        l3305 7FDA                        l3323 696C  
                      l3083 6278                        l2443 6E32                        l2531 6B78  
                      l3317 6944                        l2541 6BA0                        l2517 6B46  
                      l2621 6600                        l2613 65E0                        l2605 65C6  
                      l3261 7E14                        l3253 7DF6                        l3181 7B50  
                      l3343 69AA                        l3079 62C4                        l2471 6EAC  
                      l2535 6B88                        l2615 65E8                        l3247 7DCE  
                      l3239 7DAE                        l2721 6CB2                        l2713 6C92  
                      l3089 6294                        l2473 6EB6                        l2449 6E5A  
                      l2545 6BB0                        l2641 6464                        l2561 672C  
                      l2625 660A                        l2609 65D2                        l2801 73A0  
                      l3265 7E64                        l3193 7BDA                        l3185 7B90  
                      l3177 7B2A                        l3169 7AC4                        l3441 7564  
                      l2707 6C78                        l2491 6F34                        l2483 6EEA  
                      l2475 6EC0                        l2651 6484                        l3291 7F88  
                      l3283 7F66                        l3275 7F44                        l2725 6CC2  
                      l2717 6CA2                        l2485 6EF4                        l2661 641A  
                      l2573 6752                        l2629 6618                        l3277 7F50  
                      l3197 7C00                        l3285 7F70                        l2639 645C  
                      l2575 675A                        l2567 673C                        l2815 752C  
                      l2729 6CD2                        l2921 6A9E                        l2913 6A6E  
                      l2593 6792                        l2585 677A                        l2809 749C  
                      l2667 6432                        l2659 6412                        l2827 61DE  
                      l2933 6ABA                        l2837 6D10                        l2589 6784  
                      l2943 6AD2                        l2791 72EC                        l2953 66B8  
                      l2945 6ADE                        l2937 6ACA                        l2873 6DA6  
                      l2777 71A8                        l2769 70D8                        l2955 66C4  
                      l2883 6DBE                        l2981 6644                        l2973 63DA  
                      l2965 66F8                        l2893 6A20                        l2885 6DCA  
                      l2877 6DB6                        l2797 737C                        l2991 6692  
                      l2985 6666                        STR_1 107B                        STR_2 108A  
                      u2030 6468                        u2060 641E                        u2080 6C82  
                      u2320 6DD0                        u2241 6CF4                        u2410 66C8  
                      u2330 6A0E                        u2250 6CFE                        u3107 62E0  
                      u1540 67AC                        u1700 6E4C                        u2500 6894  
                      u3117 616E                        u3037 6C10                        u2261 6D20  
                      u3047 6C1E                        u1631 6DF2                        u1800 6EFC  
                      u1625 64B4                        u3057 6C2C                        u1641 6E06  
                      u2505 688C                        u1730 6E8A                        u3067 6C3A  
                      u1580 682A                        u2540 68F4                        u3077 6C48  
                      u1670 6E24                        u2390 6AE4                        u3087 6C56  
                      u2800 7BDA                        u2720 7A6A                        u3097 6C6A  
                      u2481 685A                        u1841 6B06                        u1770 6EC8  
                      u2490 6864                        u2570 656E                        u1930 675E  
                      u1861 6B2E                        u2725 7A60                        u2830 7CF8  
                      u2760 7B62                        u2770 7BA2                        u2860 7DDC  
                      u2941 7FB8                        u1990 65EC                        u2870 7DEC  
                      u2960 7FF2                        u2971 692C                        u2991 6954  
                      _main 7550                ___ftpack@arg 0001                ___ftpack@exp 0004  
                      fsr2h 000FDA                        indf2 000FDF                        fsr2l 000FD9  
              _strResultado 00A9      __size_of_WriteDataXLCD 003E                        prodh 000FF4  
                      prodl 000FF3                        start 1000               __CFG_IESO$OFF 000000  
              _sprintf$1075 0060               __CFG_MCLRE$ON 000000                ___ftmul@cntr 0020  
              ___param_bank 000000                ___ftmul@sign 0021           _inicializacionLCD 61AE  
              ___fttol@exp1 0037                ___fttol@lval 0033          ?_inicializacionLCD 0001  
              _WriteCmdXLCD 6348               __CFG_PLLDIV$5 000000               _conversionADC 61E6  
             ?_SetDDRamAddr 0001                       ?_main 0001             __end_of___awdiv 679C  
           __end_of___ftadd 6F8A             __end_of___awmod 6622             __end_of___ftdiv 6A02  
           __end_of___ftneg 6250             __end_of___lldiv 6718             __end_of___ftmul 6BEA  
           ___awdiv@divisor 0009             __end_of___llmod 65B2             __end_of___ftsub 6404  
           __end_of___fttol 691C             __end_of___lwdiv 6498             __end_of___lwmod 6446  
           ___awdiv@counter 000B         ??_inicializacionLCD 0008                       _PORTD 000F83  
             __CFG_USBDIV$2 000000                       _TRISD 000F95               __CFG_PWRT$OFF 000000  
             __CFG_WRT0$OFF 000000               __CFG_WRT1$OFF 000000                ___lltoft@exp 0011  
            __CFG_EBTR0$OFF 000000              __CFG_FCMEN$OFF 000000              __CFG_EBTR1$OFF 000000  
             __CFG_WRTB$OFF 000000               __CFG_WRTC$OFF 000000             __end_of_initADC 6182  
            __CFG_EBTRB$OFF 000000             __end_of_dpowers 107B                       _scale 71E8  
           __end_of_isdigit 61E6               ___ftpack@sign 0005                       tablat 000FF5  
                     status 000FD8             __end_of_sprintf 8000   __end_of_inicializacionLCD 61C8  
           __initialization 6198                __end_of_main 78F8            __end_of_BusyXLCD 6348  
     __size_of_DelayPORXLCD 0016              ?_conversionADC 0001              ??_SetDDRamAddr 0001  
          __end_of_OpenXLCD 6CE4                      ??_main 004B               ___fttol@sign1 0032  
             __activetblptr 000002               _WriteDataXLCD 6386      conversionADC@resultado 0005  
      __size_of__tdiv_to_l_ 00FE                      _ADCON0 000FC2                      _ADCON1 000FC1  
                    _ADCON2 000FC0            ___llmod@dividend 0001                      ?_scale 0022  
                    _ADRESH 000FC4                      _ADRESL 000FC3            ___awdiv@dividend 0007  
          __end_of___ftpack 684A            __end_of___lltoft 654C            __end_of___lwtoft 622C  
            __CFG_VREGEN$ON 000000            __end_of_delay_ms 630E                _DelayPORXLCD 6182  
            __CFG_XINST$OFF 000000            __end_of__powers_ 102C                      ___ftge 6622  
                    ___wmul 6250                   ??___awdiv 000B                   ??___ftadd 0032  
            __CFG_STVREN$ON 000000                   ??___awmod 0005                   ??___ftdiv 0028  
                 ??___ftneg 0004                   ??___lldiv 0009                   ??___ftmul 0019  
                 ??___llmod 0009                   ??___ftsub 003E                   ??___fttol 002D  
                 ??___lwdiv 000A                   ??___lwmod 0005                      _fround 6F8A  
          ___awdiv@quotient 000D             ___awmod@divisor 0003             ___awmod@counter 0005  
            ?_WriteDataXLCD 0001                   ??_initADC 0001       ___ftmul@f3_as_product 001D  
                 ??_isdigit 0001                __mediumconst 0000                      tblptrh 000FF7  
                    tblptrl 000FF6                      tblptru 000FF8            __end_of_putsXLCD 62A4  
                 ??_sprintf 0045                  __accesstop 0060     __end_of__initialization 61A4  
           __CFG_PBADEN$OFF 000000                  ___ftadd@f1 002C                  ___ftadd@f2 002F  
                ___ftge@ff1 0001                  ___ftge@ff2 0004               ___rparam_used 000001  
                ___ftdiv@f1 0022                  ___ftdiv@f2 0025                  ___ftdiv@f3 002C  
__size_of_inicializacionLCD 001A                  ___ftneg@f1 0001                  ___ftmul@f1 0013  
                ___ftmul@f2 0016                  ___ftsub@f1 0038                  ___ftsub@f2 003B  
                ___fttol@f1 0029              __pcstackCOMRAM 0001                  ___lltoft@c 0009  
           ??_conversionADC 0003               __end_of_scale 7550                  ___lwtoft@c 0009  
                __div_to_l_ 6A02             __div_to_l_@exp1 000C             __div_to_l_@cntr 000B  
                   ??_scale 0025      __size_of_DelayFor18TCY 0008             __div_to_l_@quot 0007  
                __pbssBANK0 00A9                   ?_BusyXLCD 0001             WriteCmdXLCD@cmd 0001  
      __end_of_SetDDRamAddr 64F0                   ?_OpenXLCD 0001               __div_to_l_@f1 0001  
             __div_to_l_@f2 0004                     ?___ftge 0001           WriteDataXLCD@data 0001  
                   ?___wmul 000D             ??_WriteDataXLCD 0001                     ?_fround 0022  
                 ?___ftpack 0001                   ?___lltoft 0009                   ?___lwtoft 0009  
                 ?_delay_ms 0001          __size_of_putrsXLCD 0034                  ??_BusyXLCD 0001  
                ??_OpenXLCD 0006           __end_of__npowers_ 1053                     __Hparam 0000  
                _scale$1074 0025                     __Lparam 0000             __size_of___ftge 0074  
                   ___awdiv 6718               _DelayFor18TCY 616C                     ___ftadd 6DE2  
                   ___awmod 65B2                     ___ftdiv 691C                     ___ftneg 622C  
                   ___lldiv 6696             __size_of___wmul 0026                     ___ftmul 6AF6  
                   ___llmod 654C                     ___ftsub 63C4                     ___fttol 684A  
                 ?_putsXLCD 0002                     ___lwdiv 6446                     ___lwmod 6404  
              __psmallconst 1004                     __pcinit 6198                  ??___ftpack 0006  
           putrsXLCD@buffer 0002             __size_of_fround 025E                     __ramtop 0800  
                ??___lltoft 000D                     __ptext0 7550                     __ptext1 78F8  
                   __ptext2 71E8                     __ptext3 65B2                     __ptext4 6718  
                   __ptext5 61C8                     __ptext6 6F8A                     __ptext7 6250  
                   __ptext8 6404                     __ptext9 6446                  ??___lwtoft 000C  
                   _initADC 6174                 ?__div_to_l_ 0001                     _dpowers 1053  
                   _isdigit 61C8            ___awmod@dividend 0001                  ??_delay_ms 0005  
                   main@Dis 0077                     _sprintf 78F8        end_of_initialization 61A4  
             __Lmediumconst 0000             ___lldiv@divisor 0005             ___lldiv@counter 000D  
            ?_DelayFor18TCY 0001                     postdec2 000FDD                     postinc2 000FDE  
                ??_putsXLCD 0004              __tdiv_to_l_@f1 0001              __tdiv_to_l_@f2 0004  
         __end_of_putrsXLCD 62D8               ??__tdiv_to_l_ 0007                   _TRISEbits 000F96  
     __size_of_SetDDRamAddr 0058                 ___ftdiv@exp 002F         __size_of__div_to_l_ 00F4  
               ___ftmul@exp 001C              __end_of___ftge 6696              __end_of___wmul 6276  
            __end_of_fround 71E8                _SetDDRamAddr 6498          SetDDRamAddr@DDaddr 0004  
       start_initialization 6198         __end_of__tdiv_to_l_ 6DE2             ___llmod@divisor 0005  
         __size_of_BusyXLCD 003A             ___llmod@counter 0009             ??_DelayFor18TCY 0001  
         __size_of_OpenXLCD 00FA                    ??___ftge 0007                    ??___wmul 0011  
             ?_WriteCmdXLCD 0001            __CFG_LPT1OSC$OFF 000000                    ??_fround 0025  
     __end_of_conversionADC 6208               sprintf@tmpval 006D                  fround@prec 002B  
         __size_of___ftpack 00AE           __size_of___lltoft 005C           __size_of___lwtoft 0024  
             __pcstackBANK0 0060           __size_of_delay_ms 0036                 sprintf@flag 0065  
               sprintf@eexp 006B                 sprintf@fval 0073                 sprintf@prec 0071  
                 _main$1060 0080                   _main$1061 0083                   _main$1070 009E  
                 _main$1062 0086                   _main$1071 00A1                   _main$1063 0089  
                 _main$1064 008C                   _main$1065 008F                   _main$1066 0092  
                 _main$1058 007A                   _main$1067 0095                   _main$1059 007D  
                 _main$1068 0098                   _main$1069 009B              putsXLCD@buffer 0002  
          ___lwdiv@dividend 0006              ??_WriteCmdXLCD 0001                    ?___awdiv 0007  
                  ?___ftadd 002C                    ?___awmod 0001                    ?___ftdiv 0022  
                  ?___ftneg 0001                    ?___lldiv 0001                    ?___ftmul 0013  
                  ?___llmod 0001                    ?___ftsub 0038                   __npowers_ 102C  
                  ?___fttol 0029                    ?___lwdiv 0006                    ?___lwmod 0001  
               __tdiv_to_l_ 6CE4           __size_of_putsXLCD 002E       __end_of_WriteDataXLCD 63C4  
                  ?_initADC 0001                ??__div_to_l_ 0007                 __smallconst 1004  
                  ?_isdigit 0001            ___lwdiv@quotient 000A                    ?_sprintf 003E  
            __size_of_scale 0368              ___wmul@product 0011                    _LATEbits 000F8D  
                 delay_ms@n 0001               ?_DelayPORXLCD 0001             OpenXLCD@lcdtype 0007  
        __end_of__div_to_l_ 6AF6            __CFG_WDTPS$32768 000000                  _ADCON0bits 000FC2  
         ___wmul@multiplier 000D                   _putrsXLCD 62A4                    _BusyXLCD 630E  
            ??_DelayPORXLCD 0006                    _OpenXLCD 6BEA                    __Hrparam 0000  
                  __Lrparam 0000            __size_of___awdiv 0084            __size_of___ftadd 01A8  
          __size_of___awmod 0070            __size_of___ftdiv 00E6            __size_of___ftneg 0024  
          __size_of___lldiv 0082            __size_of___ftmul 00F4            __size_of___llmod 0066  
          __size_of___ftsub 0040            __size_of___fttol 00D2            __size_of___lwdiv 0052  
          __size_of___lwmod 0042                    ___ftpack 679C                 _fround$1072 0028  
               _fround$1073 0025                    ___lltoft 64F0                 _isdigit$860 0002  
                  ___lwtoft 6208                  sprintf@val 0067                  ?_putrsXLCD 0002  
          __size_of_initADC 000E            __size_of_isdigit 001E                    _delay_ms 62D8  
           ___lwdiv@divisor 0008             ___lwdiv@counter 000C                    __ptext10 6AF6  
                  __ptext11 6CE4                    __ptext20 6622                    __ptext12 6A02  
                  __ptext21 6276                    __ptext13 64F0                    __ptext30 62D8  
                  __ptext22 62A4                    __ptext14 654C                    __ptext31 630E  
                  __ptext23 6386                    __ptext15 6696                    __ptext32 616C  
                  __ptext24 6174                    __ptext16 684A                    __ptext33 61E6  
                  __ptext25 61AE                    __ptext17 63C4                    __ptext34 6208  
                  __ptext26 6BEA                    __ptext18 6DE2                    __ptext35 691C  
                  __ptext27 6348                    __ptext19 622C                    __ptext36 679C  
                  __ptext28 6498                    __ptext29 6182                    __powers_ 1005  
      __end_of_WriteCmdXLCD 6386            __size_of_sprintf 0708               __size_of_main 03A8  
                  _putsXLCD 6276                    main@Radc 00A4                    main@Vadc 00A6  
     __CFG_CPUDIV$OSC1_PLL2 000000                    isdigit@c 0003                    scale@scl 0028  
                 sprintf@ap 0063            __tdiv_to_l_@exp1 000F                   sprintf@sp 003E  
          __tdiv_to_l_@cntr 000E            __tdiv_to_l_@quot 000A            ___lwmod@dividend 0001  
          ___lldiv@dividend 0001       __end_of_DelayFor18TCY 6174                ?__tdiv_to_l_ 0001  
                  sprintf@c 0076                    sprintf@f 0040        __end_of_DelayPORXLCD 6198  
               ??_putrsXLCD 0004            ___lldiv@quotient 0009             ___lwmod@divisor 0003  
           ___lwmod@counter 0005          __CFG_FOSC$HSPLL_HS 000000      __size_of_conversionADC 0022  
