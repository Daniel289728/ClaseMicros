

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Thu Mar 19 14:48:36 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    12                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    13                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    14                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    15                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    16  0000                     
    17                           ; Version 2.10
    18                           ; Generated 31/07/2019 GMT
    19                           ; 
    20                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    21                           ; All rights reserved.
    22                           ; 
    23                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    24                           ; 
    25                           ; Redistribution and use in source and binary forms, with or without modification, are
    26                           ; permitted provided that the following conditions are met:
    27                           ; 
    28                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    29                           ;        conditions and the following disclaimer.
    30                           ; 
    31                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    32                           ;        of conditions and the following disclaimer in the documentation and/or other
    33                           ;        materials provided with the distribution.
    34                           ; 
    35                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    36                           ;        software without specific prior written permission.
    37                           ; 
    38                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    39                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    40                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    41                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    42                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    43                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    44                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    45                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    46                           ; 
    47                           ; 
    48                           ; Code-generator required, PIC18F4550 Definitions
    49                           ; 
    50                           ; SFR Addresses
    51  0000                     _LATAbits	set	3977
    52  0000                     _INTCON2bits	set	4081
    53  0000                     _INTCONbits	set	4082
    54  0000                     _LATD	set	3980
    55  0000                     _TRISAbits	set	3986
    56  0000                     _TRISDbits	set	3989
    57  0000                     _OSCCON	set	4051
    58                           
    59                           ; #config settings
    60  0000                     
    61                           	psect	cinit
    62  000222                     __pcinit:
    63                           	opt callstack 0
    64  000222                     start_initialization:
    65                           	opt callstack 0
    66  000222                     __initialization:
    67                           	opt callstack 0
    68                           
    69                           ; Clear objects allocated to COMRAM (1 bytes)
    70  000222  6A0D               	clrf	__pbssCOMRAM& (0+255),c
    71  000224                     end_of_initialization:
    72                           	opt callstack 0
    73  000224                     __end_of__initialization:
    74                           	opt callstack 0
    75  000224  900E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
    76  000226  920E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
    77  000228  0100               	movlb	0
    78  00022A  EF09  F000         	goto	_main	;jump to C main() function
    79                           
    80                           	psect	bssCOMRAM
    81  00000D                     __pbssCOMRAM:
    82                           	opt callstack 0
    83  00000D                     _value:
    84                           	opt callstack 0
    85  00000D                     	ds	1
    86                           
    87                           	psect	cstackCOMRAM
    88  000001                     __pcstackCOMRAM:
    89                           	opt callstack 0
    90  000001                     StepDelay@val:
    91                           	opt callstack 0
    92                           
    93                           ; 4 bytes @ 0x0
    94  000001                     	ds	4
    95  000005                     StepDelay@i:
    96                           	opt callstack 0
    97                           
    98                           ; 4 bytes @ 0x4
    99  000005                     	ds	4
   100  000009                     StepDelay@j:
   101                           	opt callstack 0
   102                           
   103                           ; 4 bytes @ 0x8
   104  000009                     	ds	4
   105  00000D                     
   106                           ; 1 bytes @ 0xC
   107 ;;
   108 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   109 ;;
   110 ;; *************** function _main *****************
   111 ;; Defined at:
   112 ;;		line 18 in file "main.c"
   113 ;; Parameters:    Size  Location     Type
   114 ;;		None
   115 ;; Auto vars:     Size  Location     Type
   116 ;;		None
   117 ;; Return value:  Size  Location     Type
   118 ;;                  1    wreg      void 
   119 ;; Registers used:
   120 ;;		wreg, status,2, status,0, cstack
   121 ;; Tracked objects:
   122 ;;		On entry : 0/0
   123 ;;		On exit  : 0/0
   124 ;;		Unchanged: 0/0
   125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   126 ;;      Params:         0       0       0       0       0       0       0       0       0
   127 ;;      Locals:         0       0       0       0       0       0       0       0       0
   128 ;;      Temps:          0       0       0       0       0       0       0       0       0
   129 ;;      Totals:         0       0       0       0       0       0       0       0       0
   130 ;;Total ram usage:        0 bytes
   131 ;; Hardware stack levels required when called:    2
   132 ;; This function calls:
   133 ;;		_InterruptInit
   134 ;;		_StepDelay
   135 ;; This function is called by:
   136 ;;		Startup code after reset
   137 ;; This function uses a non-reentrant model
   138 ;;
   139                           
   140                           	psect	text0
   141  000012                     __ptext0:
   142                           	opt callstack 0
   143  000012                     _main:
   144                           	opt callstack 29
   145  000012                     
   146                           ;main.c: 20:     OSCCON = 0x72;
   147  000012  0E72               	movlw	114
   148  000014  6ED3               	movwf	211,c	;volatile
   149  000016                     
   150                           ;main.c: 21:     InterruptInit();
   151  000016  EC17  F001         	call	_InterruptInit	;wreg free
   152  00001A                     
   153                           ;main.c: 22:     TRISDbits.RD0 = 0;
   154  00001A  9095               	bcf	149,0,c	;volatile
   155  00001C                     
   156                           ;main.c: 23:     TRISDbits.RD1 = 0;
   157  00001C  9295               	bcf	149,1,c	;volatile
   158  00001E                     
   159                           ;main.c: 24:     TRISDbits.RD2 = 0;
   160  00001E  9495               	bcf	149,2,c	;volatile
   161  000020                     
   162                           ;main.c: 25:     TRISDbits.RD3 = 0;
   163  000020  9695               	bcf	149,3,c	;volatile
   164  000022                     
   165                           ;main.c: 26:     TRISAbits.RA3 = 0;
   166  000022  9692               	bcf	146,3,c	;volatile
   167  000024                     l844:
   168                           
   169                           ;main.c: 29:     {;main.c: 30:         if(value){
   170  000024  500D               	movf	_value^0,w,c
   171  000026  B4D8               	btfsc	status,2,c
   172  000028  EF18  F000         	goto	u111
   173  00002C  EF1A  F000         	goto	u110
   174  000030                     u111:
   175  000030  EF7C  F000         	goto	l868
   176  000034                     u110:
   177  000034                     
   178                           ;main.c: 31:                 LATD = 0x09;
   179  000034  0E09               	movlw	9
   180  000036  6E8C               	movwf	140,c	;volatile
   181  000038                     
   182                           ;main.c: 32:                 StepDelay(100);
   183  000038  0E64               	movlw	100
   184  00003A  6E01               	movwf	StepDelay@val^0,c
   185  00003C  0E00               	movlw	0
   186  00003E  6E02               	movwf	(StepDelay@val+1)^0,c
   187  000040  0E00               	movlw	0
   188  000042  6E03               	movwf	(StepDelay@val+2)^0,c
   189  000044  0E00               	movlw	0
   190  000046  6E04               	movwf	(StepDelay@val+3)^0,c
   191  000048  ECB0  F000         	call	_StepDelay	;wreg free
   192  00004C                     
   193                           ;main.c: 33:                 LATD = 0x08;
   194  00004C  0E08               	movlw	8
   195  00004E  6E8C               	movwf	140,c	;volatile
   196                           
   197                           ;main.c: 34:                 StepDelay(100);
   198  000050  0E64               	movlw	100
   199  000052  6E01               	movwf	StepDelay@val^0,c
   200  000054  0E00               	movlw	0
   201  000056  6E02               	movwf	(StepDelay@val+1)^0,c
   202  000058  0E00               	movlw	0
   203  00005A  6E03               	movwf	(StepDelay@val+2)^0,c
   204  00005C  0E00               	movlw	0
   205  00005E  6E04               	movwf	(StepDelay@val+3)^0,c
   206  000060  ECB0  F000         	call	_StepDelay	;wreg free
   207  000064                     
   208                           ;main.c: 35:                 LATD = 0x0C;
   209  000064  0E0C               	movlw	12
   210  000066  6E8C               	movwf	140,c	;volatile
   211  000068                     
   212                           ;main.c: 36:                 StepDelay(100);
   213  000068  0E64               	movlw	100
   214  00006A  6E01               	movwf	StepDelay@val^0,c
   215  00006C  0E00               	movlw	0
   216  00006E  6E02               	movwf	(StepDelay@val+1)^0,c
   217  000070  0E00               	movlw	0
   218  000072  6E03               	movwf	(StepDelay@val+2)^0,c
   219  000074  0E00               	movlw	0
   220  000076  6E04               	movwf	(StepDelay@val+3)^0,c
   221  000078  ECB0  F000         	call	_StepDelay	;wreg free
   222                           
   223                           ;main.c: 37:                 LATD = 0x04;
   224  00007C  0E04               	movlw	4
   225  00007E  6E8C               	movwf	140,c	;volatile
   226  000080                     
   227                           ;main.c: 38:                 StepDelay(100);
   228  000080  0E64               	movlw	100
   229  000082  6E01               	movwf	StepDelay@val^0,c
   230  000084  0E00               	movlw	0
   231  000086  6E02               	movwf	(StepDelay@val+1)^0,c
   232  000088  0E00               	movlw	0
   233  00008A  6E03               	movwf	(StepDelay@val+2)^0,c
   234  00008C  0E00               	movlw	0
   235  00008E  6E04               	movwf	(StepDelay@val+3)^0,c
   236  000090  ECB0  F000         	call	_StepDelay	;wreg free
   237  000094                     
   238                           ;main.c: 39:                 LATD = 0x06;
   239  000094  0E06               	movlw	6
   240  000096  6E8C               	movwf	140,c	;volatile
   241                           
   242                           ;main.c: 40:                 StepDelay(100);
   243  000098  0E64               	movlw	100
   244  00009A  6E01               	movwf	StepDelay@val^0,c
   245  00009C  0E00               	movlw	0
   246  00009E  6E02               	movwf	(StepDelay@val+1)^0,c
   247  0000A0  0E00               	movlw	0
   248  0000A2  6E03               	movwf	(StepDelay@val+2)^0,c
   249  0000A4  0E00               	movlw	0
   250  0000A6  6E04               	movwf	(StepDelay@val+3)^0,c
   251  0000A8  ECB0  F000         	call	_StepDelay	;wreg free
   252  0000AC                     
   253                           ;main.c: 41:                 LATD = 0x02;
   254  0000AC  0E02               	movlw	2
   255  0000AE  6E8C               	movwf	140,c	;volatile
   256  0000B0                     
   257                           ;main.c: 42:                 StepDelay(100);
   258  0000B0  0E64               	movlw	100
   259  0000B2  6E01               	movwf	StepDelay@val^0,c
   260  0000B4  0E00               	movlw	0
   261  0000B6  6E02               	movwf	(StepDelay@val+1)^0,c
   262  0000B8  0E00               	movlw	0
   263  0000BA  6E03               	movwf	(StepDelay@val+2)^0,c
   264  0000BC  0E00               	movlw	0
   265  0000BE  6E04               	movwf	(StepDelay@val+3)^0,c
   266  0000C0  ECB0  F000         	call	_StepDelay	;wreg free
   267                           
   268                           ;main.c: 43:                 LATD = 0x03;
   269  0000C4  0E03               	movlw	3
   270  0000C6  6E8C               	movwf	140,c	;volatile
   271  0000C8                     
   272                           ;main.c: 44:                 StepDelay(100);
   273  0000C8  0E64               	movlw	100
   274  0000CA  6E01               	movwf	StepDelay@val^0,c
   275  0000CC  0E00               	movlw	0
   276  0000CE  6E02               	movwf	(StepDelay@val+1)^0,c
   277  0000D0  0E00               	movlw	0
   278  0000D2  6E03               	movwf	(StepDelay@val+2)^0,c
   279  0000D4  0E00               	movlw	0
   280  0000D6  6E04               	movwf	(StepDelay@val+3)^0,c
   281  0000D8  ECB0  F000         	call	_StepDelay	;wreg free
   282  0000DC                     
   283                           ;main.c: 45:                 LATD = 0x01;
   284  0000DC  0E01               	movlw	1
   285  0000DE  6E8C               	movwf	140,c	;volatile
   286                           
   287                           ;main.c: 46:                 StepDelay(100);
   288  0000E0  0E64               	movlw	100
   289  0000E2  6E01               	movwf	StepDelay@val^0,c
   290  0000E4  0E00               	movlw	0
   291  0000E6  6E02               	movwf	(StepDelay@val+1)^0,c
   292  0000E8  0E00               	movlw	0
   293  0000EA  6E03               	movwf	(StepDelay@val+2)^0,c
   294  0000EC  0E00               	movlw	0
   295  0000EE  6E04               	movwf	(StepDelay@val+3)^0,c
   296  0000F0  ECB0  F000         	call	_StepDelay	;wreg free
   297                           
   298                           ;main.c: 47:         }
   299  0000F4  EF12  F000         	goto	l844
   300  0000F8                     l868:
   301                           
   302                           ;main.c: 50:             LATD = 0x09;
   303  0000F8  0E09               	movlw	9
   304  0000FA  6E8C               	movwf	140,c	;volatile
   305  0000FC                     
   306                           ;main.c: 51:             StepDelay(100);
   307  0000FC  0E64               	movlw	100
   308  0000FE  6E01               	movwf	StepDelay@val^0,c
   309  000100  0E00               	movlw	0
   310  000102  6E02               	movwf	(StepDelay@val+1)^0,c
   311  000104  0E00               	movlw	0
   312  000106  6E03               	movwf	(StepDelay@val+2)^0,c
   313  000108  0E00               	movlw	0
   314  00010A  6E04               	movwf	(StepDelay@val+3)^0,c
   315  00010C  ECB0  F000         	call	_StepDelay	;wreg free
   316  000110                     
   317                           ;main.c: 52:             LATD = 0x03;
   318  000110  0E03               	movlw	3
   319  000112  6E8C               	movwf	140,c	;volatile
   320                           
   321                           ;main.c: 53:             StepDelay(100);
   322  000114  0E64               	movlw	100
   323  000116  6E01               	movwf	StepDelay@val^0,c
   324  000118  0E00               	movlw	0
   325  00011A  6E02               	movwf	(StepDelay@val+1)^0,c
   326  00011C  0E00               	movlw	0
   327  00011E  6E03               	movwf	(StepDelay@val+2)^0,c
   328  000120  0E00               	movlw	0
   329  000122  6E04               	movwf	(StepDelay@val+3)^0,c
   330  000124  ECB0  F000         	call	_StepDelay	;wreg free
   331  000128                     
   332                           ;main.c: 54:             LATD = 0x06;
   333  000128  0E06               	movlw	6
   334  00012A  6E8C               	movwf	140,c	;volatile
   335  00012C                     
   336                           ;main.c: 55:             StepDelay(100);
   337  00012C  0E64               	movlw	100
   338  00012E  6E01               	movwf	StepDelay@val^0,c
   339  000130  0E00               	movlw	0
   340  000132  6E02               	movwf	(StepDelay@val+1)^0,c
   341  000134  0E00               	movlw	0
   342  000136  6E03               	movwf	(StepDelay@val+2)^0,c
   343  000138  0E00               	movlw	0
   344  00013A  6E04               	movwf	(StepDelay@val+3)^0,c
   345  00013C  ECB0  F000         	call	_StepDelay	;wreg free
   346                           
   347                           ;main.c: 56:             LATD = 0x0C;
   348  000140  0E0C               	movlw	12
   349  000142  6E8C               	movwf	140,c	;volatile
   350  000144                     
   351                           ;main.c: 57:             StepDelay(100);
   352  000144  0E64               	movlw	100
   353  000146  6E01               	movwf	StepDelay@val^0,c
   354  000148  0E00               	movlw	0
   355  00014A  6E02               	movwf	(StepDelay@val+1)^0,c
   356  00014C  0E00               	movlw	0
   357  00014E  6E03               	movwf	(StepDelay@val+2)^0,c
   358  000150  0E00               	movlw	0
   359  000152  6E04               	movwf	(StepDelay@val+3)^0,c
   360  000154  ECB0  F000         	call	_StepDelay	;wreg free
   361  000158  EF12  F000         	goto	l844
   362  00015C  EF07  F000         	goto	start
   363  000160                     __end_of_main:
   364                           	opt callstack 0
   365                           
   366 ;; *************** function _StepDelay *****************
   367 ;; Defined at:
   368 ;;		line 69 in file "main.c"
   369 ;; Parameters:    Size  Location     Type
   370 ;;  val             4    0[COMRAM] unsigned long 
   371 ;; Auto vars:     Size  Location     Type
   372 ;;  j               4    8[COMRAM] unsigned long 
   373 ;;  i               4    4[COMRAM] unsigned long 
   374 ;; Return value:  Size  Location     Type
   375 ;;                  1    wreg      void 
   376 ;; Registers used:
   377 ;;		wreg, status,2, status,0
   378 ;; Tracked objects:
   379 ;;		On entry : 0/0
   380 ;;		On exit  : 0/0
   381 ;;		Unchanged: 0/0
   382 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   383 ;;      Params:         4       0       0       0       0       0       0       0       0
   384 ;;      Locals:         8       0       0       0       0       0       0       0       0
   385 ;;      Temps:          0       0       0       0       0       0       0       0       0
   386 ;;      Totals:        12       0       0       0       0       0       0       0       0
   387 ;;Total ram usage:       12 bytes
   388 ;; Hardware stack levels used:    1
   389 ;; Hardware stack levels required when called:    1
   390 ;; This function calls:
   391 ;;		Nothing
   392 ;; This function is called by:
   393 ;;		_main
   394 ;; This function uses a non-reentrant model
   395 ;;
   396                           
   397                           	psect	text1
   398  000160                     __ptext1:
   399                           	opt callstack 0
   400  000160                     _StepDelay:
   401                           	opt callstack 29
   402  000160                     
   403                           ;main.c: 69: void StepDelay(uint32_t val);main.c: 70: {;main.c: 71:      uint32_t i,j;;m
      +                          ain.c: 72:         for(i=0;i<val;i++)
   404  000160  0E00               	movlw	0
   405  000162  6E05               	movwf	StepDelay@i^0,c
   406  000164  0E00               	movlw	0
   407  000166  6E06               	movwf	(StepDelay@i+1)^0,c
   408  000168  0E00               	movlw	0
   409  00016A  6E07               	movwf	(StepDelay@i+2)^0,c
   410  00016C  0E00               	movlw	0
   411  00016E  6E08               	movwf	(StepDelay@i+3)^0,c
   412  000170  EFDB  F000         	goto	l44
   413  000174                     l820:
   414                           
   415                           ;main.c: 73:         {;main.c: 74:             for(j=0;j<165;j++);
   416  000174  0E00               	movlw	0
   417  000176  6E09               	movwf	StepDelay@j^0,c
   418  000178  0E00               	movlw	0
   419  00017A  6E0A               	movwf	(StepDelay@j+1)^0,c
   420  00017C  0E00               	movlw	0
   421  00017E  6E0B               	movwf	(StepDelay@j+2)^0,c
   422  000180  0E00               	movlw	0
   423  000182  6E0C               	movwf	(StepDelay@j+3)^0,c
   424  000184                     l826:
   425  000184  0E01               	movlw	1
   426  000186  2609               	addwf	StepDelay@j^0,f,c
   427  000188  0E00               	movlw	0
   428  00018A  220A               	addwfc	(StepDelay@j+1)^0,f,c
   429  00018C  220B               	addwfc	(StepDelay@j+2)^0,f,c
   430  00018E  220C               	addwfc	(StepDelay@j+3)^0,f,c
   431  000190  500C               	movf	(StepDelay@j+3)^0,w,c
   432  000192  100B               	iorwf	(StepDelay@j+2)^0,w,c
   433  000194  100A               	iorwf	(StepDelay@j+1)^0,w,c
   434  000196  E109               	bnz	u90
   435  000198  0EA5               	movlw	165
   436  00019A  5C09               	subwf	StepDelay@j^0,w,c
   437  00019C  A0D8               	btfss	status,0,c
   438  00019E  EFD3  F000         	goto	u91
   439  0001A2  EFD5  F000         	goto	u90
   440  0001A6                     u91:
   441  0001A6  EFC2  F000         	goto	l826
   442  0001AA                     u90:
   443  0001AA                     
   444                           ;main.c: 75:         }
   445  0001AA  0E01               	movlw	1
   446  0001AC  2605               	addwf	StepDelay@i^0,f,c
   447  0001AE  0E00               	movlw	0
   448  0001B0  2206               	addwfc	(StepDelay@i+1)^0,f,c
   449  0001B2  2207               	addwfc	(StepDelay@i+2)^0,f,c
   450  0001B4  2208               	addwfc	(StepDelay@i+3)^0,f,c
   451  0001B6                     l44:
   452  0001B6  5001               	movf	StepDelay@val^0,w,c
   453  0001B8  5C05               	subwf	StepDelay@i^0,w,c
   454  0001BA  5002               	movf	(StepDelay@val+1)^0,w,c
   455  0001BC  5806               	subwfb	(StepDelay@i+1)^0,w,c
   456  0001BE  5003               	movf	(StepDelay@val+2)^0,w,c
   457  0001C0  5807               	subwfb	(StepDelay@i+2)^0,w,c
   458  0001C2  5004               	movf	(StepDelay@val+3)^0,w,c
   459  0001C4  5808               	subwfb	(StepDelay@i+3)^0,w,c
   460  0001C6  A0D8               	btfss	status,0,c
   461  0001C8  EFE8  F000         	goto	u101
   462  0001CC  EFEA  F000         	goto	u100
   463  0001D0                     u101:
   464  0001D0  EFBA  F000         	goto	l820
   465  0001D4                     u100:
   466  0001D4  0012               	return		;funcret
   467  0001D6                     __end_of_StepDelay:
   468                           	opt callstack 0
   469                           
   470 ;; *************** function _InterruptInit *****************
   471 ;; Defined at:
   472 ;;		line 63 in file "main.c"
   473 ;; Parameters:    Size  Location     Type
   474 ;;		None
   475 ;; Auto vars:     Size  Location     Type
   476 ;;		None
   477 ;; Return value:  Size  Location     Type
   478 ;;                  1    wreg      void 
   479 ;; Registers used:
   480 ;;		None
   481 ;; Tracked objects:
   482 ;;		On entry : 0/0
   483 ;;		On exit  : 0/0
   484 ;;		Unchanged: 0/0
   485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   486 ;;      Params:         0       0       0       0       0       0       0       0       0
   487 ;;      Locals:         0       0       0       0       0       0       0       0       0
   488 ;;      Temps:          0       0       0       0       0       0       0       0       0
   489 ;;      Totals:         0       0       0       0       0       0       0       0       0
   490 ;;Total ram usage:        0 bytes
   491 ;; Hardware stack levels used:    1
   492 ;; Hardware stack levels required when called:    1
   493 ;; This function calls:
   494 ;;		Nothing
   495 ;; This function is called by:
   496 ;;		_main
   497 ;; This function uses a non-reentrant model
   498 ;;
   499                           
   500                           	psect	text2
   501  00022E                     __ptext2:
   502                           	opt callstack 0
   503  00022E                     _InterruptInit:
   504                           	opt callstack 29
   505  00022E                     
   506                           ;main.c: 64:     INTCONbits.INT0E = 1;
   507  00022E  88F2               	bsf	242,4,c	;volatile
   508                           
   509                           ;main.c: 65:     INTCON2bits.INTEDG0 = 1;
   510  000230  8CF1               	bsf	241,6,c	;volatile
   511                           
   512                           ;main.c: 66:     INTCONbits.INT0F = 0;
   513  000232  92F2               	bcf	242,1,c	;volatile
   514                           
   515                           ;main.c: 67:     INTCONbits.GIE = 1;
   516  000234  8EF2               	bsf	242,7,c	;volatile
   517  000236  0012               	return		;funcret
   518  000238                     __end_of_InterruptInit:
   519                           	opt callstack 0
   520                           
   521 ;; *************** function _ISR *****************
   522 ;; Defined at:
   523 ;;		line 78 in file "main.c"
   524 ;; Parameters:    Size  Location     Type
   525 ;;		None
   526 ;; Auto vars:     Size  Location     Type
   527 ;;		None
   528 ;; Return value:  Size  Location     Type
   529 ;;                  1    wreg      void 
   530 ;; Registers used:
   531 ;;		wreg, status,2, status,0
   532 ;; Tracked objects:
   533 ;;		On entry : 0/0
   534 ;;		On exit  : 0/0
   535 ;;		Unchanged: 0/0
   536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   537 ;;      Params:         0       0       0       0       0       0       0       0       0
   538 ;;      Locals:         0       0       0       0       0       0       0       0       0
   539 ;;      Temps:          0       0       0       0       0       0       0       0       0
   540 ;;      Totals:         0       0       0       0       0       0       0       0       0
   541 ;;Total ram usage:        0 bytes
   542 ;; Hardware stack levels used:    1
   543 ;; This function calls:
   544 ;;		Nothing
   545 ;; This function is called by:
   546 ;;		Interrupt level 2
   547 ;; This function uses a non-reentrant model
   548 ;;
   549                           
   550                           	psect	intcode
   551  000008                     __pintcode:
   552                           	opt callstack 0
   553  000008                     _ISR:
   554                           	opt callstack 29
   555                           
   556                           ;incstack = 0
   557  000008  820E               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
   558  00000A  EDEB  F000         	call	int_func,f	;refresh shadow registers
   559                           
   560                           	psect	intcode_body
   561  0001D6                     __pintcode_body:
   562                           	opt callstack 29
   563  0001D6                     int_func:
   564                           	opt callstack 29
   565  0001D6  0006               	pop		; remove dummy address from shadow register refresh
   566  0001D8                     
   567                           ;main.c: 81:   if(INTCONbits.INT0IF==1)
   568  0001D8  A2F2               	btfss	242,1,c	;volatile
   569  0001DA  EFF1  F000         	goto	i2u5_41
   570  0001DE  EFF3  F000         	goto	i2u5_40
   571  0001E2                     i2u5_41:
   572  0001E2  EF0F  F001         	goto	i2l58
   573  0001E6                     i2u5_40:
   574  0001E6                     
   575                           ;main.c: 82:   {;main.c: 83:     if(value == 0){
   576  0001E6  500D               	movf	_value^0,w,c
   577  0001E8  A4D8               	btfss	status,2,c
   578  0001EA  EFF9  F000         	goto	i2u6_41
   579  0001EE  EFFB  F000         	goto	i2u6_40
   580  0001F2                     i2u6_41:
   581  0001F2  EFFF  F000         	goto	i2l810
   582  0001F6                     i2u6_40:
   583  0001F6                     
   584                           ;main.c: 84:         value = 1;
   585  0001F6  0E01               	movlw	1
   586  0001F8  6E0D               	movwf	_value^0,c
   587                           
   588                           ;main.c: 85:     }
   589  0001FA  EF09  F001         	goto	i2l814
   590  0001FE                     i2l810:
   591  0001FE  040D               	decf	_value^0,w,c
   592  000200  A4D8               	btfss	status,2,c
   593  000202  EF05  F001         	goto	i2u7_41
   594  000206  EF07  F001         	goto	i2u7_40
   595  00020A                     i2u7_41:
   596  00020A  EF09  F001         	goto	i2l814
   597  00020E                     i2u7_40:
   598  00020E                     
   599                           ;main.c: 87:         value = 0;
   600  00020E  0E00               	movlw	0
   601  000210  6E0D               	movwf	_value^0,c
   602  000212                     i2l814:
   603                           
   604                           ;main.c: 89:     LATAbits.LA3 = value;
   605  000212  B00D               	btfsc	_value^0,0,c
   606  000214  D002               	bra	i2u8_45
   607  000216  9689               	bcf	137,3,c	;volatile
   608  000218  D001               	bra	i2u8_46
   609  00021A                     i2u8_45:
   610  00021A  8689               	bsf	137,3,c	;volatile
   611  00021C                     i2u8_46:
   612  00021C                     
   613                           ;main.c: 90:     INTCONbits.INT0IF=0;
   614  00021C  92F2               	bcf	242,1,c	;volatile
   615  00021E                     i2l58:
   616  00021E  920E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   617  000220  0011               	retfie		f
   618  000222                     __end_of_ISR:
   619                           	opt callstack 0
   620  0000                     
   621                           	psect	rparam
   622  0000                     
   623                           	psect	temp
   624  00000E                     btemp:
   625                           	opt callstack 0
   626  00000E                     	ds	1
   627  0000                     int$flags	set	btemp
   628  0000                     wtemp8	set	btemp+1
   629  0000                     ttemp5	set	btemp+1
   630  0000                     ttemp6	set	btemp+4
   631  0000                     ttemp7	set	btemp+8
   632                           tosu	equ	0xFFF
   633                           tosh	equ	0xFFE
   634                           tosl	equ	0xFFD
   635                           stkptr	equ	0xFFC
   636                           pclatu	equ	0xFFB
   637                           pclath	equ	0xFFA
   638                           pcl	equ	0xFF9
   639                           tblptru	equ	0xFF8
   640                           tblptrh	equ	0xFF7
   641                           tblptrl	equ	0xFF6
   642                           tablat	equ	0xFF5
   643                           prodh	equ	0xFF4
   644                           prodl	equ	0xFF3
   645                           indf0	equ	0xFEF
   646                           postinc0	equ	0xFEE
   647                           postdec0	equ	0xFED
   648                           preinc0	equ	0xFEC
   649                           plusw0	equ	0xFEB
   650                           fsr0h	equ	0xFEA
   651                           fsr0l	equ	0xFE9
   652                           wreg	equ	0xFE8
   653                           indf1	equ	0xFE7
   654                           postinc1	equ	0xFE6
   655                           postdec1	equ	0xFE5
   656                           preinc1	equ	0xFE4
   657                           plusw1	equ	0xFE3
   658                           fsr1h	equ	0xFE2
   659                           fsr1l	equ	0xFE1
   660                           bsr	equ	0xFE0
   661                           indf2	equ	0xFDF
   662                           postinc2	equ	0xFDE
   663                           postdec2	equ	0xFDD
   664                           preinc2	equ	0xFDC
   665                           plusw2	equ	0xFDB
   666                           fsr2h	equ	0xFDA
   667                           fsr2l	equ	0xFD9
   668                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         1
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     12      13
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_StepDelay

Critical Paths under _ISR in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    1004
                      _InterruptInit
                          _StepDelay
 ---------------------------------------------------------------------------------
 (1) _StepDelay                                           12     8      4    1004
                                              0 COMRAM    12     8      4
 ---------------------------------------------------------------------------------
 (1) _InterruptInit                                        0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _ISR                                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _InterruptInit
   _StepDelay

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E      C       D       1       13.8%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0       D      20        0.0%
DATA                 0      0       D       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Thu Mar 19 14:48:36 2020

                     l41 0236                       l44 01B6                       l49 01D4  
                     u90 01AA                       u91 01A6              __CFG_BOR$ON 000000  
            __CFG_BORV$3 000000             __CFG_CP0$OFF 000000             __CFG_CP1$OFF 000000  
                    l820 0174                      l734 022E                      l830 0012  
                    l840 0020                      l832 0016                      l826 0184  
                    l818 0160                      l850 004C                      l842 0022  
                    l834 001A                      l828 01AA                      l860 00AC  
                    l852 0064                      l844 0024                      l836 001C  
                    l870 00FC                      l862 00B0                      l854 0068  
                    l846 0034                      l838 001E                      l872 0110  
                    l864 00C8                      l856 0080                      l848 0038  
                    l874 0128                      l866 00DC                      l858 0094  
                    l876 012C                      l868 00F8                      l878 0144  
           __CFG_CPB$OFF 000000                      u100 01D4                      u101 01D0  
                    u110 0034                      u111 0030                      _ISR 0008  
           __CFG_LVP$OFF 000000                     ?_ISR 0001             __CFG_WDT$OFF 000000  
                   _LATD 000F8C                     i2l58 021E                     _main 0012  
                   btemp 000E                     start 000E            __CFG_IESO$OFF 000000  
          __CFG_MCLRE$ON 000000             ___param_bank 000000                    ??_ISR 0001  
          __CFG_PLLDIV$5 000000                    ?_main 0001                    i2l810 01FE  
                  i2l812 020E                    i2l804 01D8                    i2l814 0212  
                  i2l806 01E6                    i2l816 021C                    i2l808 01F6  
          __CFG_USBDIV$2 000000            __CFG_PWRT$OFF 000000            __CFG_WRT0$OFF 000000  
          __CFG_WRT1$OFF 000000           __CFG_EBTR0$OFF 000000           __CFG_FCMEN$OFF 000000  
         __CFG_EBTR1$OFF 000000            __CFG_WRTB$OFF 000000            __CFG_WRTC$OFF 000000  
         __CFG_EBTRB$OFF 000000                    _value 000D                    ttemp5 000F  
                  ttemp6 0012                    ttemp7 0016                    status 000FD8  
                  wtemp8 000F          __initialization 0222             __end_of_main 0160  
                 ??_main 000D            __activetblptr 000000                   _OSCCON 000FD3  
                 i2u5_40 01E6                   i2u5_41 01E2                   i2u6_40 01F6  
                 i2u6_41 01F2                   i2u7_40 020E                   i2u7_41 020A  
                 i2u8_45 021A                   i2u8_46 021C           __CFG_VREGEN$ON 000000  
         __CFG_XINST$OFF 000000           __CFG_STVREN$ON 000000   __size_of_InterruptInit 000A  
     __size_of_StepDelay 0076               StepDelay@i 0005               StepDelay@j 0009  
             __accesstop 0060  __end_of__initialization 0224          __CFG_PBADEN$OFF 000000  
          ___rparam_used 000001           __pcstackCOMRAM 0001            _InterruptInit 022E  
      __end_of_StepDelay 01D6           ?_InterruptInit 0001                  __Hparam 0000  
                __Lparam 0000                  __pcinit 0222                  __ramtop 0800  
                __ptext0 0012                  __ptext1 0160                  __ptext2 022E  
           __size_of_ISR 021A           __pintcode_body 01D6     end_of_initialization 0224  
                int_func 01D6                _TRISAbits 000F92                _TRISDbits 000F95  
        ??_InterruptInit 0001      start_initialization 0222              __end_of_ISR 0222  
       __CFG_LPT1OSC$OFF 000000                _StepDelay 0160              __pbssCOMRAM 000D  
              __pintcode 0008               ?_StepDelay 0001                 _LATAbits 000F89  
       __CFG_WDTPS$32768 000000              _INTCON2bits 000FF1                 __Hrparam 0000  
               __Lrparam 0000              ??_StepDelay 0005    __end_of_InterruptInit 0238  
          __size_of_main 014E                 int$flags 000E    __CFG_CPUDIV$OSC1_PLL2 000000  
             _INTCONbits 000FF2                 intlevel2 0000             StepDelay@val 0001  
     __CFG_FOSC$HSPLL_HS 000000  
